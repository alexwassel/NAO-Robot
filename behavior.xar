<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.ald.softbankrobotics.com/schema/choregraphe/project.xsd" xar_version="3">
  <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
    <bitmap>media/images/box/root.png</bitmap>
    <script language="4">
      <content>
        <![CDATA[]]>
      </content>
    </script>
    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
    <Timeline enable="0">
      <BehaviorLayer name="behavior_layer1">
        <BehaviorKeyframe name="keyframe1" index="1">
          <Diagram>
            <Box name="Introduction" id="1" localization="8" tooltip="" x="97" y="51">
              <bitmap>media/images/box/box-diagram.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
              <Timeline enable="0">
                <BehaviorLayer name="behavior_layer1">
                  <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                      <Box name="Animated Say" id="2" localization="8" tooltip="Say some text with animations. The text can be localized." x="205" y="60">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Hello, my name is earl! I am thrilled to welcome you to U V A! Touch the center of my head if you would like to play a game. " default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                        <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                          <Choice value="disabled" />
                          <Choice value="random" />
                          <Choice value="contextual" />
                        </Parameter>
                        <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Tactile Head" id="1" localization="8" tooltip="Detect touch on head tactile sensor." x="416" y="61">
                        <bitmap>media/images/box/sensors/tactileHead.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
            self.onStopped() #~ activate output of the box
        pass]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Input name="FrontTactilTouched" type="0" type_size="1" nature="4" stm_value_name="FrontTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" />
                        <Input name="MiddleTactilTouched" type="0" type_size="1" nature="4" stm_value_name="MiddleTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="5" />
                        <Input name="RearTactilTouched" type="0" type_size="1" nature="4" stm_value_name="RearTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="6" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="7" />
                        <Output name="frontTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The front tactile head sensor was touched." id="8" />
                        <Output name="middleTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The middle tactile head sensor was touched." id="9" />
                        <Output name="rearTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The rear tactile head sensor was touched." id="10" />
                        <Timeline enable="0">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram>
                                <Box name="If &gt; 0" id="1" localization="8" tooltip="Transmit only if value is &gt; 0." x="260" y="17">
                                  <bitmap>media/images/box/box-diagram.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                </Box>
                                <Box name="If &gt; 0" id="2" localization="8" tooltip="Transmit only if value is &gt; 0." x="256" y="119">
                                  <bitmap>media/images/box/box-diagram.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                </Box>
                                <Box name="If &gt; 0" id="3" localization="8" tooltip="Transmit only if value is &gt; 0." x="261" y="223">
                                  <bitmap>media/images/box/box-diagram.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                </Box>
                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" />
                                <Link inputowner="0" indexofinput="8" outputowner="1" indexofoutput="4" />
                                <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="5" />
                                <Link inputowner="0" indexofinput="9" outputowner="2" indexofoutput="4" />
                                <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="6" />
                                <Link inputowner="0" indexofinput="10" outputowner="3" indexofoutput="4" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                        </Timeline>
                        <Resource name="Head-sequence" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Animated Say (1)" id="3" localization="8" tooltip="Say some text with animations. The text can be localized." x="624" y="61">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Thats wonderful! We are going to play charades, in which you will have to guess the person place or thing I am trying to emmet tate." default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                        <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                          <Choice value="disabled" />
                          <Choice value="random" />
                          <Choice value="contextual" />
                        </Parameter>
                        <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Animated Say (2)" id="4" localization="8" tooltip="Say some text with animations. The text can be localized." x="831" y="66">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Do you want me to act out an animal? A sport? A place? or something random?" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                        <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                          <Choice value="disabled" />
                          <Choice value="random" />
                          <Choice value="contextual" />
                        </Parameter>
                        <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Speech Reco." id="5" localization="8" tooltip="Recognize a word from a list of words set in the box parameters.&#x0A;&#x0A;V1.1.0&#x0A;" x="1038" y="66">
                        <bitmap>media/images/box/interaction/ear.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        try:
            self.asr = self.session().service("ALSpeechRecognition")
        except Exception as e:
            self.asr = None
            self.logger.error(e)
        self.memory = self.session().service("ALMemory")
        from threading import Lock
        self.bIsRunning = False
        self.mutex = Lock()
        self.hasPushed = False
        self.hasSubscribed = False
        self.BIND_PYTHON(self.getName(), "onWordRecognized")

    def onUnload(self):
        from threading import Lock
        self.mutex.acquire()
        try:
            if (self.bIsRunning):
                if (self.hasSubscribed):
                    self.memory.unsubscribeToEvent("WordRecognized", self.getName())
                if (self.hasPushed and self.asr):
                    self.asr.popContexts()
        except RuntimeError, e:
            self.mutex.release()
            raise e
        self.bIsRunning = False;
        self.mutex.release()

    def onInput_onStart(self):
        from threading import Lock
        self.mutex.acquire()
        if(self.bIsRunning):
            self.mutex.release()
            return
        self.bIsRunning = True
        try:
            if self.asr:
                self.asr.pushContexts()
            self.hasPushed = True
            if self.asr:
                self.asr.setVocabulary( self.getParameter("Word list").split(';'), self.getParameter("Enable word spotting") )
            self.memory.subscribeToEvent("WordRecognized", self.getName(), "onWordRecognized")
            self.hasSubscribed = True
        except RuntimeError, e:
            self.mutex.release()
            self.onUnload()
            raise e
        self.mutex.release()

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()

    def onWordRecognized(self, key, value, message):
        if(len(value) > 1 and value[1] >= self.getParameter("Confidence threshold (%)")/100.):
            self.wordRecognized(value[0]) #~ activate output of the box
        else:
            self.onNothing()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Output name="wordRecognized" type="3" type_size="1" nature="2" inner="0" tooltip="Word recognized with a confidence higher than the threshold set in the box parameters." id="5" />
                        <Output name="onNothing" type="1" type_size="1" nature="2" inner="0" tooltip="Nothing has been understood." id="6" />
                        <Parameter name="Word list" inherits_from_parent="0" content_type="3" value="animal;sport;place;random" default_value="yes;no" custom_choice="0" tooltip="Try to recognize a word from a list of words set in the box parameters." id="7" />
                        <Parameter name="Confidence threshold (%)" inherits_from_parent="0" content_type="1" value="30" default_value="30" min="0" max="100" tooltip="If the confidence associated with the word recognized is below this threshold, the robot will consider that it is not recognized." id="8" />
                        <Parameter name="Enable word spotting" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="If this option is not activated the robot will only understand exact expressions. If it is, he will spot the exact expressions even in the middle of a sentence.&#x0A;&#x0A;!!Warning!! This option is only available with the speech recognition module using Nuance (ie in Atom version of the robot)." id="9" />
                        <Resource name="Speech recognition" type="Lock" timeout="0" />
                      </Box>
                      <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                      <Link inputowner="1" indexofinput="2" outputowner="2" indexofoutput="4" />
                      <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="9" />
                      <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="4" />
                      <Link inputowner="5" indexofinput="2" outputowner="4" indexofoutput="4" />
                      <Link inputowner="5" indexofinput="3" outputowner="5" indexofoutput="5" />
                      <Link inputowner="0" indexofinput="4" outputowner="5" indexofoutput="5" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
              </Timeline>
            </Box>
            <Box name="Random" id="3" localization="8" tooltip="" x="636" y="60">
              <bitmap>media/images/box/box-diagram.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
              <Timeline enable="0">
                <BehaviorLayer name="behavior_layer1">
                  <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                      <Box name="Animated Say" id="3" localization="8" tooltip="Say some text with animations. The text can be localized." x="84" y="17">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Parameter name="Text" inherits_from_parent="0" content_type="5" value="I am going to imitate a random event!" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                        <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                          <Choice value="disabled" />
                          <Choice value="random" />
                          <Choice value="contextual" />
                        </Parameter>
                        <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Random Int." id="1" localization="8" tooltip="Generate a random integer between a min number and a max number set as&#x0A;parameters.&#x0A;Note that the min and max numbers are included in the range of possible values." x="234" y="23">
                        <bitmap>media/images/box/box-script.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import random

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        # attributes needed in shuffle mode
        self.nMax = 1
        self.nMin = 0
        self.nIndex = self.nMax - self.nMin
        self.aShuffled = []

    def onUnload(self):
         #puts code for box cleanup here
        pass

    def onInput_onStart(self):
        nMax = self.getParameter("Max value")
        nMin = self.getParameter("Min value")
        if( nMin > nMax ):
            temp = nMin
            nMin = nMax
            nMax = temp
        # if shuffle
        if( self.getParameter("Shuffle") ):
            self.nIndex += 1
            if( self.nIndex > self.nMax - self.nMin or nMax != self.nMax or nMin != self.nMin ):
                self.nMax = nMax
                self.nMin = nMin
                self.nIndex = 0
                self.aShuffled = []
                for i in range( nMin, nMax + 1 ):
                    self.aShuffled.insert( random.randint(0, len(self.aShuffled)), i )
            self.output_RandomValue( self.aShuffled[self.nIndex] )
        # if not shuffle
        else:
            self.nIndex = self.nMax - self.nMin
            self.output_RandomValue( random.randint( nMin, nMax ) )]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="Generate a random integer." id="2" />
                        <Output name="output_RandomValue" type="2" type_size="1" nature="2" inner="0" tooltip="The random value obtained." id="3" />
                        <Parameter name="Min value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="1000" tooltip="The minimum value you can get." id="4" />
                        <Parameter name="Max value" inherits_from_parent="0" content_type="1" value="0" default_value="10" min="0" max="1000" tooltip="The maximum number you can get." id="5" />
                        <Parameter name="Shuffle" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="When this option is selected the box will give all the numbers between min and&#x0A;max before giving the same number twice." id="6" />
                      </Box>
                      <Box name="Switch Case" id="2" localization="8" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." plugin="dispatcher_plugin" x="383" y="23">
                        <bitmap>media/images/box/interaction/choice.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
		  GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
		  GeneratedClass.__init__( self )

	def onInput_onStart(self, p):
		p = self.typeConversion(p)
		if(p == self.typeConversion(0)):
			self.output_1(p)
		elif(p == self.typeConversion(1)):
			self.output_2(p)
		elif(p == self.typeConversion(2)):
			self.output_3(p)
		else:
			self.onDefault()

	def typeConversion(self, p):
		try:
			p = float(p)
			pint = int(p)
			if( p == pint ):
				p = pint
		except:
			p = str(p)
		return p]]>
                          </content>
                        </script>
                        <pluginContent>
                          <keywords>
                            <keyword>0</keyword>
                            <keyword>1</keyword>
                            <keyword>2</keyword>
                            <keyword></keyword>
                            <keyword></keyword>
                          </keywords>
                        </pluginContent>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" />
                        <Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" />
                        <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
                        <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
                        <Output name="output_3" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" />
                        <Output name="output_4" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="7" />
                      </Box>
                      <Box name="Zombie Apocolypse" id="4" localization="8" tooltip="" x="701" y="24">
                        <bitmap>media/images/box/box-diagram.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="0">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram>
                                <Box name="Eye LEDs" id="1" localization="8" tooltip="Set the LED color of the eyes. Note that you must open the box to enter the color." x="378" y="84">
                                  <bitmap>media/images/box/interaction/LED.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                  <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Both" default_value="Both" custom_choice="0" tooltip="Choose the eye where the LED light is set." id="4">
                                    <Choice value="Both" />
                                    <Choice value="Left" />
                                    <Choice value="Right" />
                                  </Parameter>
                                  <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="5" />
                                  <Timeline enable="0">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                          <Box name="Eyes LEDs" id="15" localization="8" tooltip="Set the color of LEDs of robot&apos;s eyes." x="281" y="41">
                                            <bitmap>media/images/box/interaction/LED.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.fadeOps = []
        self.leds = self.session().service("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_color(self, p):
        if( self.getParameter("Side") == "Left" ):
            sGroup = "LeftFaceLeds"
        elif( self.getParameter("Side") == "Right" ):
            sGroup = "RightFaceLeds"
        else:
            sGroup = "FaceLeds"
        fadeOp = self.leds.fadeRGB(sGroup, 256*256*p[0] + 256*p[1] + p[2], self.getParameter("Duration (s)"), _async=True)
        self.fadeOps.append(fadeOp)
        fadeOp.wait()
        self.fadeOps.remove(fadeOp)
        if( self.fadeOps == [] ):
            self.onDone() # activate output of the box]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="color" type="2" type_size="3" nature="2" inner="0" tooltip="Color of robot&apos;s eyes." id="2" />
                                            <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                            <Parameter name="Side" inherits_from_parent="1" content_type="3" value="Both" default_value="Both" custom_choice="0" tooltip="Choose the eye where the LED light is set." id="4">
                                              <Choice value="Both" />
                                              <Choice value="Left" />
                                              <Choice value="Right" />
                                            </Parameter>
                                            <Parameter name="Duration (s)" inherits_from_parent="1" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="5" />
                                          </Box>
                                          <Box name="Color Edit" id="16" localization="8" tooltip="Transmit a table of number [R,G,B] correponsding to the selected color." plugin="coloredit_plugin" x="105" y="47">
                                            <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped([255, 0, 0])]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <color>#ff0000</color>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="To send the color on the output." id="2" />
                                            <Output name="onStopped" type="2" type_size="3" nature="1" inner="0" tooltip="[R,G,B] with R, G and B between 0 and 255." id="3" />
                                          </Box>
                                          <Link inputowner="15" indexofinput="2" outputowner="16" indexofoutput="3" />
                                          <Link inputowner="16" indexofinput="2" outputowner="0" indexofoutput="2" />
                                          <Link inputowner="0" indexofinput="3" outputowner="15" indexofoutput="3" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                  </Timeline>
                                </Box>
                                <Box name="Timeline" id="2" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="379" y="237">
                                  <bitmap>media/images/box/movement/move.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Timeline enable="1" fps="2" start_frame="1" end_frame="-1" size="30">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram />
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                    <ActuatorList model="nao">
                                      <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                                        <Key frame="3" value="-4.22121" />
                                        <Key frame="4" value="-4.22121" />
                                        <Key frame="5" value="-4.22121" />
                                        <Key frame="6" value="-4.22121" />
                                        <Key frame="7" value="-4.22121" />
                                        <Key frame="8" value="-4.22121" />
                                        <Key frame="9" value="-4.22121" />
                                        <Key frame="10" value="-4.22121" />
                                        <Key frame="11" value="-4.22121" />
                                        <Key frame="12" value="-4.22121" />
                                        <Key frame="13" value="-4.22121" />
                                        <Key frame="14" value="-4.22121" />
                                        <Key frame="15" value="-4.22121" />
                                        <Key frame="16" value="-4.22121" />
                                        <Key frame="17" value="-4.22121" />
                                        <Key frame="18" value="-4.22121" />
                                        <Key frame="19" value="-4.22121" />
                                        <Key frame="20" value="-4.22121" />
                                        <Key frame="21" value="-4.22121" />
                                        <Key frame="22" value="-4.22121" />
                                        <Key frame="23" value="-4.22121" />
                                        <Key frame="24" value="-4.22121" />
                                        <Key frame="25" value="-4.22121" />
                                        <Key frame="26" value="-4.22121" />
                                        <Key frame="27" value="-4.22121" />
                                        <Key frame="28" value="-4.22121" />
                                        <Key frame="29" value="-4.22121" />
                                        <Key frame="30" value="-4.22121" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                                        <Key frame="3" value="-18.1081" />
                                        <Key frame="4" value="-18.1081" />
                                        <Key frame="5" value="-18.1081" />
                                        <Key frame="6" value="-18.1081" />
                                        <Key frame="7" value="-18.1081" />
                                        <Key frame="8" value="-18.1081" />
                                        <Key frame="9" value="-18.1081" />
                                        <Key frame="10" value="-18.1081" />
                                        <Key frame="11" value="-18.1081" />
                                        <Key frame="12" value="-18.1081" />
                                        <Key frame="13" value="-18.1081" />
                                        <Key frame="14" value="-18.1081" />
                                        <Key frame="15" value="-18.1081" />
                                        <Key frame="16" value="-18.1081" />
                                        <Key frame="17" value="-18.1081" />
                                        <Key frame="18" value="-18.1081" />
                                        <Key frame="19" value="-18.1081" />
                                        <Key frame="20" value="-18.1081" />
                                        <Key frame="21" value="-18.1081" />
                                        <Key frame="22" value="-18.1081" />
                                        <Key frame="23" value="-18.1081" />
                                        <Key frame="24" value="-18.1081" />
                                        <Key frame="25" value="-18.1081" />
                                        <Key frame="26" value="-18.1081" />
                                        <Key frame="27" value="-18.1081" />
                                        <Key frame="28" value="-18.1081" />
                                        <Key frame="29" value="-18.1081" />
                                        <Key frame="30" value="-18.1081" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                                        <Key frame="3" value="5.09532" />
                                        <Key frame="4" value="5.09532" />
                                        <Key frame="5" value="5.09532" />
                                        <Key frame="6" value="5.09532" />
                                        <Key frame="7" value="5.09532" />
                                        <Key frame="8" value="5.09532" />
                                        <Key frame="9" value="5.09532" />
                                        <Key frame="10" value="5.09532" />
                                        <Key frame="11" value="5.09532" />
                                        <Key frame="12" value="5.09532" />
                                        <Key frame="13" value="5.09532" />
                                        <Key frame="14" value="5.09532" />
                                        <Key frame="15" value="5.09532" />
                                        <Key frame="16" value="5.09532" />
                                        <Key frame="17" value="5.09532" />
                                        <Key frame="18" value="5.09532" />
                                        <Key frame="19" value="5.09532" />
                                        <Key frame="20" value="5.09532" />
                                        <Key frame="21" value="5.09532" />
                                        <Key frame="22" value="5.09532" />
                                        <Key frame="23" value="5.09532" />
                                        <Key frame="24" value="5.09532" />
                                        <Key frame="25" value="5.09532" />
                                        <Key frame="26" value="5.09532" />
                                        <Key frame="27" value="5.09532" />
                                        <Key frame="28" value="5.09532" />
                                        <Key frame="29" value="5.09532" />
                                        <Key frame="30" value="5.09532" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                                        <Key frame="3" value="-6.06212" />
                                        <Key frame="4" value="-6.06212" />
                                        <Key frame="5" value="-6.06212" />
                                        <Key frame="6" value="-6.06212" />
                                        <Key frame="7" value="-6.06212" />
                                        <Key frame="8" value="-6.06212" />
                                        <Key frame="9" value="-6.06212" />
                                        <Key frame="10" value="-6.06212" />
                                        <Key frame="11" value="-6.06212" />
                                        <Key frame="12" value="-6.06212" />
                                        <Key frame="13" value="-6.06212" />
                                        <Key frame="14" value="-6.06212" />
                                        <Key frame="15" value="-6.06212" />
                                        <Key frame="16" value="-6.06212" />
                                        <Key frame="17" value="-6.06212" />
                                        <Key frame="18" value="-6.06212" />
                                        <Key frame="19" value="-6.06212" />
                                        <Key frame="20" value="-6.06212" />
                                        <Key frame="21" value="-6.06212" />
                                        <Key frame="22" value="-6.06212" />
                                        <Key frame="23" value="-6.06212" />
                                        <Key frame="24" value="-6.06212" />
                                        <Key frame="25" value="-6.06212" />
                                        <Key frame="26" value="-6.06212" />
                                        <Key frame="27" value="-6.06212" />
                                        <Key frame="28" value="-6.06212" />
                                        <Key frame="29" value="-6.06212" />
                                        <Key frame="30" value="-6.06212" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                                        <Key frame="3" value="-7.90786" />
                                        <Key frame="4" value="-7.90786" />
                                        <Key frame="5" value="-7.90786" />
                                        <Key frame="6" value="-7.90786" />
                                        <Key frame="7" value="-7.90786" />
                                        <Key frame="8" value="-7.90786" />
                                        <Key frame="9" value="-7.90786" />
                                        <Key frame="10" value="-7.90786" />
                                        <Key frame="11" value="-7.90786" />
                                        <Key frame="12" value="-7.90786" />
                                        <Key frame="13" value="-7.90786" />
                                        <Key frame="14" value="-7.90786" />
                                        <Key frame="15" value="-7.90786" />
                                        <Key frame="16" value="-7.90786" />
                                        <Key frame="17" value="-7.90786" />
                                        <Key frame="18" value="-7.90786" />
                                        <Key frame="19" value="-7.90786" />
                                        <Key frame="20" value="-7.90786" />
                                        <Key frame="21" value="-7.90786" />
                                        <Key frame="22" value="-7.90786" />
                                        <Key frame="23" value="-7.90786" />
                                        <Key frame="24" value="-7.90786" />
                                        <Key frame="25" value="-7.90786" />
                                        <Key frame="26" value="-7.90786" />
                                        <Key frame="27" value="-7.90786" />
                                        <Key frame="28" value="-7.90786" />
                                        <Key frame="29" value="-7.90786" />
                                        <Key frame="30" value="-7.90786" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                                        <Key frame="3" value="-61.8782" />
                                        <Key frame="4" value="-61.8782" />
                                        <Key frame="5" value="-61.8782" />
                                        <Key frame="6" value="-61.8782" />
                                        <Key frame="7" value="-61.8782" />
                                        <Key frame="8" value="-61.8782" />
                                        <Key frame="9" value="-61.8782" />
                                        <Key frame="10" value="-61.8782" />
                                        <Key frame="11" value="-61.8782" />
                                        <Key frame="12" value="-61.8782" />
                                        <Key frame="13" value="-61.8782" />
                                        <Key frame="14" value="-61.8782" />
                                        <Key frame="15" value="-61.8782" />
                                        <Key frame="16" value="-61.8782" />
                                        <Key frame="17" value="-61.8782" />
                                        <Key frame="18" value="-61.8782" />
                                        <Key frame="19" value="-61.8782" />
                                        <Key frame="20" value="-61.8782" />
                                        <Key frame="21" value="-61.8782" />
                                        <Key frame="22" value="-61.8782" />
                                        <Key frame="23" value="-61.8782" />
                                        <Key frame="24" value="-61.8782" />
                                        <Key frame="25" value="-61.8782" />
                                        <Key frame="26" value="-61.8782" />
                                        <Key frame="27" value="-61.8782" />
                                        <Key frame="28" value="-61.8782" />
                                        <Key frame="29" value="-61.8782" />
                                        <Key frame="30" value="-61.8782" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                                        <Key frame="3" value="0.7348" />
                                        <Key frame="4" value="0.7348" />
                                        <Key frame="5" value="0.7348" />
                                        <Key frame="6" value="0.7348" />
                                        <Key frame="7" value="0.7348" />
                                        <Key frame="8" value="0.7348" />
                                        <Key frame="9" value="0.7348" />
                                        <Key frame="10" value="0.7348" />
                                        <Key frame="11" value="0.7348" />
                                        <Key frame="12" value="0.7348" />
                                        <Key frame="13" value="0.7348" />
                                        <Key frame="14" value="0.7348" />
                                        <Key frame="15" value="0.7348" />
                                        <Key frame="16" value="0.7348" />
                                        <Key frame="17" value="0.7348" />
                                        <Key frame="18" value="0.7348" />
                                        <Key frame="19" value="0.7348" />
                                        <Key frame="20" value="0.7348" />
                                        <Key frame="21" value="0.7348" />
                                        <Key frame="22" value="0.7348" />
                                        <Key frame="23" value="0.7348" />
                                        <Key frame="24" value="0.7348" />
                                        <Key frame="25" value="0.7348" />
                                        <Key frame="26" value="0.7348" />
                                        <Key frame="27" value="0.7348" />
                                        <Key frame="28" value="0.7348" />
                                        <Key frame="29" value="0.7348" />
                                        <Key frame="30" value="0.7348" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                                        <Key frame="3" value="7.20952" />
                                        <Key frame="4" value="7.20952" />
                                        <Key frame="5" value="7.20952" />
                                        <Key frame="6" value="7.20952" />
                                        <Key frame="7" value="7.20952" />
                                        <Key frame="8" value="7.20952" />
                                        <Key frame="9" value="7.20952" />
                                        <Key frame="10" value="7.20952" />
                                        <Key frame="11" value="7.20952" />
                                        <Key frame="12" value="7.20952" />
                                        <Key frame="13" value="7.20952" />
                                        <Key frame="14" value="7.20952" />
                                        <Key frame="15" value="7.20952" />
                                        <Key frame="16" value="7.20952" />
                                        <Key frame="17" value="7.20952" />
                                        <Key frame="18" value="7.20952" />
                                        <Key frame="19" value="7.20952" />
                                        <Key frame="20" value="7.20952" />
                                        <Key frame="21" value="7.20952" />
                                        <Key frame="22" value="7.20952" />
                                        <Key frame="23" value="7.20952" />
                                        <Key frame="24" value="7.20952" />
                                        <Key frame="25" value="7.20952" />
                                        <Key frame="26" value="7.20952" />
                                        <Key frame="27" value="7.20952" />
                                        <Key frame="28" value="7.20952" />
                                        <Key frame="29" value="7.20952" />
                                        <Key frame="30" value="7.20952" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                                        <Key frame="3" value="6.85796" />
                                        <Key frame="4" value="6.85796" />
                                        <Key frame="5" value="6.85796" />
                                        <Key frame="6" value="6.85796" />
                                        <Key frame="7" value="6.85796" />
                                        <Key frame="8" value="6.85796" />
                                        <Key frame="9" value="6.85796" />
                                        <Key frame="10" value="6.85796" />
                                        <Key frame="11" value="6.85796" />
                                        <Key frame="12" value="6.85796" />
                                        <Key frame="13" value="6.85796" />
                                        <Key frame="14" value="6.85796" />
                                        <Key frame="15" value="6.85796" />
                                        <Key frame="16" value="6.85796" />
                                        <Key frame="17" value="6.85796" />
                                        <Key frame="18" value="6.85796" />
                                        <Key frame="19" value="6.85796" />
                                        <Key frame="20" value="6.85796" />
                                        <Key frame="21" value="6.85796" />
                                        <Key frame="22" value="6.85796" />
                                        <Key frame="23" value="6.85796" />
                                        <Key frame="24" value="6.85796" />
                                        <Key frame="25" value="6.85796" />
                                        <Key frame="26" value="6.85796" />
                                        <Key frame="27" value="6.85796" />
                                        <Key frame="28" value="6.85796" />
                                        <Key frame="29" value="6.85796" />
                                        <Key frame="30" value="6.85796" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                                        <Key frame="3" value="-10.0173" />
                                        <Key frame="4" value="-10.0173" />
                                        <Key frame="5" value="-10.0173" />
                                        <Key frame="6" value="-10.0173" />
                                        <Key frame="7" value="-10.0173" />
                                        <Key frame="8" value="-10.0173" />
                                        <Key frame="9" value="-10.0173" />
                                        <Key frame="10" value="-10.0173" />
                                        <Key frame="11" value="-10.0173" />
                                        <Key frame="12" value="-10.0173" />
                                        <Key frame="13" value="-10.0173" />
                                        <Key frame="14" value="-10.0173" />
                                        <Key frame="15" value="-10.0173" />
                                        <Key frame="16" value="-10.0173" />
                                        <Key frame="17" value="-10.0173" />
                                        <Key frame="18" value="-10.0173" />
                                        <Key frame="19" value="-10.0173" />
                                        <Key frame="20" value="-10.0173" />
                                        <Key frame="21" value="-10.0173" />
                                        <Key frame="22" value="-10.0173" />
                                        <Key frame="23" value="-10.0173" />
                                        <Key frame="24" value="-10.0173" />
                                        <Key frame="25" value="-10.0173" />
                                        <Key frame="26" value="-10.0173" />
                                        <Key frame="27" value="-10.0173" />
                                        <Key frame="28" value="-10.0173" />
                                        <Key frame="29" value="-10.0173" />
                                        <Key frame="30" value="-10.0173" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                                        <Key frame="3" value="-5.18802" />
                                        <Key frame="4" value="-5.18802" />
                                        <Key frame="5" value="-5.18802" />
                                        <Key frame="6" value="-5.18802" />
                                        <Key frame="7" value="-5.18802" />
                                        <Key frame="8" value="-5.18802" />
                                        <Key frame="9" value="-5.18802" />
                                        <Key frame="10" value="-5.18802" />
                                        <Key frame="11" value="-5.18802" />
                                        <Key frame="12" value="-5.18802" />
                                        <Key frame="13" value="-5.18802" />
                                        <Key frame="14" value="-5.18802" />
                                        <Key frame="15" value="-5.18802" />
                                        <Key frame="16" value="-5.18802" />
                                        <Key frame="17" value="-5.18802" />
                                        <Key frame="18" value="-5.18802" />
                                        <Key frame="19" value="-5.18802" />
                                        <Key frame="20" value="-5.18802" />
                                        <Key frame="21" value="-5.18802" />
                                        <Key frame="22" value="-5.18802" />
                                        <Key frame="23" value="-5.18802" />
                                        <Key frame="24" value="-5.18802" />
                                        <Key frame="25" value="-5.18802" />
                                        <Key frame="26" value="-5.18802" />
                                        <Key frame="27" value="-5.18802" />
                                        <Key frame="28" value="-5.18802" />
                                        <Key frame="29" value="-5.18802" />
                                        <Key frame="30" value="-5.18802" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                                        <Key frame="3" value="-6.68218" />
                                        <Key frame="4" value="-6.68218" />
                                        <Key frame="5" value="-6.68218" />
                                        <Key frame="6" value="-6.68218" />
                                        <Key frame="7" value="-6.68218" />
                                        <Key frame="8" value="-6.68218" />
                                        <Key frame="9" value="-6.68218" />
                                        <Key frame="10" value="-6.68218" />
                                        <Key frame="11" value="-6.68218" />
                                        <Key frame="12" value="-6.68218" />
                                        <Key frame="13" value="-6.68218" />
                                        <Key frame="14" value="-6.68218" />
                                        <Key frame="15" value="-6.68218" />
                                        <Key frame="16" value="-6.68218" />
                                        <Key frame="17" value="-6.68218" />
                                        <Key frame="18" value="-6.68218" />
                                        <Key frame="19" value="-6.68218" />
                                        <Key frame="20" value="-6.68218" />
                                        <Key frame="21" value="-6.68218" />
                                        <Key frame="22" value="-6.68218" />
                                        <Key frame="23" value="-6.68218" />
                                        <Key frame="24" value="-6.68218" />
                                        <Key frame="25" value="-6.68218" />
                                        <Key frame="26" value="-6.68218" />
                                        <Key frame="27" value="-6.68218" />
                                        <Key frame="28" value="-6.68218" />
                                        <Key frame="29" value="-6.68218" />
                                        <Key frame="30" value="-6.68218" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                                        <Key frame="3" value="-7.64898" />
                                        <Key frame="4" value="-7.64898" />
                                        <Key frame="5" value="-7.64898" />
                                        <Key frame="6" value="-7.64898" />
                                        <Key frame="7" value="-7.64898" />
                                        <Key frame="8" value="-7.64898" />
                                        <Key frame="9" value="-7.64898" />
                                        <Key frame="10" value="-7.64898" />
                                        <Key frame="11" value="-7.64898" />
                                        <Key frame="12" value="-7.64898" />
                                        <Key frame="13" value="-7.64898" />
                                        <Key frame="14" value="-7.64898" />
                                        <Key frame="15" value="-7.64898" />
                                        <Key frame="16" value="-7.64898" />
                                        <Key frame="17" value="-7.64898" />
                                        <Key frame="18" value="-7.64898" />
                                        <Key frame="19" value="-7.64898" />
                                        <Key frame="20" value="-7.64898" />
                                        <Key frame="21" value="-7.64898" />
                                        <Key frame="22" value="-7.64898" />
                                        <Key frame="23" value="-7.64898" />
                                        <Key frame="24" value="-7.64898" />
                                        <Key frame="25" value="-7.64898" />
                                        <Key frame="26" value="-7.64898" />
                                        <Key frame="27" value="-7.64898" />
                                        <Key frame="28" value="-7.64898" />
                                        <Key frame="29" value="-7.64898" />
                                        <Key frame="30" value="-7.64898" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                                        <Key frame="3" value="57.5667" />
                                        <Key frame="4" value="57.5667" />
                                        <Key frame="5" value="57.5667" />
                                        <Key frame="6" value="57.5667" />
                                        <Key frame="7" value="57.5667" />
                                        <Key frame="8" value="57.5667" />
                                        <Key frame="9" value="57.5667" />
                                        <Key frame="10" value="57.5667" />
                                        <Key frame="11" value="57.5667" />
                                        <Key frame="12" value="57.5667" />
                                        <Key frame="13" value="57.5667" />
                                        <Key frame="14" value="57.5667" />
                                        <Key frame="15" value="57.5667" />
                                        <Key frame="16" value="57.5667" />
                                        <Key frame="17" value="57.5667" />
                                        <Key frame="18" value="57.5667" />
                                        <Key frame="19" value="57.5667" />
                                        <Key frame="20" value="57.5667" />
                                        <Key frame="21" value="57.5667" />
                                        <Key frame="22" value="57.5667" />
                                        <Key frame="23" value="57.5667" />
                                        <Key frame="24" value="57.5667" />
                                        <Key frame="25" value="57.5667" />
                                        <Key frame="26" value="57.5667" />
                                        <Key frame="27" value="57.5667" />
                                        <Key frame="28" value="57.5667" />
                                        <Key frame="29" value="57.5667" />
                                        <Key frame="30" value="57.5667" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                                        <Key frame="3" value="4.83644" />
                                        <Key frame="4" value="4.83644" />
                                        <Key frame="5" value="4.83644" />
                                        <Key frame="6" value="4.83644" />
                                        <Key frame="7" value="4.83644" />
                                        <Key frame="8" value="4.83644" />
                                        <Key frame="9" value="4.83644" />
                                        <Key frame="10" value="4.83644" />
                                        <Key frame="11" value="4.83644" />
                                        <Key frame="12" value="4.83644" />
                                        <Key frame="13" value="4.83644" />
                                        <Key frame="14" value="4.83644" />
                                        <Key frame="15" value="4.83644" />
                                        <Key frame="16" value="4.83644" />
                                        <Key frame="17" value="4.83644" />
                                        <Key frame="18" value="4.83644" />
                                        <Key frame="19" value="4.83644" />
                                        <Key frame="20" value="4.83644" />
                                        <Key frame="21" value="4.83644" />
                                        <Key frame="22" value="4.83644" />
                                        <Key frame="23" value="4.83644" />
                                        <Key frame="24" value="4.83644" />
                                        <Key frame="25" value="4.83644" />
                                        <Key frame="26" value="4.83644" />
                                        <Key frame="27" value="4.83644" />
                                        <Key frame="28" value="4.83644" />
                                        <Key frame="29" value="4.83644" />
                                        <Key frame="30" value="4.83644" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                                        <Key frame="3" value="6.41851" />
                                        <Key frame="4" value="6.41851" />
                                        <Key frame="5" value="6.41851" />
                                        <Key frame="6" value="6.41851" />
                                        <Key frame="7" value="6.41851" />
                                        <Key frame="8" value="6.41851" />
                                        <Key frame="9" value="6.41851" />
                                        <Key frame="10" value="6.41851" />
                                        <Key frame="11" value="6.41851" />
                                        <Key frame="12" value="6.41851" />
                                        <Key frame="13" value="6.41851" />
                                        <Key frame="14" value="6.41851" />
                                        <Key frame="15" value="6.41851" />
                                        <Key frame="16" value="6.41851" />
                                        <Key frame="17" value="6.41851" />
                                        <Key frame="18" value="6.41851" />
                                        <Key frame="19" value="6.41851" />
                                        <Key frame="20" value="6.41851" />
                                        <Key frame="21" value="6.41851" />
                                        <Key frame="22" value="6.41851" />
                                        <Key frame="23" value="6.41851" />
                                        <Key frame="24" value="6.41851" />
                                        <Key frame="25" value="6.41851" />
                                        <Key frame="26" value="6.41851" />
                                        <Key frame="27" value="6.41851" />
                                        <Key frame="28" value="6.41851" />
                                        <Key frame="29" value="6.41851" />
                                        <Key frame="30" value="6.41851" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                                        <Key frame="3" value="31.2919" />
                                        <Key frame="4" value="31.2919" />
                                        <Key frame="5" value="31.2919" />
                                        <Key frame="6" value="31.2919" />
                                        <Key frame="7" value="31.2919" />
                                        <Key frame="8" value="31.2919" />
                                        <Key frame="9" value="31.2919" />
                                        <Key frame="10" value="31.2919" />
                                        <Key frame="11" value="31.2919" />
                                        <Key frame="12" value="31.2919" />
                                        <Key frame="13" value="31.2919" />
                                        <Key frame="14" value="31.2919" />
                                        <Key frame="15" value="31.2919" />
                                        <Key frame="16" value="31.2919" />
                                        <Key frame="17" value="31.2919" />
                                        <Key frame="18" value="31.2919" />
                                        <Key frame="19" value="31.2919" />
                                        <Key frame="20" value="31.2919" />
                                        <Key frame="21" value="31.2919" />
                                        <Key frame="22" value="31.2919" />
                                        <Key frame="23" value="31.2919" />
                                        <Key frame="24" value="31.2919" />
                                        <Key frame="25" value="31.2919" />
                                        <Key frame="26" value="31.2919" />
                                        <Key frame="27" value="31.2919" />
                                        <Key frame="28" value="31.2919" />
                                        <Key frame="29" value="31.2919" />
                                        <Key frame="30" value="31.2919" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                                        <Key frame="3" value="65.2133" />
                                        <Key frame="4" value="65.2133" />
                                        <Key frame="5" value="65.2133" />
                                        <Key frame="6" value="65.2133" />
                                        <Key frame="7" value="65.2133" />
                                        <Key frame="8" value="65.2133" />
                                        <Key frame="9" value="65.2133" />
                                        <Key frame="10" value="65.2133" />
                                        <Key frame="11" value="65.2133" />
                                        <Key frame="12" value="65.2133" />
                                        <Key frame="13" value="65.2133" />
                                        <Key frame="14" value="65.2133" />
                                        <Key frame="15" value="65.2133" />
                                        <Key frame="16" value="65.2133" />
                                        <Key frame="17" value="65.2133" />
                                        <Key frame="18" value="65.2133" />
                                        <Key frame="19" value="65.2133" />
                                        <Key frame="20" value="65.2133" />
                                        <Key frame="21" value="65.2133" />
                                        <Key frame="22" value="65.2133" />
                                        <Key frame="23" value="65.2133" />
                                        <Key frame="24" value="65.2133" />
                                        <Key frame="25" value="65.2133" />
                                        <Key frame="26" value="65.2133" />
                                        <Key frame="27" value="65.2133" />
                                        <Key frame="28" value="65.2133" />
                                        <Key frame="29" value="65.2133" />
                                        <Key frame="30" value="65.2133" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                                        <Key frame="3" value="0.602" />
                                        <Key frame="4" value="0.602" />
                                        <Key frame="5" value="0.602" />
                                        <Key frame="6" value="0.602" />
                                        <Key frame="7" value="0.602" />
                                        <Key frame="8" value="0.602" />
                                        <Key frame="9" value="0.602" />
                                        <Key frame="10" value="0.602" />
                                        <Key frame="11" value="0.602" />
                                        <Key frame="12" value="0.602" />
                                        <Key frame="13" value="0.602" />
                                        <Key frame="14" value="0.602" />
                                        <Key frame="15" value="0.602" />
                                        <Key frame="16" value="0.602" />
                                        <Key frame="17" value="0.602" />
                                        <Key frame="18" value="0.602" />
                                        <Key frame="19" value="0.602" />
                                        <Key frame="20" value="0.602" />
                                        <Key frame="21" value="0.602" />
                                        <Key frame="22" value="0.602" />
                                        <Key frame="23" value="0.602" />
                                        <Key frame="24" value="0.602" />
                                        <Key frame="25" value="0.602" />
                                        <Key frame="26" value="0.602" />
                                        <Key frame="27" value="0.602" />
                                        <Key frame="28" value="0.602" />
                                        <Key frame="29" value="0.602" />
                                        <Key frame="30" value="0.602" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                                        <Key frame="3" value="7.02893" />
                                        <Key frame="4" value="7.02893" />
                                        <Key frame="5" value="7.02893" />
                                        <Key frame="6" value="7.02893" />
                                        <Key frame="7" value="7.02893" />
                                        <Key frame="8" value="7.02893" />
                                        <Key frame="9" value="7.02893" />
                                        <Key frame="10" value="7.02893" />
                                        <Key frame="11" value="7.02893" />
                                        <Key frame="12" value="7.02893" />
                                        <Key frame="13" value="7.02893" />
                                        <Key frame="14" value="7.02893" />
                                        <Key frame="15" value="7.02893" />
                                        <Key frame="16" value="7.02893" />
                                        <Key frame="17" value="7.02893" />
                                        <Key frame="18" value="7.02893" />
                                        <Key frame="19" value="7.02893" />
                                        <Key frame="20" value="7.02893" />
                                        <Key frame="21" value="7.02893" />
                                        <Key frame="22" value="7.02893" />
                                        <Key frame="23" value="7.02893" />
                                        <Key frame="24" value="7.02893" />
                                        <Key frame="25" value="7.02893" />
                                        <Key frame="26" value="7.02893" />
                                        <Key frame="27" value="7.02893" />
                                        <Key frame="28" value="7.02893" />
                                        <Key frame="29" value="7.02893" />
                                        <Key frame="30" value="7.02893" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                                        <Key frame="3" value="-6.76526" />
                                        <Key frame="4" value="-6.76526" />
                                        <Key frame="5" value="-6.76526" />
                                        <Key frame="6" value="-6.76526" />
                                        <Key frame="7" value="-6.76526" />
                                        <Key frame="8" value="-6.76526" />
                                        <Key frame="9" value="-6.76526" />
                                        <Key frame="10" value="-6.76526" />
                                        <Key frame="11" value="-6.76526" />
                                        <Key frame="12" value="-6.76526" />
                                        <Key frame="13" value="-6.76526" />
                                        <Key frame="14" value="-6.76526" />
                                        <Key frame="15" value="-6.76526" />
                                        <Key frame="16" value="-6.76526" />
                                        <Key frame="17" value="-6.76526" />
                                        <Key frame="18" value="-6.76526" />
                                        <Key frame="19" value="-6.76526" />
                                        <Key frame="20" value="-6.76526" />
                                        <Key frame="21" value="-6.76526" />
                                        <Key frame="22" value="-6.76526" />
                                        <Key frame="23" value="-6.76526" />
                                        <Key frame="24" value="-6.76526" />
                                        <Key frame="25" value="-6.76526" />
                                        <Key frame="26" value="-6.76526" />
                                        <Key frame="27" value="-6.76526" />
                                        <Key frame="28" value="-6.76526" />
                                        <Key frame="29" value="-6.76526" />
                                        <Key frame="30" value="-6.76526" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                                        <Key frame="3" value="-10.0173" />
                                        <Key frame="4" value="-10.0173" />
                                        <Key frame="5" value="-10.0173" />
                                        <Key frame="6" value="-10.0173" />
                                        <Key frame="7" value="-10.0173" />
                                        <Key frame="8" value="-10.0173" />
                                        <Key frame="9" value="-10.0173" />
                                        <Key frame="10" value="-10.0173" />
                                        <Key frame="11" value="-10.0173" />
                                        <Key frame="12" value="-10.0173" />
                                        <Key frame="13" value="-10.0173" />
                                        <Key frame="14" value="-10.0173" />
                                        <Key frame="15" value="-10.0173" />
                                        <Key frame="16" value="-10.0173" />
                                        <Key frame="17" value="-10.0173" />
                                        <Key frame="18" value="-10.0173" />
                                        <Key frame="19" value="-10.0173" />
                                        <Key frame="20" value="-10.0173" />
                                        <Key frame="21" value="-10.0173" />
                                        <Key frame="22" value="-10.0173" />
                                        <Key frame="23" value="-10.0173" />
                                        <Key frame="24" value="-10.0173" />
                                        <Key frame="25" value="-10.0173" />
                                        <Key frame="26" value="-10.0173" />
                                        <Key frame="27" value="-10.0173" />
                                        <Key frame="28" value="-10.0173" />
                                        <Key frame="29" value="-10.0173" />
                                        <Key frame="30" value="-10.0173" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                                        <Key frame="3" value="-5.71056" />
                                        <Key frame="4" value="-5.71056" />
                                        <Key frame="5" value="-5.71056" />
                                        <Key frame="6" value="-5.71056" />
                                        <Key frame="7" value="-5.71056" />
                                        <Key frame="8" value="-5.71056" />
                                        <Key frame="9" value="-5.71056" />
                                        <Key frame="10" value="-5.71056" />
                                        <Key frame="11" value="-5.71056" />
                                        <Key frame="12" value="-5.71056" />
                                        <Key frame="13" value="-5.71056" />
                                        <Key frame="14" value="-5.71056" />
                                        <Key frame="15" value="-5.71056" />
                                        <Key frame="16" value="-5.71056" />
                                        <Key frame="17" value="-5.71056" />
                                        <Key frame="18" value="-5.71056" />
                                        <Key frame="19" value="-5.71056" />
                                        <Key frame="20" value="-5.71056" />
                                        <Key frame="21" value="-5.71056" />
                                        <Key frame="22" value="-5.71056" />
                                        <Key frame="23" value="-5.71056" />
                                        <Key frame="24" value="-5.71056" />
                                        <Key frame="25" value="-5.71056" />
                                        <Key frame="26" value="-5.71056" />
                                        <Key frame="27" value="-5.71056" />
                                        <Key frame="28" value="-5.71056" />
                                        <Key frame="29" value="-5.71056" />
                                        <Key frame="30" value="-5.71056" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                                        <Key frame="3" value="1.40867" />
                                        <Key frame="4" value="1.40867" />
                                        <Key frame="5" value="1.40867" />
                                        <Key frame="6" value="1.40867" />
                                        <Key frame="7" value="1.40867" />
                                        <Key frame="8" value="1.40867" />
                                        <Key frame="9" value="1.40867" />
                                        <Key frame="10" value="1.40867" />
                                        <Key frame="11" value="1.40867" />
                                        <Key frame="12" value="1.40867" />
                                        <Key frame="13" value="1.40867" />
                                        <Key frame="14" value="1.40867" />
                                        <Key frame="15" value="1.40867" />
                                        <Key frame="16" value="1.40867" />
                                        <Key frame="17" value="1.40867" />
                                        <Key frame="18" value="1.40867" />
                                        <Key frame="19" value="1.40867" />
                                        <Key frame="20" value="1.40867" />
                                        <Key frame="21" value="1.40867" />
                                        <Key frame="22" value="1.40867" />
                                        <Key frame="23" value="1.40867" />
                                        <Key frame="24" value="1.40867" />
                                        <Key frame="25" value="1.40867" />
                                        <Key frame="26" value="1.40867" />
                                        <Key frame="27" value="1.40867" />
                                        <Key frame="28" value="1.40867" />
                                        <Key frame="29" value="1.40867" />
                                        <Key frame="30" value="1.40867" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                                        <Key frame="3" value="-5.97904" />
                                        <Key frame="4" value="-5.97904" />
                                        <Key frame="5" value="-5.97904" />
                                        <Key frame="6" value="-5.97904" />
                                        <Key frame="7" value="-5.97904" />
                                        <Key frame="8" value="-5.97904" />
                                        <Key frame="9" value="-5.97904" />
                                        <Key frame="10" value="-5.97904" />
                                        <Key frame="11" value="-5.97904" />
                                        <Key frame="12" value="-5.97904" />
                                        <Key frame="13" value="-5.97904" />
                                        <Key frame="14" value="-5.97904" />
                                        <Key frame="15" value="-5.97904" />
                                        <Key frame="16" value="-5.97904" />
                                        <Key frame="17" value="-5.97904" />
                                        <Key frame="18" value="-5.97904" />
                                        <Key frame="19" value="-5.97904" />
                                        <Key frame="20" value="-5.97904" />
                                        <Key frame="21" value="-5.97904" />
                                        <Key frame="22" value="-5.97904" />
                                        <Key frame="23" value="-5.97904" />
                                        <Key frame="24" value="-5.97904" />
                                        <Key frame="25" value="-5.97904" />
                                        <Key frame="26" value="-5.97904" />
                                        <Key frame="27" value="-5.97904" />
                                        <Key frame="28" value="-5.97904" />
                                        <Key frame="29" value="-5.97904" />
                                        <Key frame="30" value="-5.97904" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                                        <Key frame="3" value="-68.4701" />
                                        <Key frame="4" value="-68.4701" />
                                        <Key frame="5" value="-68.4701" />
                                        <Key frame="6" value="-68.4701" />
                                        <Key frame="7" value="-68.4701" />
                                        <Key frame="8" value="-68.4701" />
                                        <Key frame="9" value="-68.4701" />
                                        <Key frame="10" value="-68.4701" />
                                        <Key frame="11" value="-68.4701" />
                                        <Key frame="12" value="-68.4701" />
                                        <Key frame="13" value="-68.4701" />
                                        <Key frame="14" value="-68.4701" />
                                        <Key frame="15" value="-68.4701" />
                                        <Key frame="16" value="-68.4701" />
                                        <Key frame="17" value="-68.4701" />
                                        <Key frame="18" value="-68.4701" />
                                        <Key frame="19" value="-68.4701" />
                                        <Key frame="20" value="-68.4701" />
                                        <Key frame="21" value="-68.4701" />
                                        <Key frame="22" value="-68.4701" />
                                        <Key frame="23" value="-68.4701" />
                                        <Key frame="24" value="-68.4701" />
                                        <Key frame="25" value="-68.4701" />
                                        <Key frame="26" value="-68.4701" />
                                        <Key frame="27" value="-68.4701" />
                                        <Key frame="28" value="-68.4701" />
                                        <Key frame="29" value="-68.4701" />
                                        <Key frame="30" value="-68.4701" />
                                      </ActuatorCurve>
                                    </ActuatorList>
                                  </Timeline>
                                </Box>
                                <Box name="Play Sound" id="3" localization="8" tooltip="Play a sound file. Select the file in parameters. The format of the file can be wav or ogg (on virtual robot) and also mp3 (on a real robot).&#x0A;&#x0A;Note: There can be some delay to play ogg or mp3 (on a robot) files. We advise you to use wav if&#x0A;you want a fast play of the file." x="363" y="388">
                                  <bitmap>media/images/box/interaction/play_music.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Starts the music." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops the music." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                  <Parameter name="File name" inherits_from_parent="0" content_type="4" value="/../Horror Scary Undead Moan Brains 01.wav" default_value="" tooltip="Name of the file you want to play.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="5" />
                                  <Parameter name="Begin position (s)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="6" />
                                  <Parameter name="Volume (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="7" />
                                  <Parameter name="Balance L/R" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="8" />
                                  <Parameter name="Play in loop" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="9" />
                                  <Timeline enable="0">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                          <Box name="Play Sound File" id="2" localization="8" tooltip="Play the sound." x="442" y="70">
                                            <bitmap>media/images/box/interaction/play_music.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.player = self.session().service('ALAudioPlayer')
        self.playerStop = self.session().service('ALAudioPlayer') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.playerStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            if (self.getParameter("Play in loop")) :
               id = self.player.pCall("playFileInLoop",p,self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            else :
               id = self.player.pCall("playFileFromPosition",p,self.getParameter("Begin position (s)"),self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            self.ids.append(id)
            self.player.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Begin position (s)" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="5" />
                                            <Parameter name="Volume (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="6" />
                                            <Parameter name="Balance L/R" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="7" />
                                            <Parameter name="Play in loop" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="8" />
                                          </Box>
                                          <Box name="Get Attached File" id="1" localization="8" tooltip="Use this box to choose an attached file in its parameters. The filename will be sent on&#x0A;the output when the input is stimulated." x="216" y="71">
                                            <bitmap>media/images/box/folder.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        pass

    def onInput_onStart(self):
        self.onStopped(self.behaviorAbsolutePath() + self.getParameter("File name"))]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the filepath on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The filepath of the selected resource file." id="3" />
                                            <Parameter name="File name" inherits_from_parent="1" content_type="4" value="" default_value="" tooltip="Name of the file which is going to be sent on the box output.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="4" />
                                          </Box>
                                          <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                          <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                          <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                  </Timeline>
                                  <Resource name="Audio player" type="Lock" timeout="0" />
                                </Box>
                                <Box name="Play Sound (1)" id="4" localization="8" tooltip="Play a sound file. Select the file in parameters. The format of the file can be wav or ogg (on virtual robot) and also mp3 (on a real robot).&#x0A;&#x0A;Note: There can be some delay to play ogg or mp3 (on a robot) files. We advise you to use wav if&#x0A;you want a fast play of the file." x="567" y="440">
                                  <bitmap>media/images/box/interaction/play_music.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Starts the music." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops the music." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                  <Parameter name="File name" inherits_from_parent="0" content_type="4" value="/../Horror Scary Undead Moan Brains 01.wav" default_value="" tooltip="Name of the file you want to play.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="5" />
                                  <Parameter name="Begin position (s)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="6" />
                                  <Parameter name="Volume (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="7" />
                                  <Parameter name="Balance L/R" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="8" />
                                  <Parameter name="Play in loop" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="9" />
                                  <Timeline enable="0">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                          <Box name="Play Sound File" id="2" localization="8" tooltip="Play the sound." x="442" y="70">
                                            <bitmap>media/images/box/interaction/play_music.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.player = self.session().service('ALAudioPlayer')
        self.playerStop = self.session().service('ALAudioPlayer') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.playerStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            if (self.getParameter("Play in loop")) :
               id = self.player.pCall("playFileInLoop",p,self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            else :
               id = self.player.pCall("playFileFromPosition",p,self.getParameter("Begin position (s)"),self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            self.ids.append(id)
            self.player.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Begin position (s)" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="5" />
                                            <Parameter name="Volume (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="6" />
                                            <Parameter name="Balance L/R" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="7" />
                                            <Parameter name="Play in loop" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="8" />
                                          </Box>
                                          <Box name="Get Attached File" id="1" localization="8" tooltip="Use this box to choose an attached file in its parameters. The filename will be sent on&#x0A;the output when the input is stimulated." x="216" y="71">
                                            <bitmap>media/images/box/folder.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        pass

    def onInput_onStart(self):
        self.onStopped(self.behaviorAbsolutePath() + self.getParameter("File name"))]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the filepath on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The filepath of the selected resource file." id="3" />
                                            <Parameter name="File name" inherits_from_parent="1" content_type="4" value="" default_value="" tooltip="Name of the file which is going to be sent on the box output.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="4" />
                                          </Box>
                                          <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                          <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                          <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                  </Timeline>
                                  <Resource name="Audio player" type="Lock" timeout="0" />
                                </Box>
                                <Box name="Guessing" id="15" localization="8" tooltip="" x="1187" y="211">
                                  <bitmap>media/images/box/box-diagram.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Input name="InitialGuess" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                  <Timeline enable="0">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                          <Box name="Counter" id="11" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="682" y="493">
                                            <bitmap>media/images/box/loop.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.onInput_onInit()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()
        self.onReinitialized()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                            <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                            <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                            <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                            <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                            <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                            <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="5" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                          </Box>
                                          <Box name="Switch Case" id="13" localization="8" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." plugin="dispatcher_plugin" x="904" y="323">
                                            <bitmap>media/images/box/interaction/choice.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
		  GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
		  GeneratedClass.__init__( self )

	def onInput_onStart(self, p):
		p = self.typeConversion(p)
		if(p == self.typeConversion(0)):
			self.output_1(p)
		elif(p == self.typeConversion(1)):
			self.output_2(p)
		elif(p == self.typeConversion(2)):
			self.output_3(p)
		else:
			self.onDefault()

	def typeConversion(self, p):
		try:
			p = float(p)
			pint = int(p)
			if( p == pint ):
				p = pint
		except:
			p = str(p)
		return p]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <keywords>
                                                <keyword>0</keyword>
                                                <keyword>1</keyword>
                                                <keyword>2</keyword>
                                                <keyword></keyword>
                                              </keywords>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" />
                                            <Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" />
                                            <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
                                            <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
                                            <Output name="output_3" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" />
                                          </Box>
                                          <Box name="Animated Say" id="14" localization="8" tooltip="Say some text with animations. The text can be localized." x="555" y="341">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="95" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Parameter name="Text" inherits_from_parent="0" content_type="5" value="not quite" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                                            <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                                              <Choice value="disabled" />
                                              <Choice value="random" />
                                              <Choice value="contextual" />
                                            </Parameter>
                                            <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Animated Say (1)" id="12" localization="8" tooltip="Say some text with animations. The text can be localized." x="1638" y="361">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Parameter name="Text" inherits_from_parent="0" content_type="5" value="" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                                            <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                                              <Choice value="disabled" />
                                              <Choice value="random" />
                                              <Choice value="contextual" />
                                            </Parameter>
                                            <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Tactile Head" id="6" localization="8" tooltip="Detect touch on head tactile sensor." x="1021" y="673">
                                            <bitmap>media/images/box/sensors/tactileHead.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
            self.onStopped() #~ activate output of the box
        pass]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Input name="FrontTactilTouched" type="0" type_size="1" nature="4" stm_value_name="FrontTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" />
                                            <Input name="MiddleTactilTouched" type="0" type_size="1" nature="4" stm_value_name="MiddleTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="5" />
                                            <Input name="RearTactilTouched" type="0" type_size="1" nature="4" stm_value_name="RearTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="6" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="7" />
                                            <Output name="frontTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The front tactile head sensor was touched." id="8" />
                                            <Output name="middleTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The middle tactile head sensor was touched." id="9" />
                                            <Output name="rearTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The rear tactile head sensor was touched." id="10" />
                                            <Timeline enable="0">
                                              <BehaviorLayer name="behavior_layer1">
                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                  <Diagram>
                                                    <Box name="If &gt; 0" id="1" localization="8" tooltip="Transmit only if value is &gt; 0." x="260" y="17">
                                                      <bitmap>media/images/box/box-diagram.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                    </Box>
                                                    <Box name="If &gt; 0" id="2" localization="8" tooltip="Transmit only if value is &gt; 0." x="256" y="119">
                                                      <bitmap>media/images/box/box-diagram.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                    </Box>
                                                    <Box name="If &gt; 0" id="3" localization="8" tooltip="Transmit only if value is &gt; 0." x="261" y="223">
                                                      <bitmap>media/images/box/box-diagram.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                    </Box>
                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                    <Link inputowner="0" indexofinput="8" outputowner="1" indexofoutput="4" />
                                                    <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="5" />
                                                    <Link inputowner="0" indexofinput="9" outputowner="2" indexofoutput="4" />
                                                    <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="6" />
                                                    <Link inputowner="0" indexofinput="10" outputowner="3" indexofoutput="4" />
                                                  </Diagram>
                                                </BehaviorKeyframe>
                                              </BehaviorLayer>
                                            </Timeline>
                                            <Resource name="Head-sequence" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Animated Say (2)" id="5" localization="8" tooltip="Say some text with animations. The text can be localized." x="1075" y="858">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Parameter name="Text" inherits_from_parent="0" content_type="5" value="If you think it was a college student on a monday, touch the front of my head. If you think it is a zombie apocalypse, press the middle of my head, if you think its jake from state farm, press the back of my head" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                                            <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                                              <Choice value="disabled" />
                                              <Choice value="random" />
                                              <Choice value="contextual" />
                                            </Parameter>
                                            <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Animated Say (3)" id="8" localization="8" tooltip="Say some text with animations. The text can be localized." x="1633" y="621">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Congrats! You guessed it right" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                                            <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                                              <Choice value="disabled" />
                                              <Choice value="random" />
                                              <Choice value="contextual" />
                                            </Parameter>
                                            <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Link inputowner="13" indexofinput="2" outputowner="11" indexofoutput="4" />
                                          <Link inputowner="11" indexofinput="2" outputowner="14" indexofoutput="4" />
                                          <Link inputowner="11" indexofinput="3" outputowner="0" indexofoutput="2" />
                                          <Link inputowner="12" indexofinput="2" outputowner="13" indexofoutput="6" />
                                          <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="4" />
                                          <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="4" />
                                          <Link inputowner="6" indexofinput="2" outputowner="13" indexofoutput="4" />
                                          <Link inputowner="5" indexofinput="2" outputowner="13" indexofoutput="4" />
                                          <Link inputowner="6" indexofinput="2" outputowner="13" indexofoutput="5" />
                                          <Link inputowner="5" indexofinput="2" outputowner="13" indexofoutput="5" />
                                          <Link inputowner="0" indexofinput="5" outputowner="8" indexofoutput="4" />
                                          <Link inputowner="0" indexofinput="5" outputowner="12" indexofoutput="4" />
                                          <Link inputowner="8" indexofinput="2" outputowner="6" indexofoutput="9" />
                                          <Link inputowner="14" indexofinput="2" outputowner="6" indexofoutput="8" />
                                          <Link inputowner="14" indexofinput="2" outputowner="6" indexofoutput="10" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                  </Timeline>
                                </Box>
                                <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="4" />
                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="2" indexofinput="3" outputowner="4" indexofoutput="4" />
                                <Link inputowner="1" indexofinput="2" outputowner="1" indexofoutput="3" />
                                <Link inputowner="15" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="0" indexofinput="4" outputowner="15" indexofoutput="5" />
                                <Link inputowner="15" indexofinput="4" outputowner="2" indexofoutput="4" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                        </Timeline>
                      </Box>
                      <Box name="Meditation/yoga" id="5" localization="8" tooltip="" x="698" y="145">
                        <bitmap>media/images/box/box-diagram.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="0">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram>
                                <Box name="Tai Chi Chuan" id="2" localization="8" tooltip="Tai Chi Chuan dance." x="300" y="96">
                                  <bitmap>media/images/box/movement/dance.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Timeline enable="1" fps="5" start_frame="1" end_frame="-1" size="250">
                                    <BehaviorLayer name="LED">
                                      <BehaviorKeyframe name="keyframe15" index="15">
                                        <Diagram>
                                          <Box name="Light_ConcentratedEyes" id="1" localization="8" tooltip="Set an animated gaze which expresses concentration." x="231" y="105">
                                            <bitmap>media/images/box/interaction/LED.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
  def __init__(self):
    GeneratedClass.__init__(self, False)

  def onLoad(self):
    self.bIsRunning = False;
    self.leds = self.session().service("ALLeds")

  def onUnload(self):
    self.onInput_onStop(); # will stop current loop execution

  def onInput_onStart(self):
    #self.log( self.getName() + ": start - begin" );

    if( self.bIsRunning ):
      #print( self.getName() + ": already started => nothing" );
      return;

    self.bIsRunning = True;
    self.bMustStop = False;

    rDuration = 1.0;
    self.leds.fadeRGB( "FaceLedsTop", 0x0000ff, rDuration, _async=True );
    self.leds.fadeRGB( "FaceLedsInternal", 0x00ff00, rDuration, _async=True );
    self.leds.fadeRGB( "FaceLedsBottom", 0x0000ff, rDuration, _async=True );
    self.leds.fadeRGB( "FaceLedsExternal", 0x0000ff, rDuration );

    while( not self.bMustStop ):
      rTime=1.0
      self.leds.fadeRGB( "FaceLedsInternal", 0x000000, rTime );
      if( self.bMustStop ):
        break;
      self.leds.fadeRGB( "FaceLedsInternal", 0x00ff00, rDuration );


    # end while
    self.bIsRunning = False;
    self.onStopped();

  def onInput_onStop(self):
    self.bMustStop = True; # will stop current loop execution]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                          </Box>
                                          <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                    <BehaviorLayer name="music">
                                      <BehaviorKeyframe name="keyframe12" index="12">
                                        <Diagram>
                                          <Box name="Play Sound" id="2" localization="8" tooltip="Play a sound file. Select the file in parameters. The format of the file can be&#x0A;wav, mp3, or ogg.&#x0A;&#x0A;Note: There can be some delay to play mp3 files. We advise you to use wav if&#x0A;you want a fast play of the file." x="115" y="51">
                                            <bitmap>media/images/box/interaction/play_music.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Starts the music." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops the music." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                            <Parameter name="File name" inherits_from_parent="0" content_type="4" value="/swiftswords_ext.mp3" default_value="" tooltip="Name of the file you want to play.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="5" />
                                            <Parameter name="Begin position (s)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="6" />
                                            <Parameter name="Volume (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="7" />
                                            <Parameter name="Balance L/R" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="8" />
                                            <Parameter name="Play in loop" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="9" />
                                            <Timeline enable="0">
                                              <BehaviorLayer name="behavior_layer1">
                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                  <Diagram>
                                                    <Box name="Play Sound File" id="2" localization="8" tooltip="Play the sound." x="442" y="70">
                                                      <bitmap>media/images/box/interaction/play_music.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.player = self.session().service('ALAudioPlayer')
        self.playerStop = self.session().service('ALAudioPlayer') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.playerStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            if (self.getParameter("Play in loop")) :
               id = self.player.pCall("playFileInLoop",p,self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            else :
               id = self.player.pCall("playFileFromPosition",p,self.getParameter("Begin position (s)"),self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            self.ids.append(id)
            self.player.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                      <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                      <Parameter name="Begin position (s)" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="5" />
                                                      <Parameter name="Volume (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="6" />
                                                      <Parameter name="Balance L/R" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="7" />
                                                      <Parameter name="Play in loop" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="8" />
                                                    </Box>
                                                    <Box name="Get Attached File" id="1" localization="8" tooltip="Use this box to choose an attached file in its parameters. The filename will be sent on&#x0A;the output when the input is stimulated." x="216" y="71">
                                                      <bitmap>media/images/box/folder.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        pass

    def onInput_onStart(self):
        self.onStopped(self.behaviorAbsolutePath() + self.getParameter("File name"))]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the filepath on the output." id="2" />
                                                      <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The filepath of the selected resource file." id="3" />
                                                      <Parameter name="File name" inherits_from_parent="1" content_type="4" value="" default_value="" tooltip="Name of the file which is going to be sent on the box output.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="4" />
                                                    </Box>
                                                    <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                  </Diagram>
                                                </BehaviorKeyframe>
                                              </BehaviorLayer>
                                            </Timeline>
                                          </Box>
                                          <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="1" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                    <BehaviorLayer name="init_stand">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                          <Box name="Stop" id="1" localization="8" tooltip="Stop the parent timeline at the current frame index.&#x0A;&#x0A;!!Warning!! This box does not stop the behavior! It is only the timeline which will&#x0A;stop playing, the keyframes and boxes will still be running." x="286" y="23">
                                            <bitmap>media/images/box/box-timeLine.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onInput_onStop(self):
        self.getParentTimeline().pause()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStop" type="1" type_size="1" nature="1" inner="0" tooltip="Parent timeline stops when a signal is received on this input." id="2" />
                                          </Box>
                                          <Box name="Stand Up" id="2" localization="8" tooltip="The robot tries to stand up from any position for a number of tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." x="292" y="136">
                                            <bitmap>media/images/box/movement/stand.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated when the robot succeed in standing up." id="4" />
                                            <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot failed to stand up after n tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." id="5" />
                                            <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of stand up before stimulating the failure output." id="6" />
                                            <Timeline enable="0">
                                              <BehaviorLayer name="StandUpBehavior">
                                                <BehaviorKeyframe name="DetectRobotPose" index="1">
                                                  <Diagram>
                                                    <Box name="Goto Posture" id="2" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="331" y="92">
                                                      <bitmap>media/images/box/box-diagram.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureService = self.session().service("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureService.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureService.setMaxTryNumber(self.nTries)

        result = self.postureService.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                                      <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                                      <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                                        <Choice value="Crouch" />
                                                        <Choice value="LyingBack" />
                                                        <Choice value="LyingBelly" />
                                                        <Choice value="Sit" />
                                                        <Choice value="SitRelax" />
                                                        <Choice value="StandInit" />
                                                        <Choice value="Stand" />
                                                        <Choice value="StandZero" />
                                                      </Parameter>
                                                      <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                                                      <Parameter name="Maximum of tries" inherits_from_parent="1" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" />
                                                      <Resource name="All motors" type="Lock" timeout="0" />
                                                      <Resource name="Stiffness" type="Lock" timeout="0" />
                                                    </Box>
                                                    <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                    <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                    <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="5" />
                                                  </Diagram>
                                                </BehaviorKeyframe>
                                              </BehaviorLayer>
                                            </Timeline>
                                            <Resource name="All motors" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Play" id="3" localization="8" tooltip="Play the parent timeline from the current frame index. Do not do anything if the&#x0A;timeline is already playing." x="513" y="24">
                                            <bitmap>media/images/box/box-timeLine.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onInput_onPlay(self):
        self.getParentTimeline().play()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onPlay" type="1" type_size="1" nature="1" inner="0" tooltip="Parent timeline starts when a signal is received on this input." id="2" />
                                          </Box>
                                          <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                          <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="1" />
                                          <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="5" />
                                          <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="4" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                    <ActuatorList model="">
                                      <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                                        <Key frame="15" value="0" />
                                        <Key frame="25" value="4.82967e-06" />
                                        <Key frame="35" value="4.82968e-06" />
                                        <Key frame="45" value="4.82968e-06" />
                                        <Key frame="55" value="-2.73208e-05" />
                                        <Key frame="65" value="18" />
                                        <Key frame="75" value="-17" />
                                        <Key frame="85" value="-68" />
                                        <Key frame="95" value="-16" />
                                        <Key frame="105" value="12" />
                                        <Key frame="118" value="90" />
                                        <Key frame="131" value="12" />
                                        <Key frame="142" value="8" />
                                        <Key frame="152" value="0" />
                                        <Key frame="162" value="-8" />
                                        <Key frame="172" value="16" />
                                        <Key frame="185" value="-12" />
                                        <Key frame="198" value="-90" />
                                        <Key frame="211" value="-12" />
                                        <Key frame="222" value="-8" />
                                        <Key frame="231" value="0" />
                                        <Key frame="250" value="-0.178186" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                                        <Key frame="15" value="0" />
                                        <Key frame="25" value="5.12931e-06" />
                                        <Key frame="35" value="-2.73208e-05" />
                                        <Key frame="45" value="5.0962e-06" />
                                        <Key frame="55" value="6.01466e-06" />
                                        <Key frame="65" value="19" />
                                        <Key frame="75" value="18" />
                                        <Key frame="85" value="5.26559e-06" />
                                        <Key frame="95" value="-19" />
                                        <Key frame="105" value="8" />
                                        <Key frame="118" value="-5" />
                                        <Key frame="131" value="8" />
                                        <Key frame="142" value="22" />
                                        <Key frame="152" value="32" />
                                        <Key frame="162" value="22" />
                                        <Key frame="172" value="-19" />
                                        <Key frame="185" value="8" />
                                        <Key frame="198" value="-5" />
                                        <Key frame="211" value="8" />
                                        <Key frame="222" value="22" />
                                        <Key frame="231" value="0" />
                                        <Key frame="250" value="-10.901" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                                        <Key frame="15" value="90" />
                                        <Key frame="25" value="110" />
                                        <Key frame="35" value="120" />
                                        <Key frame="45" value="90" />
                                        <Key frame="55" value="0" />
                                        <Key frame="65" value="21" />
                                        <Key frame="75" value="20" />
                                        <Key frame="85" value="11" />
                                        <Key frame="95" value="-46" />
                                        <Key frame="105" value="-10" />
                                        <Key frame="118" value="-17" />
                                        <Key frame="131" value="-10" />
                                        <Key frame="142" value="30" />
                                        <Key frame="152" value="27" />
                                        <Key frame="162" value="19" />
                                        <Key frame="172" value="-27" />
                                        <Key frame="185" value="4" />
                                        <Key frame="198" value="-4" />
                                        <Key frame="211" value="4" />
                                        <Key frame="222" value="19" />
                                        <Key frame="231" value="97" />
                                        <Key frame="250" value="87.6256" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                                        <Key frame="15" value="10" />
                                        <Key frame="25" value="20" />
                                        <Key frame="35" value="10" />
                                        <Key frame="45" value="10" />
                                        <Key frame="55" value="10" />
                                        <Key frame="65" value="40" />
                                        <Key frame="75" value="0" />
                                        <Key frame="85" value="5" />
                                        <Key frame="95" value="10" />
                                        <Key frame="105" value="23" />
                                        <Key frame="118" value="66" />
                                        <Key frame="131" value="23" />
                                        <Key frame="142" value="23" />
                                        <Key frame="152" value="10" />
                                        <Key frame="162" value="0" />
                                        <Key frame="172" value="23" />
                                        <Key frame="185" value="0" />
                                        <Key frame="198" value="0" />
                                        <Key frame="211" value="0" />
                                        <Key frame="222" value="12" />
                                        <Key frame="231" value="54" />
                                        <Key frame="250" value="6.15001" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                                        <Key frame="15" value="-90" />
                                        <Key frame="25" value="-90" />
                                        <Key frame="35" value="-90" />
                                        <Key frame="45" value="-90" />
                                        <Key frame="55" value="-90" />
                                        <Key frame="65" value="-22" />
                                        <Key frame="75" value="0" />
                                        <Key frame="85" value="0" />
                                        <Key frame="95" value="0" />
                                        <Key frame="105" value="0" />
                                        <Key frame="118" value="0" />
                                        <Key frame="131" value="0" />
                                        <Key frame="142" value="0" />
                                        <Key frame="152" value="12" />
                                        <Key frame="162" value="11" />
                                        <Key frame="172" value="-24" />
                                        <Key frame="185" value="-24" />
                                        <Key frame="198" value="-5" />
                                        <Key frame="211" value="-24" />
                                        <Key frame="222" value="11" />
                                        <Key frame="227" value="-21.7" />
                                        <Key frame="231" value="-14" />
                                        <Key frame="250" value="-67.7669" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                                        <Key frame="15" value="0" />
                                        <Key frame="25" value="-40" />
                                        <Key frame="35" value="-60" />
                                        <Key frame="45" value="0" />
                                        <Key frame="55" value="0" />
                                        <Key frame="65" value="-95" />
                                        <Key frame="75" value="-55" />
                                        <Key frame="85" value="-85" />
                                        <Key frame="95" value="-58" />
                                        <Key frame="105" value="-58" />
                                        <Key frame="118" value="0" />
                                        <Key frame="131" value="-58" />
                                        <Key frame="142" value="-58" />
                                        <Key frame="152" value="-51" />
                                        <Key frame="162" value="-49" />
                                        <Key frame="172" value="-64" />
                                        <Key frame="185" value="-49" />
                                        <Key frame="198" value="-72" />
                                        <Key frame="211" value="-49" />
                                        <Key frame="222" value="-49" />
                                        <Key frame="227" value="-57" />
                                        <Key frame="231" value="-81.4" />
                                        <Key frame="250" value="-22.2342" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                                        <Key frame="15" value="-88" />
                                        <Key frame="250" value="7.99575" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                                        <Key frame="15" value="0" />
                                        <Key frame="250" value="0.2984" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                                        <Key frame="15" value="90" />
                                        <Key frame="25" value="110" />
                                        <Key frame="35" value="120" />
                                        <Key frame="45" value="90" />
                                        <Key frame="55" value="0" />
                                        <Key frame="65" value="10" />
                                        <Key frame="75" value="35" />
                                        <Key frame="85" value="60" />
                                        <Key frame="95" value="-27" />
                                        <Key frame="105" value="4" />
                                        <Key frame="118" value="-4" />
                                        <Key frame="131" value="4" />
                                        <Key frame="142" value="19" />
                                        <Key frame="152" value="27" />
                                        <Key frame="162" value="30" />
                                        <Key frame="172" value="-46" />
                                        <Key frame="185" value="-10" />
                                        <Key frame="198" value="-17" />
                                        <Key frame="211" value="-10" />
                                        <Key frame="222" value="30" />
                                        <Key frame="231" value="97" />
                                        <Key frame="250" value="86.8394" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                                        <Key frame="15" value="-10" />
                                        <Key frame="25" value="-10" />
                                        <Key frame="35" value="-20" />
                                        <Key frame="45" value="-10" />
                                        <Key frame="55" value="-9.99896" />
                                        <Key frame="65" value="-4" />
                                        <Key frame="75" value="-48" />
                                        <Key frame="85" value="-87" />
                                        <Key frame="95" value="-23" />
                                        <Key frame="105" value="0" />
                                        <Key frame="118" value="0" />
                                        <Key frame="131" value="0" />
                                        <Key frame="142" value="0" />
                                        <Key frame="152" value="-10" />
                                        <Key frame="162" value="-23" />
                                        <Key frame="172" value="-10" />
                                        <Key frame="185" value="-23" />
                                        <Key frame="198" value="-66" />
                                        <Key frame="211" value="-23" />
                                        <Key frame="222" value="-32" />
                                        <Key frame="231" value="-54" />
                                        <Key frame="250" value="-5.71537" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                                        <Key frame="15" value="90" />
                                        <Key frame="25" value="90" />
                                        <Key frame="35" value="90" />
                                        <Key frame="45" value="90" />
                                        <Key frame="55" value="90" />
                                        <Key frame="65" value="11" />
                                        <Key frame="75" value="20" />
                                        <Key frame="85" value="90" />
                                        <Key frame="95" value="24" />
                                        <Key frame="105" value="24" />
                                        <Key frame="118" value="5" />
                                        <Key frame="131" value="24" />
                                        <Key frame="142" value="-11" />
                                        <Key frame="152" value="-12" />
                                        <Key frame="162" value="0" />
                                        <Key frame="172" value="0" />
                                        <Key frame="185" value="0" />
                                        <Key frame="198" value="0" />
                                        <Key frame="211" value="0" />
                                        <Key frame="222" value="0" />
                                        <Key frame="227" value="19.6" />
                                        <Key frame="231" value="14" />
                                        <Key frame="250" value="66.4437" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                                        <Key frame="15" value="0" />
                                        <Key frame="25" value="40" />
                                        <Key frame="35" value="60" />
                                        <Key frame="45" value="1.47493e-05" />
                                        <Key frame="55" value="0" />
                                        <Key frame="65" value="71" />
                                        <Key frame="75" value="94" />
                                        <Key frame="85" value="4" />
                                        <Key frame="95" value="64" />
                                        <Key frame="105" value="49" />
                                        <Key frame="118" value="72" />
                                        <Key frame="131" value="49" />
                                        <Key frame="142" value="49" />
                                        <Key frame="152" value="51" />
                                        <Key frame="162" value="58" />
                                        <Key frame="172" value="58" />
                                        <Key frame="185" value="58" />
                                        <Key frame="198" value="2" />
                                        <Key frame="211" value="58" />
                                        <Key frame="222" value="58" />
                                        <Key frame="227" value="64.9" />
                                        <Key frame="231" value="78.3" />
                                        <Key frame="250" value="22.6785" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                                        <Key frame="15" value="88" />
                                        <Key frame="250" value="9.40201" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                                        <Key frame="15" value="0" />
                                        <Key frame="250" value="0.302" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                                        <Key frame="15" value="5.75265e-06" />
                                        <Key frame="25" value="0" />
                                        <Key frame="35" value="-17.4" />
                                        <Key frame="45" value="0" />
                                        <Key frame="55" value="0" />
                                        <Key frame="65" value="-37.1" />
                                        <Key frame="75" value="-35" />
                                        <Key frame="85" value="-60" />
                                        <Key frame="95" value="-60" />
                                        <Key frame="105" value="-60" />
                                        <Key frame="118" value="-60" />
                                        <Key frame="131" value="-60" />
                                        <Key frame="142" value="-60" />
                                        <Key frame="152" value="-50" />
                                        <Key frame="162" value="-42.5" />
                                        <Key frame="172" value="0" />
                                        <Key frame="185" value="5.75265e-06" />
                                        <Key frame="198" value="30" />
                                        <Key frame="211" value="5.75265e-06" />
                                        <Key frame="217" value="-31.8" />
                                        <Key frame="222" value="-37.5" />
                                        <Key frame="231" value="-60" />
                                        <Key frame="250" value="1.93121" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                                        <Key frame="15" value="3" />
                                        <Key frame="25" value="7" />
                                        <Key frame="35" value="10" />
                                        <Key frame="45" value="-6" />
                                        <Key frame="55" value="-6" />
                                        <Key frame="65" value="10" />
                                        <Key frame="75" value="-15" />
                                        <Key frame="85" value="3.6" />
                                        <Key frame="95" value="7.5" />
                                        <Key frame="105" value="0" />
                                        <Key frame="118" value="0" />
                                        <Key frame="131" value="0" />
                                        <Key frame="142" value="5" />
                                        <Key frame="152" value="0" />
                                        <Key frame="162" value="-13.8" />
                                        <Key frame="167" value="-31.9" />
                                        <Key frame="172" value="-24.3" />
                                        <Key frame="185" value="-20" />
                                        <Key frame="198" value="0" />
                                        <Key frame="211" value="-20" />
                                        <Key frame="222" value="-17.9" />
                                        <Key frame="231" value="0" />
                                        <Key frame="250" value="-2.89802" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                                        <Key frame="15" value="0" />
                                        <Key frame="25" value="0" />
                                        <Key frame="35" value="-20" />
                                        <Key frame="45" value="0" />
                                        <Key frame="55" value="0" />
                                        <Key frame="65" value="-40" />
                                        <Key frame="75" value="-35" />
                                        <Key frame="85" value="-60" />
                                        <Key frame="95" value="-60" />
                                        <Key frame="105" value="-60" />
                                        <Key frame="118" value="-60" />
                                        <Key frame="131" value="-60" />
                                        <Key frame="142" value="-60" />
                                        <Key frame="152" value="-50" />
                                        <Key frame="162" value="-42.5" />
                                        <Key frame="172" value="-7" />
                                        <Key frame="185" value="-50" />
                                        <Key frame="198" value="0" />
                                        <Key frame="211" value="-50" />
                                        <Key frame="222" value="-37.5" />
                                        <Key frame="231" value="-60" />
                                        <Key frame="250" value="12.3951" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                                        <Key frame="15" value="-3" />
                                        <Key frame="25" value="-7" />
                                        <Key frame="35" value="-10" />
                                        <Key frame="45" value="6" />
                                        <Key frame="55" value="6" />
                                        <Key frame="65" value="-10" />
                                        <Key frame="75" value="10" />
                                        <Key frame="85" value="24.1" />
                                        <Key frame="95" value="30.3" />
                                        <Key frame="105" value="35" />
                                        <Key frame="118" value="35" />
                                        <Key frame="131" value="35" />
                                        <Key frame="142" value="20" />
                                        <Key frame="152" value="0" />
                                        <Key frame="162" value="-15" />
                                        <Key frame="167" value="14.4" />
                                        <Key frame="172" value="15" />
                                        <Key frame="185" value="8" />
                                        <Key frame="198" value="40" />
                                        <Key frame="211" value="8" />
                                        <Key frame="222" value="-15" />
                                        <Key frame="231" value="0" />
                                        <Key frame="250" value="2.37549" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                                        <Key frame="15" value="-6.2" />
                                        <Key frame="25" value="-6.9" />
                                        <Key frame="35" value="-7.5" />
                                        <Key frame="45" value="-6.9" />
                                        <Key frame="55" value="-8.2" />
                                        <Key frame="65" value="-9.6" />
                                        <Key frame="75" value="-5.7" />
                                        <Key frame="85" value="0" />
                                        <Key frame="95" value="0" />
                                        <Key frame="105" value="0" />
                                        <Key frame="118" value="0" />
                                        <Key frame="131" value="0" />
                                        <Key frame="142" value="0" />
                                        <Key frame="152" value="0" />
                                        <Key frame="162" value="0" />
                                        <Key frame="172" value="0" />
                                        <Key frame="185" value="0" />
                                        <Key frame="198" value="0" />
                                        <Key frame="211" value="0" />
                                        <Key frame="222" value="-3.9" />
                                        <Key frame="231" value="0" />
                                        <Key frame="250" value="-11.1598" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                                        <Key frame="15" value="0" />
                                        <Key frame="25" value="0" />
                                        <Key frame="35" value="40" />
                                        <Key frame="45" value="-5.69182e-06" />
                                        <Key frame="55" value="-5.69182e-06" />
                                        <Key frame="65" value="80" />
                                        <Key frame="75" value="70" />
                                        <Key frame="85" value="120" />
                                        <Key frame="95" value="120" />
                                        <Key frame="105" value="120" />
                                        <Key frame="118" value="120" />
                                        <Key frame="131" value="120" />
                                        <Key frame="142" value="120.9" />
                                        <Key frame="152" value="100" />
                                        <Key frame="162" value="85" />
                                        <Key frame="172" value="7" />
                                        <Key frame="185" value="100" />
                                        <Key frame="198" value="0" />
                                        <Key frame="211" value="100" />
                                        <Key frame="222" value="75" />
                                        <Key frame="231" value="120" />
                                        <Key frame="250" value="-5.10013" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                                        <Key frame="15" value="5.75266e-06" />
                                        <Key frame="25" value="0" />
                                        <Key frame="35" value="0" />
                                        <Key frame="45" value="0" />
                                        <Key frame="55" value="0" />
                                        <Key frame="65" value="-40" />
                                        <Key frame="75" value="-10" />
                                        <Key frame="85" value="0" />
                                        <Key frame="95" value="0" />
                                        <Key frame="105" value="5.75266e-06" />
                                        <Key frame="118" value="30" />
                                        <Key frame="131" value="5.75266e-06" />
                                        <Key frame="142" value="-42.5" />
                                        <Key frame="152" value="-50" />
                                        <Key frame="162" value="-60" />
                                        <Key frame="172" value="-60" />
                                        <Key frame="185" value="-60" />
                                        <Key frame="198" value="-60" />
                                        <Key frame="211" value="-60" />
                                        <Key frame="222" value="-60" />
                                        <Key frame="231" value="-60" />
                                        <Key frame="250" value="2.11181" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                                        <Key frame="15" value="-3" />
                                        <Key frame="25" value="7.5" />
                                        <Key frame="35" value="25.1" />
                                        <Key frame="45" value="6" />
                                        <Key frame="55" value="6" />
                                        <Key frame="65" value="16.9" />
                                        <Key frame="75" value="35.6" />
                                        <Key frame="85" value="45" />
                                        <Key frame="95" value="42.6" />
                                        <Key frame="105" value="25" />
                                        <Key frame="118" value="0" />
                                        <Key frame="131" value="20" />
                                        <Key frame="142" value="15" />
                                        <Key frame="152" value="0" />
                                        <Key frame="162" value="-10" />
                                        <Key frame="172" value="-10" />
                                        <Key frame="185" value="-2.43316" />
                                        <Key frame="198" value="-1.29234" />
                                        <Key frame="211" value="-0.747952" />
                                        <Key frame="222" value="-0.118362" />
                                        <Key frame="231" value="0" />
                                        <Key frame="250" value="1.67234" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                                        <Key frame="15" value="0" />
                                        <Key frame="25" value="0" />
                                        <Key frame="35" value="0" />
                                        <Key frame="45" value="0" />
                                        <Key frame="55" value="0" />
                                        <Key frame="65" value="-40" />
                                        <Key frame="75" value="-10" />
                                        <Key frame="85" value="-6" />
                                        <Key frame="95" value="-7" />
                                        <Key frame="105" value="-50" />
                                        <Key frame="118" value="0" />
                                        <Key frame="131" value="-50" />
                                        <Key frame="142" value="-42.5" />
                                        <Key frame="152" value="-50" />
                                        <Key frame="162" value="-60" />
                                        <Key frame="172" value="-60" />
                                        <Key frame="185" value="-60" />
                                        <Key frame="198" value="-60" />
                                        <Key frame="211" value="-60" />
                                        <Key frame="222" value="-60" />
                                        <Key frame="231" value="-60" />
                                        <Key frame="250" value="12.3024" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                                        <Key frame="15" value="3" />
                                        <Key frame="25" value="-7" />
                                        <Key frame="35" value="-25.1" />
                                        <Key frame="45" value="-6" />
                                        <Key frame="55" value="-6" />
                                        <Key frame="65" value="-20" />
                                        <Key frame="75" value="-45" />
                                        <Key frame="85" value="-31" />
                                        <Key frame="95" value="-8" />
                                        <Key frame="105" value="-8" />
                                        <Key frame="118" value="-40" />
                                        <Key frame="131" value="-8" />
                                        <Key frame="142" value="15" />
                                        <Key frame="152" value="0" />
                                        <Key frame="162" value="-20" />
                                        <Key frame="172" value="-30.9" />
                                        <Key frame="185" value="-35" />
                                        <Key frame="198" value="-35" />
                                        <Key frame="211" value="-35" />
                                        <Key frame="222" value="-30.5" />
                                        <Key frame="231" value="0" />
                                        <Key frame="250" value="-1.22808" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                                        <Key frame="15" value="-6.2" />
                                        <Key frame="25" value="-6.9" />
                                        <Key frame="35" value="-7.5" />
                                        <Key frame="45" value="-6.9" />
                                        <Key frame="55" value="-8.2" />
                                        <Key frame="65" value="-9.6" />
                                        <Key frame="250" value="-11.1598" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                                        <Key frame="15" value="0" />
                                        <Key frame="25" value="0" />
                                        <Key frame="35" value="0" />
                                        <Key frame="45" value="0" />
                                        <Key frame="55" value="0" />
                                        <Key frame="65" value="80" />
                                        <Key frame="75" value="20" />
                                        <Key frame="85" value="7" />
                                        <Key frame="95" value="7" />
                                        <Key frame="105" value="100" />
                                        <Key frame="118" value="0" />
                                        <Key frame="131" value="100" />
                                        <Key frame="142" value="85" />
                                        <Key frame="152" value="100" />
                                        <Key frame="162" value="120" />
                                        <Key frame="172" value="120" />
                                        <Key frame="185" value="120" />
                                        <Key frame="198" value="120" />
                                        <Key frame="211" value="120" />
                                        <Key frame="222" value="120" />
                                        <Key frame="231" value="120" />
                                        <Key frame="250" value="-5.2711" />
                                      </ActuatorCurve>
                                    </ActuatorList>
                                  </Timeline>
                                  <Resource name="All motors" type="Lock" timeout="0" />
                                </Box>
                                <Box name="Play Sound" id="1" localization="8" tooltip="Play a sound file. Select the file in parameters. The format of the file can be wav or ogg (on virtual robot) and also mp3 (on a real robot).&#x0A;&#x0A;Note: There can be some delay to play ogg or mp3 (on a robot) files. We advise you to use wav if&#x0A;you want a fast play of the file." x="221" y="315">
                                  <bitmap>media/images/box/interaction/play_music.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Starts the music." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops the music." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                  <Parameter name="File name" inherits_from_parent="0" content_type="4" value="/../bensound-relaxing.mp3" default_value="" tooltip="Name of the file you want to play.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="5" />
                                  <Parameter name="Begin position (s)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="6" />
                                  <Parameter name="Volume (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="7" />
                                  <Parameter name="Balance L/R" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="8" />
                                  <Parameter name="Play in loop" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="9" />
                                  <Timeline enable="0">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                          <Box name="Play Sound File" id="2" localization="8" tooltip="Play the sound." x="442" y="70">
                                            <bitmap>media/images/box/interaction/play_music.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.player = self.session().service('ALAudioPlayer')
        self.playerStop = self.session().service('ALAudioPlayer') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.playerStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            if (self.getParameter("Play in loop")) :
               id = self.player.pCall("playFileInLoop",p,self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            else :
               id = self.player.pCall("playFileFromPosition",p,self.getParameter("Begin position (s)"),self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            self.ids.append(id)
            self.player.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Begin position (s)" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="5" />
                                            <Parameter name="Volume (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="6" />
                                            <Parameter name="Balance L/R" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="7" />
                                            <Parameter name="Play in loop" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="8" />
                                          </Box>
                                          <Box name="Get Attached File" id="1" localization="8" tooltip="Use this box to choose an attached file in its parameters. The filename will be sent on&#x0A;the output when the input is stimulated." x="216" y="71">
                                            <bitmap>media/images/box/folder.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        pass

    def onInput_onStart(self):
        self.onStopped(self.behaviorAbsolutePath() + self.getParameter("File name"))]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the filepath on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The filepath of the selected resource file." id="3" />
                                            <Parameter name="File name" inherits_from_parent="1" content_type="4" value="" default_value="" tooltip="Name of the file which is going to be sent on the box output.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="4" />
                                          </Box>
                                          <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                          <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                          <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                  </Timeline>
                                  <Resource name="Audio player" type="Lock" timeout="0" />
                                </Box>
                                <Box name="Guessing" id="15" localization="8" tooltip="" x="964" y="189">
                                  <bitmap>media/images/box/box-diagram.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Input name="InitialGuess" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                  <Timeline enable="0">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                          <Box name="Counter" id="11" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="682" y="493">
                                            <bitmap>media/images/box/loop.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.onInput_onInit()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()
        self.onReinitialized()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                            <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                            <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                            <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                            <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                            <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                            <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="5" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                          </Box>
                                          <Box name="Switch Case" id="13" localization="8" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." plugin="dispatcher_plugin" x="904" y="323">
                                            <bitmap>media/images/box/interaction/choice.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
		  GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
		  GeneratedClass.__init__( self )

	def onInput_onStart(self, p):
		p = self.typeConversion(p)
		if(p == self.typeConversion(0)):
			self.output_1(p)
		elif(p == self.typeConversion(1)):
			self.output_2(p)
		elif(p == self.typeConversion(2)):
			self.output_3(p)
		else:
			self.onDefault()

	def typeConversion(self, p):
		try:
			p = float(p)
			pint = int(p)
			if( p == pint ):
				p = pint
		except:
			p = str(p)
		return p]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <keywords>
                                                <keyword>0</keyword>
                                                <keyword>1</keyword>
                                                <keyword>2</keyword>
                                                <keyword></keyword>
                                              </keywords>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" />
                                            <Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" />
                                            <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
                                            <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
                                            <Output name="output_3" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" />
                                          </Box>
                                          <Box name="Animated Say" id="14" localization="8" tooltip="Say some text with animations. The text can be localized." x="555" y="341">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="95" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Parameter name="Text" inherits_from_parent="0" content_type="5" value="not quite" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                                            <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                                              <Choice value="disabled" />
                                              <Choice value="random" />
                                              <Choice value="contextual" />
                                            </Parameter>
                                            <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Animated Say (1)" id="12" localization="8" tooltip="Say some text with animations. The text can be localized." x="1638" y="361">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Turn that frown upside down No Ell" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                                            <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                                              <Choice value="disabled" />
                                              <Choice value="random" />
                                              <Choice value="contextual" />
                                            </Parameter>
                                            <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Tactile Head" id="6" localization="8" tooltip="Detect touch on head tactile sensor." x="1021" y="673">
                                            <bitmap>media/images/box/sensors/tactileHead.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
            self.onStopped() #~ activate output of the box
        pass]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Input name="FrontTactilTouched" type="0" type_size="1" nature="4" stm_value_name="FrontTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" />
                                            <Input name="MiddleTactilTouched" type="0" type_size="1" nature="4" stm_value_name="MiddleTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="5" />
                                            <Input name="RearTactilTouched" type="0" type_size="1" nature="4" stm_value_name="RearTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="6" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="7" />
                                            <Output name="frontTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The front tactile head sensor was touched." id="8" />
                                            <Output name="middleTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The middle tactile head sensor was touched." id="9" />
                                            <Output name="rearTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The rear tactile head sensor was touched." id="10" />
                                            <Timeline enable="0">
                                              <BehaviorLayer name="behavior_layer1">
                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                  <Diagram>
                                                    <Box name="If &gt; 0" id="1" localization="8" tooltip="Transmit only if value is &gt; 0." x="260" y="17">
                                                      <bitmap>media/images/box/box-diagram.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                    </Box>
                                                    <Box name="If &gt; 0" id="2" localization="8" tooltip="Transmit only if value is &gt; 0." x="256" y="119">
                                                      <bitmap>media/images/box/box-diagram.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                    </Box>
                                                    <Box name="If &gt; 0" id="3" localization="8" tooltip="Transmit only if value is &gt; 0." x="261" y="223">
                                                      <bitmap>media/images/box/box-diagram.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                    </Box>
                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                    <Link inputowner="0" indexofinput="8" outputowner="1" indexofoutput="4" />
                                                    <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="5" />
                                                    <Link inputowner="0" indexofinput="9" outputowner="2" indexofoutput="4" />
                                                    <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="6" />
                                                    <Link inputowner="0" indexofinput="10" outputowner="3" indexofoutput="4" />
                                                  </Diagram>
                                                </BehaviorKeyframe>
                                              </BehaviorLayer>
                                            </Timeline>
                                            <Resource name="Head-sequence" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Animated Say (2)" id="5" localization="8" tooltip="Say some text with animations. The text can be localized." x="1075" y="858">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Parameter name="Text" inherits_from_parent="0" content_type="5" value="If you think its grandma dancing, please touch the front of my head. If you think its yoga and meditation, press the middle of my head. If you think its wakin up your leg that fell asleep, touch the back of my head" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                                            <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                                              <Choice value="disabled" />
                                              <Choice value="random" />
                                              <Choice value="contextual" />
                                            </Parameter>
                                            <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Animated Say (3)" id="8" localization="8" tooltip="Say some text with animations. The text can be localized." x="1633" y="621">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Congrats! You guessed it right" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                                            <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                                              <Choice value="disabled" />
                                              <Choice value="random" />
                                              <Choice value="contextual" />
                                            </Parameter>
                                            <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Link inputowner="13" indexofinput="2" outputowner="11" indexofoutput="4" />
                                          <Link inputowner="11" indexofinput="2" outputowner="14" indexofoutput="4" />
                                          <Link inputowner="11" indexofinput="3" outputowner="0" indexofoutput="2" />
                                          <Link inputowner="12" indexofinput="2" outputowner="13" indexofoutput="6" />
                                          <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="4" />
                                          <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="4" />
                                          <Link inputowner="6" indexofinput="2" outputowner="13" indexofoutput="4" />
                                          <Link inputowner="5" indexofinput="2" outputowner="13" indexofoutput="4" />
                                          <Link inputowner="6" indexofinput="2" outputowner="13" indexofoutput="5" />
                                          <Link inputowner="5" indexofinput="2" outputowner="13" indexofoutput="5" />
                                          <Link inputowner="0" indexofinput="5" outputowner="8" indexofoutput="4" />
                                          <Link inputowner="0" indexofinput="5" outputowner="12" indexofoutput="4" />
                                          <Link inputowner="8" indexofinput="2" outputowner="6" indexofoutput="9" />
                                          <Link inputowner="14" indexofinput="2" outputowner="6" indexofoutput="8" />
                                          <Link inputowner="14" indexofinput="2" outputowner="6" indexofoutput="10" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                  </Timeline>
                                </Box>
                                <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="1" indexofinput="3" outputowner="2" indexofoutput="4" />
                                <Link inputowner="15" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="15" indexofinput="4" outputowner="1" indexofoutput="4" />
                                <Link inputowner="0" indexofinput="4" outputowner="15" indexofoutput="5" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                        </Timeline>
                      </Box>
                      <Box name="peek-a-boo" id="6" localization="8" tooltip="" x="698" y="291">
                        <bitmap>media/images/box/box-diagram.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="0">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram>
                                <Box name="Timeline" id="1" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="408" y="113">
                                  <bitmap>media/images/box/movement/move.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Timeline enable="1" fps="2" start_frame="1" end_frame="-1" size="20">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram />
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                    <ActuatorList model="nao">
                                      <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                                        <Key frame="3" value="19.2459" />
                                        <Key frame="4" value="19.2459" />
                                        <Key frame="5" value="-13.362" />
                                        <Key frame="8" value="19.2459" />
                                        <Key frame="9" value="19.2459" />
                                        <Key frame="10" value="-13.362" />
                                        <Key frame="13" value="19.2459" />
                                        <Key frame="14" value="19.2459" />
                                        <Key frame="15" value="-13.362" />
                                        <Key frame="18" value="19.2459" />
                                        <Key frame="19" value="19.2459" />
                                        <Key frame="20" value="-13.362" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                                        <Key frame="3" value="5.88634" />
                                        <Key frame="4" value="5.88634" />
                                        <Key frame="5" value="4.74374" />
                                        <Key frame="8" value="5.88634" />
                                        <Key frame="9" value="5.88634" />
                                        <Key frame="10" value="4.74374" />
                                        <Key frame="13" value="5.88634" />
                                        <Key frame="14" value="5.88634" />
                                        <Key frame="15" value="4.74374" />
                                        <Key frame="18" value="5.88634" />
                                        <Key frame="19" value="5.88634" />
                                        <Key frame="20" value="4.74374" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                                        <Key frame="3" value="4.91954" />
                                        <Key frame="4" value="4.91954" />
                                        <Key frame="5" value="4.83163" />
                                        <Key frame="8" value="4.91954" />
                                        <Key frame="9" value="4.91954" />
                                        <Key frame="10" value="4.83163" />
                                        <Key frame="13" value="4.91954" />
                                        <Key frame="14" value="4.91954" />
                                        <Key frame="15" value="4.83163" />
                                        <Key frame="18" value="4.91954" />
                                        <Key frame="19" value="4.91954" />
                                        <Key frame="20" value="4.83163" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                                        <Key frame="3" value="-6.32579" />
                                        <Key frame="4" value="-6.32579" />
                                        <Key frame="5" value="-6.2379" />
                                        <Key frame="8" value="-6.32579" />
                                        <Key frame="9" value="-6.32579" />
                                        <Key frame="10" value="-6.2379" />
                                        <Key frame="13" value="-6.32579" />
                                        <Key frame="14" value="-6.32579" />
                                        <Key frame="15" value="-6.2379" />
                                        <Key frame="18" value="-6.32579" />
                                        <Key frame="19" value="-6.32579" />
                                        <Key frame="20" value="-6.2379" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                                        <Key frame="3" value="-87.362" />
                                        <Key frame="4" value="-87.362" />
                                        <Key frame="5" value="-80.3306" />
                                        <Key frame="8" value="-87.362" />
                                        <Key frame="9" value="-87.362" />
                                        <Key frame="10" value="-80.3306" />
                                        <Key frame="13" value="-87.362" />
                                        <Key frame="14" value="-87.362" />
                                        <Key frame="15" value="-80.3306" />
                                        <Key frame="18" value="-87.362" />
                                        <Key frame="19" value="-87.362" />
                                        <Key frame="20" value="-80.3306" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                                        <Key frame="3" value="-57.7473" />
                                        <Key frame="4" value="-57.7473" />
                                        <Key frame="5" value="-115.404" />
                                        <Key frame="8" value="-57.7473" />
                                        <Key frame="9" value="-57.7473" />
                                        <Key frame="10" value="-115.404" />
                                        <Key frame="13" value="-57.7473" />
                                        <Key frame="14" value="-57.7473" />
                                        <Key frame="15" value="-115.404" />
                                        <Key frame="18" value="-57.7473" />
                                        <Key frame="19" value="-57.7473" />
                                        <Key frame="20" value="-115.404" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                                        <Key frame="3" value="0.8304" />
                                        <Key frame="4" value="0.8304" />
                                        <Key frame="5" value="0.8908" />
                                        <Key frame="8" value="0.8304" />
                                        <Key frame="9" value="0.8304" />
                                        <Key frame="10" value="0.8908" />
                                        <Key frame="13" value="0.8304" />
                                        <Key frame="14" value="0.8304" />
                                        <Key frame="15" value="0.8908" />
                                        <Key frame="18" value="0.8304" />
                                        <Key frame="19" value="0.8304" />
                                        <Key frame="20" value="0.8908" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                                        <Key frame="3" value="6.94585" />
                                        <Key frame="4" value="6.94585" />
                                        <Key frame="5" value="7.12163" />
                                        <Key frame="8" value="6.94585" />
                                        <Key frame="9" value="6.94585" />
                                        <Key frame="10" value="7.12163" />
                                        <Key frame="13" value="6.94585" />
                                        <Key frame="14" value="6.94585" />
                                        <Key frame="15" value="7.12163" />
                                        <Key frame="18" value="6.94585" />
                                        <Key frame="19" value="6.94585" />
                                        <Key frame="20" value="7.12163" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                                        <Key frame="3" value="6.85796" />
                                        <Key frame="4" value="6.85796" />
                                        <Key frame="5" value="6.5064" />
                                        <Key frame="8" value="6.85796" />
                                        <Key frame="9" value="6.85796" />
                                        <Key frame="10" value="6.5064" />
                                        <Key frame="13" value="6.85796" />
                                        <Key frame="14" value="6.85796" />
                                        <Key frame="15" value="6.5064" />
                                        <Key frame="18" value="6.85796" />
                                        <Key frame="19" value="6.85796" />
                                        <Key frame="20" value="6.5064" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                                        <Key frame="3" value="-9.66569" />
                                        <Key frame="4" value="-9.66569" />
                                        <Key frame="5" value="-9.5778" />
                                        <Key frame="8" value="-9.66569" />
                                        <Key frame="9" value="-9.66569" />
                                        <Key frame="10" value="-9.5778" />
                                        <Key frame="13" value="-9.66569" />
                                        <Key frame="14" value="-9.66569" />
                                        <Key frame="15" value="-9.5778" />
                                        <Key frame="18" value="-9.66569" />
                                        <Key frame="19" value="-9.66569" />
                                        <Key frame="20" value="-9.5778" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                                        <Key frame="3" value="-5.27591" />
                                        <Key frame="4" value="-5.27591" />
                                        <Key frame="5" value="-5.27591" />
                                        <Key frame="8" value="-5.27591" />
                                        <Key frame="9" value="-5.27591" />
                                        <Key frame="10" value="-5.27591" />
                                        <Key frame="13" value="-5.27591" />
                                        <Key frame="14" value="-5.27591" />
                                        <Key frame="15" value="-5.27591" />
                                        <Key frame="18" value="-5.27591" />
                                        <Key frame="19" value="-5.27591" />
                                        <Key frame="20" value="-5.27591" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                                        <Key frame="3" value="5.35899" />
                                        <Key frame="4" value="5.35899" />
                                        <Key frame="5" value="-8.35212" />
                                        <Key frame="8" value="5.35899" />
                                        <Key frame="9" value="5.35899" />
                                        <Key frame="10" value="-8.35212" />
                                        <Key frame="13" value="5.35899" />
                                        <Key frame="14" value="5.35899" />
                                        <Key frame="15" value="-8.35212" />
                                        <Key frame="18" value="5.35899" />
                                        <Key frame="19" value="5.35899" />
                                        <Key frame="20" value="-8.35212" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                                        <Key frame="3" value="-0.529749" />
                                        <Key frame="4" value="-0.529749" />
                                        <Key frame="5" value="18.4549" />
                                        <Key frame="8" value="-0.529749" />
                                        <Key frame="9" value="-0.529749" />
                                        <Key frame="10" value="18.4549" />
                                        <Key frame="13" value="-0.529749" />
                                        <Key frame="14" value="-0.529749" />
                                        <Key frame="15" value="18.4549" />
                                        <Key frame="18" value="-0.529749" />
                                        <Key frame="19" value="-0.529749" />
                                        <Key frame="20" value="18.4549" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                                        <Key frame="3" value="-86.6637" />
                                        <Key frame="4" value="-86.6637" />
                                        <Key frame="5" value="-6.3306" />
                                        <Key frame="8" value="-86.6637" />
                                        <Key frame="9" value="-86.6637" />
                                        <Key frame="10" value="-6.3306" />
                                        <Key frame="13" value="-86.6637" />
                                        <Key frame="14" value="-86.6637" />
                                        <Key frame="15" value="-6.3306" />
                                        <Key frame="18" value="-86.6637" />
                                        <Key frame="19" value="-86.6637" />
                                        <Key frame="20" value="-6.3306" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                                        <Key frame="3" value="4.74855" />
                                        <Key frame="4" value="4.74855" />
                                        <Key frame="5" value="4.83644" />
                                        <Key frame="8" value="4.74855" />
                                        <Key frame="9" value="4.74855" />
                                        <Key frame="10" value="4.83644" />
                                        <Key frame="13" value="4.74855" />
                                        <Key frame="14" value="4.74855" />
                                        <Key frame="15" value="4.83644" />
                                        <Key frame="18" value="4.74855" />
                                        <Key frame="19" value="4.74855" />
                                        <Key frame="20" value="4.83644" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                                        <Key frame="3" value="6.41851" />
                                        <Key frame="4" value="6.41851" />
                                        <Key frame="5" value="6.15482" />
                                        <Key frame="8" value="6.41851" />
                                        <Key frame="9" value="6.41851" />
                                        <Key frame="10" value="6.15482" />
                                        <Key frame="13" value="6.41851" />
                                        <Key frame="14" value="6.41851" />
                                        <Key frame="15" value="6.15482" />
                                        <Key frame="18" value="6.41851" />
                                        <Key frame="19" value="6.41851" />
                                        <Key frame="20" value="6.15482" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                                        <Key frame="3" value="86.4879" />
                                        <Key frame="4" value="86.4879" />
                                        <Key frame="5" value="87.0152" />
                                        <Key frame="8" value="86.4879" />
                                        <Key frame="9" value="86.4879" />
                                        <Key frame="10" value="87.0152" />
                                        <Key frame="13" value="86.4879" />
                                        <Key frame="14" value="86.4879" />
                                        <Key frame="15" value="87.0152" />
                                        <Key frame="18" value="86.4879" />
                                        <Key frame="19" value="86.4879" />
                                        <Key frame="20" value="87.0152" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                                        <Key frame="3" value="52.0295" />
                                        <Key frame="4" value="52.0295" />
                                        <Key frame="5" value="109.423" />
                                        <Key frame="8" value="52.0295" />
                                        <Key frame="9" value="52.0295" />
                                        <Key frame="10" value="109.423" />
                                        <Key frame="13" value="52.0295" />
                                        <Key frame="14" value="52.0295" />
                                        <Key frame="15" value="109.423" />
                                        <Key frame="18" value="52.0295" />
                                        <Key frame="19" value="52.0295" />
                                        <Key frame="20" value="109.423" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                                        <Key frame="3" value="0.8288" />
                                        <Key frame="4" value="0.8288" />
                                        <Key frame="5" value="0.8692" />
                                        <Key frame="8" value="0.8288" />
                                        <Key frame="9" value="0.8288" />
                                        <Key frame="10" value="0.8692" />
                                        <Key frame="13" value="0.8288" />
                                        <Key frame="14" value="0.8288" />
                                        <Key frame="15" value="0.8692" />
                                        <Key frame="18" value="0.8288" />
                                        <Key frame="19" value="0.8288" />
                                        <Key frame="20" value="0.8692" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                                        <Key frame="3" value="7.02893" />
                                        <Key frame="4" value="7.02893" />
                                        <Key frame="5" value="7.55628" />
                                        <Key frame="8" value="7.02893" />
                                        <Key frame="9" value="7.02893" />
                                        <Key frame="10" value="7.55628" />
                                        <Key frame="13" value="7.02893" />
                                        <Key frame="14" value="7.02893" />
                                        <Key frame="15" value="7.55628" />
                                        <Key frame="18" value="7.02893" />
                                        <Key frame="19" value="7.02893" />
                                        <Key frame="20" value="7.55628" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                                        <Key frame="3" value="-6.67737" />
                                        <Key frame="4" value="-6.67737" />
                                        <Key frame="5" value="-6.67737" />
                                        <Key frame="8" value="-6.67737" />
                                        <Key frame="9" value="-6.67737" />
                                        <Key frame="10" value="-6.67737" />
                                        <Key frame="13" value="-6.67737" />
                                        <Key frame="14" value="-6.67737" />
                                        <Key frame="15" value="-6.67737" />
                                        <Key frame="18" value="-6.67737" />
                                        <Key frame="19" value="-6.67737" />
                                        <Key frame="20" value="-6.67737" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                                        <Key frame="3" value="-9.66569" />
                                        <Key frame="4" value="-9.66569" />
                                        <Key frame="5" value="-9.5778" />
                                        <Key frame="8" value="-9.66569" />
                                        <Key frame="9" value="-9.66569" />
                                        <Key frame="10" value="-9.5778" />
                                        <Key frame="13" value="-9.66569" />
                                        <Key frame="14" value="-9.66569" />
                                        <Key frame="15" value="-9.5778" />
                                        <Key frame="18" value="-9.66569" />
                                        <Key frame="19" value="-9.66569" />
                                        <Key frame="20" value="-9.5778" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                                        <Key frame="3" value="-5.2711" />
                                        <Key frame="4" value="-5.2711" />
                                        <Key frame="5" value="-5.2711" />
                                        <Key frame="8" value="-5.2711" />
                                        <Key frame="9" value="-5.2711" />
                                        <Key frame="10" value="-5.2711" />
                                        <Key frame="13" value="-5.2711" />
                                        <Key frame="14" value="-5.2711" />
                                        <Key frame="15" value="-5.2711" />
                                        <Key frame="18" value="-5.2711" />
                                        <Key frame="19" value="-5.2711" />
                                        <Key frame="20" value="-5.2711" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                                        <Key frame="3" value="7.20952" />
                                        <Key frame="4" value="7.20952" />
                                        <Key frame="5" value="-2.54646" />
                                        <Key frame="8" value="7.20952" />
                                        <Key frame="9" value="7.20952" />
                                        <Key frame="10" value="-2.54646" />
                                        <Key frame="13" value="7.20952" />
                                        <Key frame="14" value="7.20952" />
                                        <Key frame="15" value="-2.54646" />
                                        <Key frame="18" value="7.20952" />
                                        <Key frame="19" value="7.20952" />
                                        <Key frame="20" value="-2.54646" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                                        <Key frame="3" value="9.84147" />
                                        <Key frame="4" value="9.84147" />
                                        <Key frame="5" value="-1.05711" />
                                        <Key frame="8" value="9.84147" />
                                        <Key frame="9" value="9.84147" />
                                        <Key frame="10" value="-1.05711" />
                                        <Key frame="13" value="9.84147" />
                                        <Key frame="14" value="9.84147" />
                                        <Key frame="15" value="-1.05711" />
                                        <Key frame="18" value="9.84147" />
                                        <Key frame="19" value="9.84147" />
                                        <Key frame="20" value="-1.05711" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                                        <Key frame="3" value="99.6668" />
                                        <Key frame="4" value="99.6668" />
                                        <Key frame="5" value="49.9201" />
                                        <Key frame="8" value="99.6668" />
                                        <Key frame="9" value="99.6668" />
                                        <Key frame="10" value="49.9201" />
                                        <Key frame="13" value="99.6668" />
                                        <Key frame="14" value="99.6668" />
                                        <Key frame="15" value="49.9201" />
                                        <Key frame="18" value="99.6668" />
                                        <Key frame="19" value="99.6668" />
                                        <Key frame="20" value="49.9201" />
                                      </ActuatorCurve>
                                    </ActuatorList>
                                  </Timeline>
                                </Box>
                                <Box name="Play Sound" id="2" localization="8" tooltip="Play a sound file. Select the file in parameters. The format of the file can be wav or ogg (on virtual robot) and also mp3 (on a real robot).&#x0A;&#x0A;Note: There can be some delay to play ogg or mp3 (on a robot) files. We advise you to use wav if&#x0A;you want a fast play of the file." x="404" y="357">
                                  <bitmap>media/images/box/interaction/play_music.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Starts the music." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops the music." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                  <Parameter name="File name" inherits_from_parent="0" content_type="4" value="/../bensound-buddy.mp3" default_value="" tooltip="Name of the file you want to play.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="5" />
                                  <Parameter name="Begin position (s)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="6" />
                                  <Parameter name="Volume (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="7" />
                                  <Parameter name="Balance L/R" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="8" />
                                  <Parameter name="Play in loop" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="9" />
                                  <Timeline enable="0">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                          <Box name="Play Sound File" id="2" localization="8" tooltip="Play the sound." x="442" y="70">
                                            <bitmap>media/images/box/interaction/play_music.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.player = self.session().service('ALAudioPlayer')
        self.playerStop = self.session().service('ALAudioPlayer') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.playerStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            if (self.getParameter("Play in loop")) :
               id = self.player.pCall("playFileInLoop",p,self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            else :
               id = self.player.pCall("playFileFromPosition",p,self.getParameter("Begin position (s)"),self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            self.ids.append(id)
            self.player.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Begin position (s)" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="5" />
                                            <Parameter name="Volume (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="6" />
                                            <Parameter name="Balance L/R" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="7" />
                                            <Parameter name="Play in loop" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="8" />
                                          </Box>
                                          <Box name="Get Attached File" id="1" localization="8" tooltip="Use this box to choose an attached file in its parameters. The filename will be sent on&#x0A;the output when the input is stimulated." x="216" y="71">
                                            <bitmap>media/images/box/folder.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        pass

    def onInput_onStart(self):
        self.onStopped(self.behaviorAbsolutePath() + self.getParameter("File name"))]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the filepath on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The filepath of the selected resource file." id="3" />
                                            <Parameter name="File name" inherits_from_parent="1" content_type="4" value="" default_value="" tooltip="Name of the file which is going to be sent on the box output.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="4" />
                                          </Box>
                                          <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                          <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                          <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                  </Timeline>
                                  <Resource name="Audio player" type="Lock" timeout="0" />
                                </Box>
                                <Box name="Guessing" id="15" localization="8" tooltip="" x="1040" y="256">
                                  <bitmap>media/images/box/box-diagram.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Input name="InitialGuess" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                  <Timeline enable="0">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                          <Box name="Counter" id="11" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="682" y="493">
                                            <bitmap>media/images/box/loop.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.onInput_onInit()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()
        self.onReinitialized()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                            <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                            <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                            <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                            <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                            <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                            <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="5" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                          </Box>
                                          <Box name="Switch Case" id="13" localization="8" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." plugin="dispatcher_plugin" x="904" y="323">
                                            <bitmap>media/images/box/interaction/choice.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
		  GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
		  GeneratedClass.__init__( self )

	def onInput_onStart(self, p):
		p = self.typeConversion(p)
		if(p == self.typeConversion(0)):
			self.output_1(p)
		elif(p == self.typeConversion(1)):
			self.output_2(p)
		elif(p == self.typeConversion(2)):
			self.output_3(p)
		else:
			self.onDefault()

	def typeConversion(self, p):
		try:
			p = float(p)
			pint = int(p)
			if( p == pint ):
				p = pint
		except:
			p = str(p)
		return p]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <keywords>
                                                <keyword>0</keyword>
                                                <keyword>1</keyword>
                                                <keyword>2</keyword>
                                                <keyword></keyword>
                                              </keywords>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" />
                                            <Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" />
                                            <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
                                            <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
                                            <Output name="output_3" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" />
                                          </Box>
                                          <Box name="Animated Say" id="14" localization="8" tooltip="Say some text with animations. The text can be localized." x="555" y="341">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="95" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Parameter name="Text" inherits_from_parent="0" content_type="5" value="not quite" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                                            <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                                              <Choice value="disabled" />
                                              <Choice value="random" />
                                              <Choice value="contextual" />
                                            </Parameter>
                                            <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Animated Say (1)" id="12" localization="8" tooltip="Say some text with animations. The text can be localized." x="1638" y="361">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Turn that frown upside down No Ell" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                                            <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                                              <Choice value="disabled" />
                                              <Choice value="random" />
                                              <Choice value="contextual" />
                                            </Parameter>
                                            <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Tactile Head" id="6" localization="8" tooltip="Detect touch on head tactile sensor." x="1021" y="673">
                                            <bitmap>media/images/box/sensors/tactileHead.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
            self.onStopped() #~ activate output of the box
        pass]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Input name="FrontTactilTouched" type="0" type_size="1" nature="4" stm_value_name="FrontTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" />
                                            <Input name="MiddleTactilTouched" type="0" type_size="1" nature="4" stm_value_name="MiddleTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="5" />
                                            <Input name="RearTactilTouched" type="0" type_size="1" nature="4" stm_value_name="RearTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="6" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="7" />
                                            <Output name="frontTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The front tactile head sensor was touched." id="8" />
                                            <Output name="middleTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The middle tactile head sensor was touched." id="9" />
                                            <Output name="rearTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The rear tactile head sensor was touched." id="10" />
                                            <Timeline enable="0">
                                              <BehaviorLayer name="behavior_layer1">
                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                  <Diagram>
                                                    <Box name="If &gt; 0" id="1" localization="8" tooltip="Transmit only if value is &gt; 0." x="260" y="17">
                                                      <bitmap>media/images/box/box-diagram.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                    </Box>
                                                    <Box name="If &gt; 0" id="2" localization="8" tooltip="Transmit only if value is &gt; 0." x="256" y="119">
                                                      <bitmap>media/images/box/box-diagram.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                    </Box>
                                                    <Box name="If &gt; 0" id="3" localization="8" tooltip="Transmit only if value is &gt; 0." x="261" y="223">
                                                      <bitmap>media/images/box/box-diagram.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                    </Box>
                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                    <Link inputowner="0" indexofinput="8" outputowner="1" indexofoutput="4" />
                                                    <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="5" />
                                                    <Link inputowner="0" indexofinput="9" outputowner="2" indexofoutput="4" />
                                                    <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="6" />
                                                    <Link inputowner="0" indexofinput="10" outputowner="3" indexofoutput="4" />
                                                  </Diagram>
                                                </BehaviorKeyframe>
                                              </BehaviorLayer>
                                            </Timeline>
                                            <Resource name="Head-sequence" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Animated Say (2)" id="5" localization="8" tooltip="Say some text with animations. The text can be localized." x="1075" y="858">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Parameter name="Text" inherits_from_parent="0" content_type="5" value="If you think its me hiding from my responsibilities, please touch the front of my head. If you think its peek-a-boo, press the middle of my head. If you think its march maddness, touch the back of my head." default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                                            <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                                              <Choice value="disabled" />
                                              <Choice value="random" />
                                              <Choice value="contextual" />
                                            </Parameter>
                                            <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Animated Say (3)" id="8" localization="8" tooltip="Say some text with animations. The text can be localized." x="1633" y="621">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Congrats! You guessed it right" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                                            <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                                              <Choice value="disabled" />
                                              <Choice value="random" />
                                              <Choice value="contextual" />
                                            </Parameter>
                                            <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Link inputowner="13" indexofinput="2" outputowner="11" indexofoutput="4" />
                                          <Link inputowner="11" indexofinput="2" outputowner="14" indexofoutput="4" />
                                          <Link inputowner="11" indexofinput="3" outputowner="0" indexofoutput="2" />
                                          <Link inputowner="12" indexofinput="2" outputowner="13" indexofoutput="6" />
                                          <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="4" />
                                          <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="4" />
                                          <Link inputowner="6" indexofinput="2" outputowner="13" indexofoutput="4" />
                                          <Link inputowner="5" indexofinput="2" outputowner="13" indexofoutput="4" />
                                          <Link inputowner="6" indexofinput="2" outputowner="13" indexofoutput="5" />
                                          <Link inputowner="5" indexofinput="2" outputowner="13" indexofoutput="5" />
                                          <Link inputowner="0" indexofinput="5" outputowner="8" indexofoutput="4" />
                                          <Link inputowner="0" indexofinput="5" outputowner="12" indexofoutput="4" />
                                          <Link inputowner="8" indexofinput="2" outputowner="6" indexofoutput="9" />
                                          <Link inputowner="14" indexofinput="2" outputowner="6" indexofoutput="8" />
                                          <Link inputowner="14" indexofinput="2" outputowner="6" indexofoutput="10" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                  </Timeline>
                                </Box>
                                <Link inputowner="2" indexofinput="3" outputowner="1" indexofoutput="4" />
                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="0" indexofinput="4" outputowner="15" indexofoutput="5" />
                                <Link inputowner="15" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="15" indexofinput="4" outputowner="2" indexofoutput="4" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                        </Timeline>
                      </Box>
                      <Link inputowner="1" indexofinput="2" outputowner="3" indexofoutput="4" />
                      <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                      <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="4" />
                      <Link inputowner="5" indexofinput="2" outputowner="2" indexofoutput="5" />
                      <Link inputowner="6" indexofinput="2" outputowner="2" indexofoutput="6" />
                      <Link inputowner="0" indexofinput="4" outputowner="6" indexofoutput="4" />
                      <Link inputowner="0" indexofinput="4" outputowner="5" indexofoutput="4" />
                      <Link inputowner="0" indexofinput="4" outputowner="4" indexofoutput="4" />
                      <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
              </Timeline>
            </Box>
            <Box name="Places" id="4" localization="8" tooltip="" x="633" y="358">
              <bitmap>media/images/box/box-diagram.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
              <Timeline enable="0">
                <BehaviorLayer name="behavior_layer1">
                  <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                      <Box name="Animated Say" id="3" localization="8" tooltip="Say some text with animations. The text can be localized." x="160" y="41">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Parameter name="Text" inherits_from_parent="0" content_type="5" value="I am going to imitate a place. If you have a guess, touch the center of my head and wait for the beep and tell me what you think I am imitating. If you need me to act it out in a clearer or different manner, tap the center of my head." default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                        <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                          <Choice value="disabled" />
                          <Choice value="random" />
                          <Choice value="contextual" />
                        </Parameter>
                        <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Random Int." id="1" localization="8" tooltip="Generate a random integer between a min number and a max number set as&#x0A;parameters.&#x0A;Note that the min and max numbers are included in the range of possible values." x="310" y="47">
                        <bitmap>media/images/box/box-script.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import random

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        # attributes needed in shuffle mode
        self.nMax = 1
        self.nMin = 0
        self.nIndex = self.nMax - self.nMin
        self.aShuffled = []

    def onUnload(self):
         #puts code for box cleanup here
        pass

    def onInput_onStart(self):
        nMax = self.getParameter("Max value")
        nMin = self.getParameter("Min value")
        if( nMin > nMax ):
            temp = nMin
            nMin = nMax
            nMax = temp
        # if shuffle
        if( self.getParameter("Shuffle") ):
            self.nIndex += 1
            if( self.nIndex > self.nMax - self.nMin or nMax != self.nMax or nMin != self.nMin ):
                self.nMax = nMax
                self.nMin = nMin
                self.nIndex = 0
                self.aShuffled = []
                for i in range( nMin, nMax + 1 ):
                    self.aShuffled.insert( random.randint(0, len(self.aShuffled)), i )
            self.output_RandomValue( self.aShuffled[self.nIndex] )
        # if not shuffle
        else:
            self.nIndex = self.nMax - self.nMin
            self.output_RandomValue( random.randint( nMin, nMax ) )]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="Generate a random integer." id="2" />
                        <Output name="output_RandomValue" type="2" type_size="1" nature="2" inner="0" tooltip="The random value obtained." id="3" />
                        <Parameter name="Min value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="1000" tooltip="The minimum value you can get." id="4" />
                        <Parameter name="Max value" inherits_from_parent="0" content_type="1" value="1" default_value="10" min="0" max="1000" tooltip="The maximum number you can get." id="5" />
                        <Parameter name="Shuffle" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="When this option is selected the box will give all the numbers between min and&#x0A;max before giving the same number twice." id="6" />
                      </Box>
                      <Box name="Switch Case" id="2" localization="8" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." plugin="dispatcher_plugin" x="459" y="47">
                        <bitmap>media/images/box/interaction/choice.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
		  GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
		  GeneratedClass.__init__( self )

	def onInput_onStart(self, p):
		p = self.typeConversion(p)
		if(p == self.typeConversion(0)):
			self.output_1(p)
		elif(p == self.typeConversion(1)):
			self.output_2(p)
		else:
			self.onDefault()

	def typeConversion(self, p):
		try:
			p = float(p)
			pint = int(p)
			if( p == pint ):
				p = pint
		except:
			p = str(p)
		return p]]>
                          </content>
                        </script>
                        <pluginContent>
                          <keywords>
                            <keyword>0</keyword>
                            <keyword>1</keyword>
                            <keyword></keyword>
                          </keywords>
                        </pluginContent>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" />
                        <Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" />
                        <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
                        <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
                      </Box>
                      <Box name="Disco/Club" id="4" localization="8" tooltip="" x="767" y="49">
                        <bitmap>media/images/box/box-diagram.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="0">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram>
                                <Box name="Play Sound" id="1" localization="8" tooltip="Play a sound file. Select the file in parameters. The format of the file can be wav or ogg (on virtual robot) and also mp3 (on a real robot).&#x0A;&#x0A;Note: There can be some delay to play ogg or mp3 (on a robot) files. We advise you to use wav if&#x0A;you want a fast play of the file." x="693" y="333">
                                  <bitmap>media/images/box/interaction/play_music.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Starts the music." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops the music." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                  <Parameter name="File name" inherits_from_parent="0" content_type="4" value="/disco_times_(20-secs_version)_proud_music_preview.mp3" default_value="" tooltip="Name of the file you want to play.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="5" />
                                  <Parameter name="Begin position (s)" inherits_from_parent="0" content_type="2" value="5" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="6" />
                                  <Parameter name="Volume (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="7" />
                                  <Parameter name="Balance L/R" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="8" />
                                  <Parameter name="Play in loop" inherits_from_parent="0" content_type="0" value="1" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="9" />
                                  <Timeline enable="0">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                          <Box name="Play Sound File" id="2" localization="8" tooltip="Play the sound." x="442" y="70">
                                            <bitmap>media/images/box/interaction/play_music.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.player = self.session().service('ALAudioPlayer')
        self.playerStop = self.session().service('ALAudioPlayer') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.playerStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            if (self.getParameter("Play in loop")) :
               id = self.player.pCall("playFileInLoop",p,self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            else :
               id = self.player.pCall("playFileFromPosition",p,self.getParameter("Begin position (s)"),self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            self.ids.append(id)
            self.player.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Begin position (s)" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="5" />
                                            <Parameter name="Volume (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="6" />
                                            <Parameter name="Balance L/R" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="7" />
                                            <Parameter name="Play in loop" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="8" />
                                          </Box>
                                          <Box name="Get Attached File" id="1" localization="8" tooltip="Use this box to choose an attached file in its parameters. The filename will be sent on&#x0A;the output when the input is stimulated." x="216" y="71">
                                            <bitmap>media/images/box/folder.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        pass

    def onInput_onStart(self):
        self.onStopped(self.behaviorAbsolutePath() + self.getParameter("File name"))]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the filepath on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The filepath of the selected resource file." id="3" />
                                            <Parameter name="File name" inherits_from_parent="1" content_type="4" value="" default_value="" tooltip="Name of the file which is going to be sent on the box output.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="4" />
                                          </Box>
                                          <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                          <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                          <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                  </Timeline>
                                  <Resource name="Audio player" type="Lock" timeout="0" />
                                </Box>
                                <Box name="Disco" id="16" localization="8" tooltip="ID : #04B 0002&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Disco" x="696" y="173">
                                  <bitmap>media/images/box/movement/move.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Animation starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Animation stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when animation is finished." id="4" />
                                  <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="398">
                                    <ActuatorList model="nao">
                                      <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                                        <Key frame="42" value="-42.7" />
                                        <Key frame="62" value="16.6" />
                                        <Key frame="85" value="-42.7" />
                                        <Key frame="105" value="16.6" />
                                        <Key frame="127" value="-42.7" />
                                        <Key frame="147" value="16.6" />
                                        <Key frame="170" value="-42.7" />
                                        <Key frame="190" value="16.6" />
                                        <Key frame="217" value="42.7" />
                                        <Key frame="237" value="-16.6" />
                                        <Key frame="260" value="42.7" />
                                        <Key frame="280" value="-16.6" />
                                        <Key frame="301" value="42.7" />
                                        <Key frame="321" value="-16.6" />
                                        <Key frame="343" value="42.7" />
                                        <Key frame="363" value="-16.6" />
                                        <Key frame="396" value="0.524941" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                                        <Key frame="42" value="-27.3" />
                                        <Key frame="62" value="19.4" />
                                        <Key frame="85" value="-27.3" />
                                        <Key frame="105" value="19.4" />
                                        <Key frame="127" value="-27.3" />
                                        <Key frame="147" value="19.4" />
                                        <Key frame="170" value="-27.3" />
                                        <Key frame="190" value="19.4" />
                                        <Key frame="217" value="-27.3" />
                                        <Key frame="237" value="19.4" />
                                        <Key frame="260" value="-27.3" />
                                        <Key frame="280" value="19.4" />
                                        <Key frame="301" value="-27.3" />
                                        <Key frame="321" value="19.4" />
                                        <Key frame="343" value="-27.3" />
                                        <Key frame="363" value="19.4" />
                                        <Key frame="396" value="-9.84628" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                                        <Key frame="21" value="36.6484" />
                                        <Key frame="42" value="100.106" />
                                        <Key frame="62" value="106.347" />
                                        <Key frame="85" value="100.106" />
                                        <Key frame="105" value="106.347" />
                                        <Key frame="127" value="100.106" />
                                        <Key frame="147" value="106.347" />
                                        <Key frame="170" value="100.106" />
                                        <Key frame="190" value="106.347" />
                                        <Key frame="204" value="69.6" />
                                        <Key frame="219" value="-68.2895" />
                                        <Key frame="239" value="57.0441" />
                                        <Key frame="262" value="-68.2895" />
                                        <Key frame="282" value="57.0441" />
                                        <Key frame="303" value="-68.2895" />
                                        <Key frame="323" value="57.0441" />
                                        <Key frame="345" value="-68.2895" />
                                        <Key frame="365" value="57.0441" />
                                        <Key frame="385" value="61" />
                                        <Key frame="398" value="84.2858" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                                        <Key frame="21" value="19.5096" />
                                        <Key frame="42" value="13.8845" />
                                        <Key frame="62" value="11.2477" />
                                        <Key frame="85" value="13.8845" />
                                        <Key frame="105" value="11.2477" />
                                        <Key frame="127" value="13.8845" />
                                        <Key frame="147" value="11.2477" />
                                        <Key frame="170" value="13.8845" />
                                        <Key frame="190" value="11.2477" />
                                        <Key frame="204" value="9.5" />
                                        <Key frame="219" value="18.8112" />
                                        <Key frame="229" value="34.1" />
                                        <Key frame="239" value="-18" />
                                        <Key frame="251" value="34.1" />
                                        <Key frame="262" value="18.8112" />
                                        <Key frame="272" value="34.1" />
                                        <Key frame="282" value="-18" />
                                        <Key frame="294" value="34.1" />
                                        <Key frame="303" value="18.8112" />
                                        <Key frame="313" value="34.1" />
                                        <Key frame="323" value="-18" />
                                        <Key frame="335" value="34.1" />
                                        <Key frame="345" value="18.8112" />
                                        <Key frame="355" value="34.1" />
                                        <Key frame="365" value="-18" />
                                        <Key frame="377" value="34.1" />
                                        <Key frame="398" value="8.78677" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                                        <Key frame="21" value="-37.5322" />
                                        <Key frame="32" value="-101.1" />
                                        <Key frame="42" value="-21.7996" />
                                        <Key frame="62" value="-35.4228" />
                                        <Key frame="85" value="-21.7996" />
                                        <Key frame="105" value="-35.4228" />
                                        <Key frame="127" value="-21.7996" />
                                        <Key frame="147" value="-35.4228" />
                                        <Key frame="170" value="-21.7996" />
                                        <Key frame="190" value="-35.4228" />
                                        <Key frame="204" value="-94.9" />
                                        <Key frame="219" value="48.7823" />
                                        <Key frame="229" value="4.3" />
                                        <Key frame="239" value="0.090296" />
                                        <Key frame="251" value="26.4" />
                                        <Key frame="262" value="48.7823" />
                                        <Key frame="272" value="4.3" />
                                        <Key frame="282" value="0.090296" />
                                        <Key frame="294" value="26.4" />
                                        <Key frame="303" value="48.7823" />
                                        <Key frame="313" value="4.3" />
                                        <Key frame="323" value="0.090296" />
                                        <Key frame="335" value="26.4" />
                                        <Key frame="345" value="48.7823" />
                                        <Key frame="355" value="4.3" />
                                        <Key frame="365" value="0.090296" />
                                        <Key frame="377" value="-39.1" />
                                        <Key frame="398" value="-69.349" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                                        <Key frame="21" value="-78.6607" />
                                        <Key frame="32" value="-64.7" />
                                        <Key frame="42" value="-21.1795" />
                                        <Key frame="62" value="-11.5993" />
                                        <Key frame="85" value="-21.1795" />
                                        <Key frame="105" value="-11.5993" />
                                        <Key frame="127" value="-21.1795" />
                                        <Key frame="147" value="-11.5993" />
                                        <Key frame="170" value="-21.1795" />
                                        <Key frame="190" value="-11.5993" />
                                        <Key frame="204" value="-88.5" />
                                        <Key frame="219" value="-7.91266" />
                                        <Key frame="229" value="-75" />
                                        <Key frame="239" value="-14.7682" />
                                        <Key frame="251" value="-83.6" />
                                        <Key frame="262" value="-7.91266" />
                                        <Key frame="272" value="-75" />
                                        <Key frame="282" value="-14.7682" />
                                        <Key frame="294" value="-83.6" />
                                        <Key frame="303" value="-7.91266" />
                                        <Key frame="313" value="-75" />
                                        <Key frame="323" value="-14.7682" />
                                        <Key frame="335" value="-83.6" />
                                        <Key frame="345" value="-7.91266" />
                                        <Key frame="355" value="-75" />
                                        <Key frame="365" value="-14.7682" />
                                        <Key frame="377" value="-83.6" />
                                        <Key frame="398" value="-24.3436" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                                        <Key frame="21" value="6.85315" />
                                        <Key frame="32" value="-83.1" />
                                        <Key frame="42" value="-22.6785" />
                                        <Key frame="62" value="-24.0847" />
                                        <Key frame="85" value="-22.6785" />
                                        <Key frame="105" value="-24.0847" />
                                        <Key frame="127" value="-22.6785" />
                                        <Key frame="147" value="-24.0847" />
                                        <Key frame="170" value="-22.6785" />
                                        <Key frame="190" value="-24.0847" />
                                        <Key frame="219" value="-6.15002" />
                                        <Key frame="239" value="-22.9373" />
                                        <Key frame="262" value="-6.15002" />
                                        <Key frame="282" value="-22.9373" />
                                        <Key frame="303" value="-6.15002" />
                                        <Key frame="323" value="-22.9373" />
                                        <Key frame="345" value="-6.15002" />
                                        <Key frame="365" value="-22.9373" />
                                        <Key frame="398" value="4.74374" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                                        <Key frame="21" value="0.2" />
                                        <Key frame="32" value="0.6" />
                                        <Key frame="42" value="0.2648" />
                                        <Key frame="62" value="0.264" />
                                        <Key frame="85" value="0.2648" />
                                        <Key frame="105" value="0.264" />
                                        <Key frame="127" value="0.2648" />
                                        <Key frame="147" value="0.264" />
                                        <Key frame="170" value="0.2648" />
                                        <Key frame="190" value="0.264" />
                                        <Key frame="204" value="0.13" />
                                        <Key frame="219" value="0.678" />
                                        <Key frame="229" value="0.3" />
                                        <Key frame="239" value="0.6784" />
                                        <Key frame="251" value="0.3" />
                                        <Key frame="262" value="0.678" />
                                        <Key frame="272" value="0.3" />
                                        <Key frame="282" value="0.6784" />
                                        <Key frame="294" value="0.3" />
                                        <Key frame="303" value="0.678" />
                                        <Key frame="313" value="0.3" />
                                        <Key frame="323" value="0.6784" />
                                        <Key frame="335" value="0.3" />
                                        <Key frame="345" value="0.678" />
                                        <Key frame="355" value="0.3" />
                                        <Key frame="365" value="0.6784" />
                                        <Key frame="377" value="0.3" />
                                        <Key frame="398" value="0.2968" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                                        <Key frame="23" value="52.4738" />
                                        <Key frame="44" value="-68.2895" />
                                        <Key frame="64" value="57.0441" />
                                        <Key frame="87" value="-68.2895" />
                                        <Key frame="107" value="57.0441" />
                                        <Key frame="129" value="-68.2895" />
                                        <Key frame="149" value="57.0441" />
                                        <Key frame="172" value="-68.2895" />
                                        <Key frame="192" value="57.0441" />
                                        <Key frame="204" value="69.6" />
                                        <Key frame="217" value="100.106" />
                                        <Key frame="237" value="106.347" />
                                        <Key frame="260" value="100.106" />
                                        <Key frame="280" value="106.347" />
                                        <Key frame="301" value="100.106" />
                                        <Key frame="321" value="106.347" />
                                        <Key frame="343" value="100.106" />
                                        <Key frame="363" value="106.347" />
                                        <Key frame="386" value="67.9" />
                                        <Key frame="396" value="84.3785" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                                        <Key frame="23" value="-15.2956" />
                                        <Key frame="34" value="-38.4" />
                                        <Key frame="44" value="-18.8112" />
                                        <Key frame="54" value="-34.1" />
                                        <Key frame="64" value="18" />
                                        <Key frame="76" value="-34.1" />
                                        <Key frame="87" value="-18.8112" />
                                        <Key frame="97" value="-34.1" />
                                        <Key frame="107" value="18" />
                                        <Key frame="119" value="-34.1" />
                                        <Key frame="129" value="-18.8112" />
                                        <Key frame="139" value="-34.1" />
                                        <Key frame="149" value="18" />
                                        <Key frame="161" value="-34.1" />
                                        <Key frame="172" value="-18.8112" />
                                        <Key frame="182" value="-34.1" />
                                        <Key frame="192" value="18" />
                                        <Key frame="204" value="-9.5" />
                                        <Key frame="217" value="-13.8845" />
                                        <Key frame="237" value="-11.2477" />
                                        <Key frame="260" value="-13.8845" />
                                        <Key frame="280" value="-11.2477" />
                                        <Key frame="301" value="-13.8845" />
                                        <Key frame="321" value="-11.2477" />
                                        <Key frame="343" value="-13.8845" />
                                        <Key frame="363" value="-11.2477" />
                                        <Key frame="378" value="-26.1" />
                                        <Key frame="396" value="-9.40682" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                                        <Key frame="23" value="34.0996" />
                                        <Key frame="34" value="32.5" />
                                        <Key frame="44" value="-48.7823" />
                                        <Key frame="54" value="-4.3" />
                                        <Key frame="64" value="-0.090296" />
                                        <Key frame="76" value="-26.4" />
                                        <Key frame="87" value="-48.7823" />
                                        <Key frame="97" value="-4.3" />
                                        <Key frame="107" value="-0.090296" />
                                        <Key frame="119" value="-26.4" />
                                        <Key frame="129" value="-48.7823" />
                                        <Key frame="139" value="-4.3" />
                                        <Key frame="149" value="-0.090296" />
                                        <Key frame="161" value="-26.4" />
                                        <Key frame="172" value="-48.7823" />
                                        <Key frame="182" value="-4.3" />
                                        <Key frame="192" value="-0.090296" />
                                        <Key frame="204" value="94.9" />
                                        <Key frame="217" value="21.7996" />
                                        <Key frame="237" value="35.4228" />
                                        <Key frame="260" value="21.7996" />
                                        <Key frame="280" value="35.4228" />
                                        <Key frame="301" value="21.7996" />
                                        <Key frame="321" value="35.4228" />
                                        <Key frame="343" value="21.7996" />
                                        <Key frame="363" value="35.4228" />
                                        <Key frame="378" value="90.5" />
                                        <Key frame="386" value="59.2" />
                                        <Key frame="396" value="69.3442" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                                        <Key frame="23" value="77.1713" />
                                        <Key frame="34" value="64.2" />
                                        <Key frame="44" value="7.91266" />
                                        <Key frame="54" value="75" />
                                        <Key frame="64" value="14.7682" />
                                        <Key frame="76" value="83.6" />
                                        <Key frame="87" value="7.91266" />
                                        <Key frame="97" value="75" />
                                        <Key frame="107" value="14.7682" />
                                        <Key frame="119" value="83.6" />
                                        <Key frame="129" value="7.91266" />
                                        <Key frame="139" value="75" />
                                        <Key frame="149" value="14.7682" />
                                        <Key frame="161" value="83.6" />
                                        <Key frame="172" value="7.91266" />
                                        <Key frame="182" value="75" />
                                        <Key frame="192" value="14.7682" />
                                        <Key frame="204" value="88.5" />
                                        <Key frame="217" value="21.1795" />
                                        <Key frame="237" value="11.5993" />
                                        <Key frame="260" value="21.1795" />
                                        <Key frame="280" value="11.5993" />
                                        <Key frame="301" value="21.1795" />
                                        <Key frame="321" value="11.5993" />
                                        <Key frame="343" value="21.1795" />
                                        <Key frame="363" value="11.5993" />
                                        <Key frame="378" value="47.1" />
                                        <Key frame="386" value="50.8" />
                                        <Key frame="396" value="24.6121" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                                        <Key frame="23" value="-23.03" />
                                        <Key frame="34" value="79.8" />
                                        <Key frame="44" value="6.15002" />
                                        <Key frame="64" value="22.9373" />
                                        <Key frame="87" value="6.15002" />
                                        <Key frame="107" value="22.9373" />
                                        <Key frame="129" value="6.15002" />
                                        <Key frame="149" value="22.9373" />
                                        <Key frame="172" value="6.15002" />
                                        <Key frame="192" value="22.9373" />
                                        <Key frame="217" value="22.6785" />
                                        <Key frame="237" value="24.0847" />
                                        <Key frame="260" value="22.6785" />
                                        <Key frame="280" value="24.0847" />
                                        <Key frame="301" value="22.6785" />
                                        <Key frame="321" value="24.0847" />
                                        <Key frame="343" value="22.6785" />
                                        <Key frame="363" value="24.0847" />
                                        <Key frame="396" value="6.2379" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                                        <Key frame="23" value="0.2" />
                                        <Key frame="34" value="0.5" />
                                        <Key frame="44" value="0.678" />
                                        <Key frame="54" value="0.3" />
                                        <Key frame="64" value="0.6784" />
                                        <Key frame="76" value="0.3" />
                                        <Key frame="87" value="0.678" />
                                        <Key frame="97" value="0.3" />
                                        <Key frame="107" value="0.6784" />
                                        <Key frame="119" value="0.3" />
                                        <Key frame="129" value="0.678" />
                                        <Key frame="139" value="0.3" />
                                        <Key frame="149" value="0.6784" />
                                        <Key frame="161" value="0.3" />
                                        <Key frame="172" value="0.678" />
                                        <Key frame="182" value="0.3" />
                                        <Key frame="192" value="0.6784" />
                                        <Key frame="204" value="0.13" />
                                        <Key frame="217" value="0.2648" />
                                        <Key frame="237" value="0.264" />
                                        <Key frame="260" value="0.2648" />
                                        <Key frame="280" value="0.264" />
                                        <Key frame="301" value="0.2648" />
                                        <Key frame="321" value="0.264" />
                                        <Key frame="343" value="0.2648" />
                                        <Key frame="363" value="0.264" />
                                        <Key frame="386" value="0.24" />
                                        <Key frame="396" value="0.2976" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                                        <Key frame="18" value="-25.3983" />
                                        <Key frame="40" value="-21.3553" />
                                        <Key frame="60" value="-20.4764" />
                                        <Key frame="83" value="-21.3553" />
                                        <Key frame="103" value="-20.4764" />
                                        <Key frame="125" value="-21.3553" />
                                        <Key frame="145" value="-20.4764" />
                                        <Key frame="168" value="-21.3553" />
                                        <Key frame="188" value="-20.4764" />
                                        <Key frame="215" value="-21.3553" />
                                        <Key frame="235" value="-20.4764" />
                                        <Key frame="258" value="-21.3553" />
                                        <Key frame="278" value="-20.4764" />
                                        <Key frame="299" value="-21.3553" />
                                        <Key frame="319" value="-20.4764" />
                                        <Key frame="341" value="-21.3553" />
                                        <Key frame="361" value="-20.4764" />
                                        <Key frame="394" value="-9.75358" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                                        <Key frame="18" value="0.266079" />
                                        <Key frame="40" value="-8.25942" />
                                        <Key frame="60" value="18.8991" />
                                        <Key frame="83" value="-8.25942" />
                                        <Key frame="103" value="18.8991" />
                                        <Key frame="125" value="-8.25942" />
                                        <Key frame="145" value="18.8991" />
                                        <Key frame="168" value="-8.25942" />
                                        <Key frame="188" value="18.8991" />
                                        <Key frame="215" value="17.0486" />
                                        <Key frame="235" value="-8.08844" />
                                        <Key frame="258" value="17.0486" />
                                        <Key frame="278" value="-8.08844" />
                                        <Key frame="299" value="17.0486" />
                                        <Key frame="319" value="-8.08844" />
                                        <Key frame="341" value="17.0486" />
                                        <Key frame="361" value="-8.08844" />
                                        <Key frame="394" value="5.89115" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                                        <Key frame="18" value="-8.78677" />
                                        <Key frame="40" value="10.6373" />
                                        <Key frame="60" value="8.44001" />
                                        <Key frame="83" value="10.6373" />
                                        <Key frame="103" value="8.44001" />
                                        <Key frame="125" value="10.6373" />
                                        <Key frame="145" value="8.44001" />
                                        <Key frame="168" value="10.6373" />
                                        <Key frame="188" value="8.44001" />
                                        <Key frame="215" value="5.79845" />
                                        <Key frame="235" value="14.8513" />
                                        <Key frame="258" value="5.79845" />
                                        <Key frame="278" value="14.8513" />
                                        <Key frame="299" value="5.79845" />
                                        <Key frame="319" value="14.8513" />
                                        <Key frame="341" value="5.79845" />
                                        <Key frame="361" value="14.8513" />
                                        <Key frame="394" value="8.00056" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                                        <Key frame="18" value="23.201" />
                                        <Key frame="40" value="-5.18802" />
                                        <Key frame="60" value="-4.57277" />
                                        <Key frame="83" value="-5.18802" />
                                        <Key frame="103" value="-4.57277" />
                                        <Key frame="125" value="-5.18802" />
                                        <Key frame="145" value="-4.57277" />
                                        <Key frame="168" value="-5.18802" />
                                        <Key frame="188" value="-4.57277" />
                                        <Key frame="215" value="-5.18321" />
                                        <Key frame="235" value="-5.18321" />
                                        <Key frame="258" value="-5.18321" />
                                        <Key frame="278" value="-5.18321" />
                                        <Key frame="299" value="-5.18321" />
                                        <Key frame="319" value="-5.18321" />
                                        <Key frame="341" value="-5.18321" />
                                        <Key frame="361" value="-5.18321" />
                                        <Key frame="394" value="-4.48488" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                                        <Key frame="18" value="-2.63916" />
                                        <Key frame="40" value="2.54646" />
                                        <Key frame="60" value="9.22623" />
                                        <Key frame="83" value="2.54646" />
                                        <Key frame="103" value="9.22623" />
                                        <Key frame="125" value="2.54646" />
                                        <Key frame="145" value="9.22623" />
                                        <Key frame="168" value="2.54646" />
                                        <Key frame="188" value="9.22623" />
                                        <Key frame="215" value="5.27591" />
                                        <Key frame="235" value="4.74856" />
                                        <Key frame="258" value="5.27591" />
                                        <Key frame="278" value="4.74856" />
                                        <Key frame="299" value="5.27591" />
                                        <Key frame="319" value="4.74856" />
                                        <Key frame="341" value="5.27591" />
                                        <Key frame="361" value="4.74856" />
                                        <Key frame="394" value="5.00743" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                                        <Key frame="18" value="-1.0523" />
                                        <Key frame="40" value="3.60597" />
                                        <Key frame="60" value="-14.2361" />
                                        <Key frame="83" value="3.60597" />
                                        <Key frame="103" value="-14.2361" />
                                        <Key frame="125" value="3.60597" />
                                        <Key frame="145" value="-14.2361" />
                                        <Key frame="168" value="3.60597" />
                                        <Key frame="188" value="-14.2361" />
                                        <Key frame="215" value="-15.1198" />
                                        <Key frame="235" value="5.18321" />
                                        <Key frame="258" value="-15.1198" />
                                        <Key frame="278" value="5.18321" />
                                        <Key frame="299" value="-15.1198" />
                                        <Key frame="319" value="5.18321" />
                                        <Key frame="341" value="-15.1198" />
                                        <Key frame="361" value="5.18321" />
                                        <Key frame="394" value="-6.94104" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                                        <Key frame="18" value="-6.85315" />
                                        <Key frame="40" value="-17.0486" />
                                        <Key frame="60" value="8.08844" />
                                        <Key frame="83" value="-17.0486" />
                                        <Key frame="103" value="8.08844" />
                                        <Key frame="125" value="-17.0486" />
                                        <Key frame="145" value="8.08844" />
                                        <Key frame="168" value="-17.0486" />
                                        <Key frame="188" value="8.08844" />
                                        <Key frame="215" value="8.25942" />
                                        <Key frame="235" value="-18.8991" />
                                        <Key frame="258" value="8.25942" />
                                        <Key frame="278" value="-18.8991" />
                                        <Key frame="299" value="8.25942" />
                                        <Key frame="319" value="-18.8991" />
                                        <Key frame="341" value="8.25942" />
                                        <Key frame="361" value="-18.8991" />
                                        <Key frame="394" value="-5.53478" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                                        <Key frame="18" value="-10.1978" />
                                        <Key frame="40" value="5.79845" />
                                        <Key frame="60" value="14.8513" />
                                        <Key frame="83" value="5.79845" />
                                        <Key frame="103" value="14.8513" />
                                        <Key frame="125" value="5.79845" />
                                        <Key frame="145" value="14.8513" />
                                        <Key frame="168" value="5.79845" />
                                        <Key frame="188" value="14.8513" />
                                        <Key frame="215" value="10.6373" />
                                        <Key frame="235" value="8.44001" />
                                        <Key frame="258" value="10.6373" />
                                        <Key frame="278" value="8.44001" />
                                        <Key frame="299" value="10.6373" />
                                        <Key frame="319" value="8.44001" />
                                        <Key frame="341" value="10.6373" />
                                        <Key frame="361" value="8.44001" />
                                        <Key frame="394" value="7.55628" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                                        <Key frame="18" value="24.4363" />
                                        <Key frame="40" value="-5.18321" />
                                        <Key frame="60" value="-5.18321" />
                                        <Key frame="83" value="-5.18321" />
                                        <Key frame="103" value="-5.18321" />
                                        <Key frame="125" value="-5.18321" />
                                        <Key frame="145" value="-5.18321" />
                                        <Key frame="168" value="-5.18321" />
                                        <Key frame="188" value="-5.18321" />
                                        <Key frame="215" value="-5.18802" />
                                        <Key frame="235" value="-4.57277" />
                                        <Key frame="258" value="-5.18802" />
                                        <Key frame="278" value="-4.57277" />
                                        <Key frame="299" value="-5.18802" />
                                        <Key frame="319" value="-4.57277" />
                                        <Key frame="341" value="-5.18802" />
                                        <Key frame="361" value="-4.57277" />
                                        <Key frame="394" value="-5.2711" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                                        <Key frame="18" value="-2.98591" />
                                        <Key frame="40" value="5.27591" />
                                        <Key frame="60" value="4.74856" />
                                        <Key frame="83" value="5.27591" />
                                        <Key frame="103" value="4.74856" />
                                        <Key frame="125" value="5.27591" />
                                        <Key frame="145" value="4.74856" />
                                        <Key frame="168" value="5.27591" />
                                        <Key frame="188" value="4.74856" />
                                        <Key frame="215" value="2.54646" />
                                        <Key frame="235" value="9.22623" />
                                        <Key frame="258" value="2.54646" />
                                        <Key frame="278" value="9.22623" />
                                        <Key frame="299" value="2.54646" />
                                        <Key frame="319" value="9.22623" />
                                        <Key frame="341" value="2.54646" />
                                        <Key frame="361" value="9.22623" />
                                        <Key frame="394" value="5.3638" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                                        <Key frame="18" value="5.53958" />
                                        <Key frame="40" value="15.1198" />
                                        <Key frame="60" value="-5.18321" />
                                        <Key frame="83" value="15.1198" />
                                        <Key frame="103" value="-5.18321" />
                                        <Key frame="125" value="15.1198" />
                                        <Key frame="145" value="-5.18321" />
                                        <Key frame="168" value="15.1198" />
                                        <Key frame="188" value="-5.18321" />
                                        <Key frame="215" value="-3.60597" />
                                        <Key frame="235" value="14.2361" />
                                        <Key frame="258" value="-3.60597" />
                                        <Key frame="278" value="14.2361" />
                                        <Key frame="299" value="-3.60597" />
                                        <Key frame="319" value="14.2361" />
                                        <Key frame="341" value="-3.60597" />
                                        <Key frame="361" value="14.2361" />
                                        <Key frame="394" value="6.85796" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                                        <Key frame="40" value="-21.3553" />
                                        <Key frame="83" value="-21.3553" />
                                        <Key frame="125" value="-21.3553" />
                                        <Key frame="168" value="-21.3553" />
                                        <Key frame="215" value="-21.3553" />
                                        <Key frame="258" value="-21.3553" />
                                        <Key frame="299" value="-21.3553" />
                                        <Key frame="341" value="-21.3553" />
                                        <Key frame="394" value="-9.75358" />
                                      </ActuatorCurve>
                                    </ActuatorList>
                                  </Timeline>
                                  <Resource name="Standing" type="Lock" timeout="1" />
                                  <Resource name="All motors" type="Lock" timeout="1" />
                                </Box>
                                <Box name="Guessing" id="15" localization="8" tooltip="" x="1382" y="225">
                                  <bitmap>media/images/box/box-diagram.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Input name="InitialGuess" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                  <Timeline enable="0">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                          <Box name="Counter" id="11" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="682" y="493">
                                            <bitmap>media/images/box/loop.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.onInput_onInit()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()
        self.onReinitialized()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                            <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                            <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                            <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                            <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                            <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                            <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="5" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                          </Box>
                                          <Box name="Switch Case" id="13" localization="8" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." plugin="dispatcher_plugin" x="904" y="323">
                                            <bitmap>media/images/box/interaction/choice.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
		  GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
		  GeneratedClass.__init__( self )

	def onInput_onStart(self, p):
		p = self.typeConversion(p)
		if(p == self.typeConversion(0)):
			self.output_1(p)
		elif(p == self.typeConversion(1)):
			self.output_2(p)
		elif(p == self.typeConversion(2)):
			self.output_3(p)
		else:
			self.onDefault()

	def typeConversion(self, p):
		try:
			p = float(p)
			pint = int(p)
			if( p == pint ):
				p = pint
		except:
			p = str(p)
		return p]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <keywords>
                                                <keyword>0</keyword>
                                                <keyword>1</keyword>
                                                <keyword>2</keyword>
                                                <keyword></keyword>
                                              </keywords>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" />
                                            <Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" />
                                            <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
                                            <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
                                            <Output name="output_3" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" />
                                          </Box>
                                          <Box name="Animated Say" id="14" localization="8" tooltip="Say some text with animations. The text can be localized." x="555" y="341">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="95" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Parameter name="Text" inherits_from_parent="0" content_type="5" value="not quite" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                                            <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                                              <Choice value="disabled" />
                                              <Choice value="random" />
                                              <Choice value="contextual" />
                                            </Parameter>
                                            <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Animated Say (1)" id="12" localization="8" tooltip="Say some text with animations. The text can be localized." x="1638" y="361">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Turn that frown upside down No Ell" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                                            <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                                              <Choice value="disabled" />
                                              <Choice value="random" />
                                              <Choice value="contextual" />
                                            </Parameter>
                                            <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Tactile Head" id="6" localization="8" tooltip="Detect touch on head tactile sensor." x="1021" y="673">
                                            <bitmap>media/images/box/sensors/tactileHead.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
            self.onStopped() #~ activate output of the box
        pass]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Input name="FrontTactilTouched" type="0" type_size="1" nature="4" stm_value_name="FrontTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" />
                                            <Input name="MiddleTactilTouched" type="0" type_size="1" nature="4" stm_value_name="MiddleTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="5" />
                                            <Input name="RearTactilTouched" type="0" type_size="1" nature="4" stm_value_name="RearTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="6" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="7" />
                                            <Output name="frontTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The front tactile head sensor was touched." id="8" />
                                            <Output name="middleTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The middle tactile head sensor was touched." id="9" />
                                            <Output name="rearTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The rear tactile head sensor was touched." id="10" />
                                            <Timeline enable="0">
                                              <BehaviorLayer name="behavior_layer1">
                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                  <Diagram>
                                                    <Box name="If &gt; 0" id="1" localization="8" tooltip="Transmit only if value is &gt; 0." x="260" y="17">
                                                      <bitmap>media/images/box/box-diagram.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                    </Box>
                                                    <Box name="If &gt; 0" id="2" localization="8" tooltip="Transmit only if value is &gt; 0." x="256" y="119">
                                                      <bitmap>media/images/box/box-diagram.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                    </Box>
                                                    <Box name="If &gt; 0" id="3" localization="8" tooltip="Transmit only if value is &gt; 0." x="261" y="223">
                                                      <bitmap>media/images/box/box-diagram.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                    </Box>
                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                    <Link inputowner="0" indexofinput="8" outputowner="1" indexofoutput="4" />
                                                    <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="5" />
                                                    <Link inputowner="0" indexofinput="9" outputowner="2" indexofoutput="4" />
                                                    <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="6" />
                                                    <Link inputowner="0" indexofinput="10" outputowner="3" indexofoutput="4" />
                                                  </Diagram>
                                                </BehaviorKeyframe>
                                              </BehaviorLayer>
                                            </Timeline>
                                            <Resource name="Head-sequence" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Animated Say (2)" id="5" localization="8" tooltip="Say some text with animations. The text can be localized." x="1075" y="858">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Parameter name="Text" inherits_from_parent="0" content_type="5" value="If you think it was a college student on a thursday, touch the front of my head. If you think it is a club or disco, press the middle of my head, if you think its jake from state farm, press the back of my head" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                                            <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                                              <Choice value="disabled" />
                                              <Choice value="random" />
                                              <Choice value="contextual" />
                                            </Parameter>
                                            <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Animated Say (3)" id="8" localization="8" tooltip="Say some text with animations. The text can be localized." x="1633" y="621">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Congrats! You guessed it right" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                                            <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                                              <Choice value="disabled" />
                                              <Choice value="random" />
                                              <Choice value="contextual" />
                                            </Parameter>
                                            <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Link inputowner="13" indexofinput="2" outputowner="11" indexofoutput="4" />
                                          <Link inputowner="11" indexofinput="2" outputowner="14" indexofoutput="4" />
                                          <Link inputowner="11" indexofinput="3" outputowner="0" indexofoutput="2" />
                                          <Link inputowner="12" indexofinput="2" outputowner="13" indexofoutput="6" />
                                          <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="4" />
                                          <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="4" />
                                          <Link inputowner="6" indexofinput="2" outputowner="13" indexofoutput="4" />
                                          <Link inputowner="5" indexofinput="2" outputowner="13" indexofoutput="4" />
                                          <Link inputowner="6" indexofinput="2" outputowner="13" indexofoutput="5" />
                                          <Link inputowner="5" indexofinput="2" outputowner="13" indexofoutput="5" />
                                          <Link inputowner="0" indexofinput="5" outputowner="8" indexofoutput="4" />
                                          <Link inputowner="0" indexofinput="5" outputowner="12" indexofoutput="4" />
                                          <Link inputowner="8" indexofinput="2" outputowner="6" indexofoutput="9" />
                                          <Link inputowner="14" indexofinput="2" outputowner="6" indexofoutput="8" />
                                          <Link inputowner="14" indexofinput="2" outputowner="6" indexofoutput="10" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                  </Timeline>
                                </Box>
                                <Link inputowner="16" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="1" indexofinput="3" outputowner="16" indexofoutput="4" />
                                <Link inputowner="15" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="15" indexofinput="4" outputowner="1" indexofoutput="4" />
                                <Link inputowner="0" indexofinput="4" outputowner="15" indexofoutput="5" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                        </Timeline>
                      </Box>
                      <Box name="Driving/Car" id="5" localization="8" tooltip="" x="769" y="164">
                        <bitmap>media/images/box/box-diagram.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="0">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram>
                                <Box name="Timeline" id="1" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="311" y="115">
                                  <bitmap>media/images/box/movement/move.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Timeline enable="1" fps="2" start_frame="1" end_frame="-1" size="13">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram />
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                    <ActuatorList model="nao">
                                      <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                                        <Key frame="3" value="-16.6139" />
                                        <Key frame="4" value="-12.2194" />
                                        <Key frame="5" value="-12.2194" />
                                        <Key frame="7" value="-16.6139" />
                                        <Key frame="8" value="-12.2194" />
                                        <Key frame="9" value="-12.2194" />
                                        <Key frame="11" value="-16.6139" />
                                        <Key frame="12" value="-12.2194" />
                                        <Key frame="13" value="-12.2194" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                                        <Key frame="3" value="-1.05711" />
                                        <Key frame="4" value="-0.705531" />
                                        <Key frame="5" value="-0.705531" />
                                        <Key frame="7" value="-1.05711" />
                                        <Key frame="8" value="-0.705531" />
                                        <Key frame="9" value="-0.705531" />
                                        <Key frame="11" value="-1.05711" />
                                        <Key frame="12" value="-0.705531" />
                                        <Key frame="13" value="-0.705531" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                                        <Key frame="3" value="4.56796" />
                                        <Key frame="4" value="5.00743" />
                                        <Key frame="5" value="4.91954" />
                                        <Key frame="7" value="4.56796" />
                                        <Key frame="8" value="5.00743" />
                                        <Key frame="9" value="4.91954" />
                                        <Key frame="11" value="4.56796" />
                                        <Key frame="12" value="5.00743" />
                                        <Key frame="13" value="4.91954" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                                        <Key frame="3" value="-5.97423" />
                                        <Key frame="4" value="-6.67737" />
                                        <Key frame="5" value="-6.67737" />
                                        <Key frame="7" value="-5.97423" />
                                        <Key frame="8" value="-6.67737" />
                                        <Key frame="9" value="-6.67737" />
                                        <Key frame="11" value="-5.97423" />
                                        <Key frame="12" value="-6.67737" />
                                        <Key frame="13" value="-6.67737" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                                        <Key frame="3" value="-0.964409" />
                                        <Key frame="4" value="-20.74" />
                                        <Key frame="5" value="-35.8574" />
                                        <Key frame="7" value="-0.964409" />
                                        <Key frame="8" value="-20.74" />
                                        <Key frame="9" value="-35.8574" />
                                        <Key frame="11" value="-0.964409" />
                                        <Key frame="12" value="-20.74" />
                                        <Key frame="13" value="-35.8574" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                                        <Key frame="3" value="-66.888" />
                                        <Key frame="4" value="-63.5481" />
                                        <Key frame="5" value="-61.4387" />
                                        <Key frame="7" value="-66.888" />
                                        <Key frame="8" value="-63.5481" />
                                        <Key frame="9" value="-61.4387" />
                                        <Key frame="11" value="-66.888" />
                                        <Key frame="12" value="-63.5481" />
                                        <Key frame="13" value="-61.4387" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                                        <Key frame="3" value="0.2912" />
                                        <Key frame="4" value="0.2904" />
                                        <Key frame="5" value="0.2872" />
                                        <Key frame="7" value="0.2912" />
                                        <Key frame="8" value="0.2904" />
                                        <Key frame="9" value="0.2872" />
                                        <Key frame="11" value="0.2912" />
                                        <Key frame="12" value="0.2904" />
                                        <Key frame="13" value="0.2872" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                                        <Key frame="3" value="7.56109" />
                                        <Key frame="4" value="7.20952" />
                                        <Key frame="5" value="7.20952" />
                                        <Key frame="7" value="7.56109" />
                                        <Key frame="8" value="7.20952" />
                                        <Key frame="9" value="7.20952" />
                                        <Key frame="11" value="7.56109" />
                                        <Key frame="12" value="7.20952" />
                                        <Key frame="13" value="7.20952" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                                        <Key frame="3" value="6.68218" />
                                        <Key frame="4" value="6.5064" />
                                        <Key frame="5" value="6.59429" />
                                        <Key frame="7" value="6.68218" />
                                        <Key frame="8" value="6.5064" />
                                        <Key frame="9" value="6.59429" />
                                        <Key frame="11" value="6.68218" />
                                        <Key frame="12" value="6.5064" />
                                        <Key frame="13" value="6.59429" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                                        <Key frame="3" value="-9.75358" />
                                        <Key frame="4" value="-9.5778" />
                                        <Key frame="5" value="-9.5778" />
                                        <Key frame="7" value="-9.75358" />
                                        <Key frame="8" value="-9.5778" />
                                        <Key frame="9" value="-9.5778" />
                                        <Key frame="11" value="-9.75358" />
                                        <Key frame="12" value="-9.5778" />
                                        <Key frame="13" value="-9.5778" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                                        <Key frame="3" value="-5.27591" />
                                        <Key frame="4" value="-5.27591" />
                                        <Key frame="5" value="-5.27591" />
                                        <Key frame="7" value="-5.27591" />
                                        <Key frame="8" value="-5.27591" />
                                        <Key frame="9" value="-5.27591" />
                                        <Key frame="11" value="-5.27591" />
                                        <Key frame="12" value="-5.27591" />
                                        <Key frame="13" value="-5.27591" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                                        <Key frame="3" value="-13.7135" />
                                        <Key frame="4" value="-26.282" />
                                        <Key frame="5" value="14.9392" />
                                        <Key frame="7" value="-13.7135" />
                                        <Key frame="8" value="-26.282" />
                                        <Key frame="9" value="14.9392" />
                                        <Key frame="11" value="-13.7135" />
                                        <Key frame="12" value="-26.282" />
                                        <Key frame="13" value="14.9392" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                                        <Key frame="3" value="2.63435" />
                                        <Key frame="4" value="-2.02391" />
                                        <Key frame="5" value="-1.93602" />
                                        <Key frame="7" value="2.63435" />
                                        <Key frame="8" value="-2.02391" />
                                        <Key frame="9" value="-1.93602" />
                                        <Key frame="11" value="2.63435" />
                                        <Key frame="12" value="-2.02391" />
                                        <Key frame="13" value="-1.93602" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                                        <Key frame="3" value="-15.5592" />
                                        <Key frame="4" value="30.3202" />
                                        <Key frame="5" value="-49.5733" />
                                        <Key frame="7" value="-15.5592" />
                                        <Key frame="8" value="30.3202" />
                                        <Key frame="9" value="-49.5733" />
                                        <Key frame="11" value="-15.5592" />
                                        <Key frame="12" value="30.3202" />
                                        <Key frame="13" value="-49.5733" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                                        <Key frame="3" value="4.57277" />
                                        <Key frame="4" value="4.48488" />
                                        <Key frame="5" value="4.74855" />
                                        <Key frame="7" value="4.57277" />
                                        <Key frame="8" value="4.48488" />
                                        <Key frame="9" value="4.74855" />
                                        <Key frame="11" value="4.57277" />
                                        <Key frame="12" value="4.48488" />
                                        <Key frame="13" value="4.74855" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                                        <Key frame="3" value="5.97904" />
                                        <Key frame="4" value="6.06693" />
                                        <Key frame="5" value="6.24271" />
                                        <Key frame="7" value="5.97904" />
                                        <Key frame="8" value="6.06693" />
                                        <Key frame="9" value="6.24271" />
                                        <Key frame="11" value="5.97904" />
                                        <Key frame="12" value="6.06693" />
                                        <Key frame="13" value="6.24271" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                                        <Key frame="3" value="10.1978" />
                                        <Key frame="4" value="52.5617" />
                                        <Key frame="5" value="44.2119" />
                                        <Key frame="7" value="10.1978" />
                                        <Key frame="8" value="52.5617" />
                                        <Key frame="9" value="44.2119" />
                                        <Key frame="11" value="10.1978" />
                                        <Key frame="12" value="52.5617" />
                                        <Key frame="13" value="44.2119" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                                        <Key frame="3" value="71.2778" />
                                        <Key frame="4" value="79.9791" />
                                        <Key frame="5" value="38.67" />
                                        <Key frame="7" value="71.2778" />
                                        <Key frame="8" value="79.9791" />
                                        <Key frame="9" value="38.67" />
                                        <Key frame="11" value="71.2778" />
                                        <Key frame="12" value="79.9791" />
                                        <Key frame="13" value="38.67" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                                        <Key frame="3" value="0.3184" />
                                        <Key frame="4" value="0.3192" />
                                        <Key frame="5" value="0.3156" />
                                        <Key frame="7" value="0.3184" />
                                        <Key frame="8" value="0.3192" />
                                        <Key frame="9" value="0.3156" />
                                        <Key frame="11" value="0.3184" />
                                        <Key frame="12" value="0.3192" />
                                        <Key frame="13" value="0.3156" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                                        <Key frame="3" value="7.29261" />
                                        <Key frame="4" value="7.02893" />
                                        <Key frame="5" value="7.3805" />
                                        <Key frame="7" value="7.29261" />
                                        <Key frame="8" value="7.02893" />
                                        <Key frame="9" value="7.3805" />
                                        <Key frame="11" value="7.29261" />
                                        <Key frame="12" value="7.02893" />
                                        <Key frame="13" value="7.3805" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                                        <Key frame="3" value="-6.67737" />
                                        <Key frame="4" value="-6.94104" />
                                        <Key frame="5" value="-6.85315" />
                                        <Key frame="7" value="-6.67737" />
                                        <Key frame="8" value="-6.94104" />
                                        <Key frame="9" value="-6.85315" />
                                        <Key frame="11" value="-6.67737" />
                                        <Key frame="12" value="-6.94104" />
                                        <Key frame="13" value="-6.85315" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                                        <Key frame="3" value="-9.75358" />
                                        <Key frame="4" value="-9.5778" />
                                        <Key frame="5" value="-9.5778" />
                                        <Key frame="7" value="-9.75358" />
                                        <Key frame="8" value="-9.5778" />
                                        <Key frame="9" value="-9.5778" />
                                        <Key frame="11" value="-9.75358" />
                                        <Key frame="12" value="-9.5778" />
                                        <Key frame="13" value="-9.5778" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                                        <Key frame="3" value="-5.09532" />
                                        <Key frame="4" value="-5.44688" />
                                        <Key frame="5" value="-5.53478" />
                                        <Key frame="7" value="-5.09532" />
                                        <Key frame="8" value="-5.44688" />
                                        <Key frame="9" value="-5.53478" />
                                        <Key frame="11" value="-5.09532" />
                                        <Key frame="12" value="-5.44688" />
                                        <Key frame="13" value="-5.53478" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                                        <Key frame="3" value="-6.67737" />
                                        <Key frame="4" value="16.5261" />
                                        <Key frame="5" value="-19.5096" />
                                        <Key frame="7" value="-6.67737" />
                                        <Key frame="8" value="16.5261" />
                                        <Key frame="9" value="-19.5096" />
                                        <Key frame="11" value="-6.67737" />
                                        <Key frame="12" value="16.5261" />
                                        <Key frame="13" value="-19.5096" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                                        <Key frame="3" value="-0.0902951" />
                                        <Key frame="4" value="-0.881327" />
                                        <Key frame="5" value="-13.362" />
                                        <Key frame="7" value="-0.0902951" />
                                        <Key frame="8" value="-0.881327" />
                                        <Key frame="9" value="-13.362" />
                                        <Key frame="11" value="-0.0902951" />
                                        <Key frame="12" value="-0.881327" />
                                        <Key frame="13" value="-13.362" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                                        <Key frame="3" value="20.5643" />
                                        <Key frame="4" value="44.3829" />
                                        <Key frame="5" value="6.50159" />
                                        <Key frame="7" value="20.5643" />
                                        <Key frame="8" value="44.3829" />
                                        <Key frame="9" value="6.50159" />
                                        <Key frame="11" value="20.5643" />
                                        <Key frame="12" value="44.3829" />
                                        <Key frame="13" value="6.50159" />
                                      </ActuatorCurve>
                                    </ActuatorList>
                                  </Timeline>
                                </Box>
                                <Box name="Play Sound" id="2" localization="8" tooltip="Play a sound file. Select the file in parameters. The format of the file can be wav or ogg (on virtual robot) and also mp3 (on a real robot).&#x0A;&#x0A;Note: There can be some delay to play ogg or mp3 (on a robot) files. We advise you to use wav if&#x0A;you want a fast play of the file." x="352" y="307">
                                  <bitmap>media/images/box/interaction/play_music.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Starts the music." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops the music." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                  <Parameter name="File name" inherits_from_parent="0" content_type="4" value="/../Car driving sound effects.mp3" default_value="" tooltip="Name of the file you want to play.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="5" />
                                  <Parameter name="Begin position (s)" inherits_from_parent="0" content_type="2" value="15" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="6" />
                                  <Parameter name="Volume (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="7" />
                                  <Parameter name="Balance L/R" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="8" />
                                  <Parameter name="Play in loop" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="9" />
                                  <Timeline enable="0">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                          <Box name="Play Sound File" id="2" localization="8" tooltip="Play the sound." x="442" y="70">
                                            <bitmap>media/images/box/interaction/play_music.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.player = self.session().service('ALAudioPlayer')
        self.playerStop = self.session().service('ALAudioPlayer') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.playerStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            if (self.getParameter("Play in loop")) :
               id = self.player.pCall("playFileInLoop",p,self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            else :
               id = self.player.pCall("playFileFromPosition",p,self.getParameter("Begin position (s)"),self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            self.ids.append(id)
            self.player.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Begin position (s)" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="5" />
                                            <Parameter name="Volume (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="6" />
                                            <Parameter name="Balance L/R" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="7" />
                                            <Parameter name="Play in loop" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="8" />
                                          </Box>
                                          <Box name="Get Attached File" id="1" localization="8" tooltip="Use this box to choose an attached file in its parameters. The filename will be sent on&#x0A;the output when the input is stimulated." x="216" y="71">
                                            <bitmap>media/images/box/folder.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        pass

    def onInput_onStart(self):
        self.onStopped(self.behaviorAbsolutePath() + self.getParameter("File name"))]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the filepath on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The filepath of the selected resource file." id="3" />
                                            <Parameter name="File name" inherits_from_parent="1" content_type="4" value="" default_value="" tooltip="Name of the file which is going to be sent on the box output.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="4" />
                                          </Box>
                                          <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                          <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                          <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                  </Timeline>
                                  <Resource name="Audio player" type="Lock" timeout="0" />
                                </Box>
                                <Box name="Guessing" id="15" localization="8" tooltip="" x="941" y="144">
                                  <bitmap>media/images/box/box-diagram.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Input name="InitialGuess" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                  <Timeline enable="0">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                          <Box name="Counter" id="11" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="682" y="493">
                                            <bitmap>media/images/box/loop.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.onInput_onInit()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()
        self.onReinitialized()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                            <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                            <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                            <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                            <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                            <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                            <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="5" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                          </Box>
                                          <Box name="Switch Case" id="13" localization="8" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." plugin="dispatcher_plugin" x="904" y="323">
                                            <bitmap>media/images/box/interaction/choice.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
		  GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
		  GeneratedClass.__init__( self )

	def onInput_onStart(self, p):
		p = self.typeConversion(p)
		if(p == self.typeConversion(0)):
			self.output_1(p)
		elif(p == self.typeConversion(1)):
			self.output_2(p)
		elif(p == self.typeConversion(2)):
			self.output_3(p)
		else:
			self.onDefault()

	def typeConversion(self, p):
		try:
			p = float(p)
			pint = int(p)
			if( p == pint ):
				p = pint
		except:
			p = str(p)
		return p]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <keywords>
                                                <keyword>0</keyword>
                                                <keyword>1</keyword>
                                                <keyword>2</keyword>
                                                <keyword></keyword>
                                              </keywords>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" />
                                            <Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" />
                                            <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
                                            <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
                                            <Output name="output_3" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" />
                                          </Box>
                                          <Box name="Animated Say" id="14" localization="8" tooltip="Say some text with animations. The text can be localized." x="555" y="341">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="95" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Parameter name="Text" inherits_from_parent="0" content_type="5" value="not quite" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                                            <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                                              <Choice value="disabled" />
                                              <Choice value="random" />
                                              <Choice value="contextual" />
                                            </Parameter>
                                            <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Animated Say (1)" id="12" localization="8" tooltip="Say some text with animations. The text can be localized." x="1638" y="361">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Turn that frown upside down No Ell" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                                            <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                                              <Choice value="disabled" />
                                              <Choice value="random" />
                                              <Choice value="contextual" />
                                            </Parameter>
                                            <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Tactile Head" id="6" localization="8" tooltip="Detect touch on head tactile sensor." x="1021" y="673">
                                            <bitmap>media/images/box/sensors/tactileHead.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
            self.onStopped() #~ activate output of the box
        pass]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Input name="FrontTactilTouched" type="0" type_size="1" nature="4" stm_value_name="FrontTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" />
                                            <Input name="MiddleTactilTouched" type="0" type_size="1" nature="4" stm_value_name="MiddleTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="5" />
                                            <Input name="RearTactilTouched" type="0" type_size="1" nature="4" stm_value_name="RearTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="6" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="7" />
                                            <Output name="frontTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The front tactile head sensor was touched." id="8" />
                                            <Output name="middleTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The middle tactile head sensor was touched." id="9" />
                                            <Output name="rearTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The rear tactile head sensor was touched." id="10" />
                                            <Timeline enable="0">
                                              <BehaviorLayer name="behavior_layer1">
                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                  <Diagram>
                                                    <Box name="If &gt; 0" id="1" localization="8" tooltip="Transmit only if value is &gt; 0." x="260" y="17">
                                                      <bitmap>media/images/box/box-diagram.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                    </Box>
                                                    <Box name="If &gt; 0" id="2" localization="8" tooltip="Transmit only if value is &gt; 0." x="256" y="119">
                                                      <bitmap>media/images/box/box-diagram.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                    </Box>
                                                    <Box name="If &gt; 0" id="3" localization="8" tooltip="Transmit only if value is &gt; 0." x="261" y="223">
                                                      <bitmap>media/images/box/box-diagram.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                    </Box>
                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                    <Link inputowner="0" indexofinput="8" outputowner="1" indexofoutput="4" />
                                                    <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="5" />
                                                    <Link inputowner="0" indexofinput="9" outputowner="2" indexofoutput="4" />
                                                    <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="6" />
                                                    <Link inputowner="0" indexofinput="10" outputowner="3" indexofoutput="4" />
                                                  </Diagram>
                                                </BehaviorKeyframe>
                                              </BehaviorLayer>
                                            </Timeline>
                                            <Resource name="Head-sequence" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Animated Say (2)" id="5" localization="8" tooltip="Say some text with animations. The text can be localized." x="1075" y="858">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Parameter name="Text" inherits_from_parent="0" content_type="5" value="If you think it was a college student on a monday, touch the front of my head. If you think it is a driver trying to avoid traffic, press the middle of my head, if you think its a soccer mom trying to get her kids to practice, press the back of my head" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                                            <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                                              <Choice value="disabled" />
                                              <Choice value="random" />
                                              <Choice value="contextual" />
                                            </Parameter>
                                            <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Animated Say (3)" id="8" localization="8" tooltip="Say some text with animations. The text can be localized." x="1633" y="621">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Congrats! You guessed it right" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                                            <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                                              <Choice value="disabled" />
                                              <Choice value="random" />
                                              <Choice value="contextual" />
                                            </Parameter>
                                            <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Link inputowner="13" indexofinput="2" outputowner="11" indexofoutput="4" />
                                          <Link inputowner="11" indexofinput="2" outputowner="14" indexofoutput="4" />
                                          <Link inputowner="11" indexofinput="3" outputowner="0" indexofoutput="2" />
                                          <Link inputowner="12" indexofinput="2" outputowner="13" indexofoutput="6" />
                                          <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="4" />
                                          <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="4" />
                                          <Link inputowner="6" indexofinput="2" outputowner="13" indexofoutput="4" />
                                          <Link inputowner="5" indexofinput="2" outputowner="13" indexofoutput="4" />
                                          <Link inputowner="6" indexofinput="2" outputowner="13" indexofoutput="5" />
                                          <Link inputowner="5" indexofinput="2" outputowner="13" indexofoutput="5" />
                                          <Link inputowner="0" indexofinput="5" outputowner="8" indexofoutput="4" />
                                          <Link inputowner="0" indexofinput="5" outputowner="12" indexofoutput="4" />
                                          <Link inputowner="8" indexofinput="2" outputowner="6" indexofoutput="9" />
                                          <Link inputowner="14" indexofinput="2" outputowner="6" indexofoutput="8" />
                                          <Link inputowner="14" indexofinput="2" outputowner="6" indexofoutput="10" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                  </Timeline>
                                </Box>
                                <Link inputowner="2" indexofinput="3" outputowner="1" indexofoutput="4" />
                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="15" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="15" indexofinput="4" outputowner="2" indexofoutput="4" />
                                <Link inputowner="0" indexofinput="4" outputowner="15" indexofoutput="5" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                        </Timeline>
                      </Box>
                      <Box name="Eye LEDs" id="6" localization="8" tooltip="Set the LED color of the eyes. Note that you must open the box to enter the color." x="420" y="254">
                        <bitmap>media/images/box/interaction/LED.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                        <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Both" default_value="Both" custom_choice="0" tooltip="Choose the eye where the LED light is set." id="4">
                          <Choice value="Both" />
                          <Choice value="Left" />
                          <Choice value="Right" />
                        </Parameter>
                        <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="5" />
                        <Timeline enable="0">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram>
                                <Box name="Eyes LEDs" id="15" localization="8" tooltip="Set the color of LEDs of robot&apos;s eyes." x="281" y="41">
                                  <bitmap>media/images/box/interaction/LED.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.fadeOps = []
        self.leds = self.session().service("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_color(self, p):
        if( self.getParameter("Side") == "Left" ):
            sGroup = "LeftFaceLeds"
        elif( self.getParameter("Side") == "Right" ):
            sGroup = "RightFaceLeds"
        else:
            sGroup = "FaceLeds"
        fadeOp = self.leds.fadeRGB(sGroup, 256*256*p[0] + 256*p[1] + p[2], self.getParameter("Duration (s)"), _async=True)
        self.fadeOps.append(fadeOp)
        fadeOp.wait()
        self.fadeOps.remove(fadeOp)
        if( self.fadeOps == [] ):
            self.onDone() # activate output of the box]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="color" type="2" type_size="3" nature="2" inner="0" tooltip="Color of robot&apos;s eyes." id="2" />
                                  <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                  <Parameter name="Side" inherits_from_parent="1" content_type="3" value="Both" default_value="Both" custom_choice="0" tooltip="Choose the eye where the LED light is set." id="4">
                                    <Choice value="Both" />
                                    <Choice value="Left" />
                                    <Choice value="Right" />
                                  </Parameter>
                                  <Parameter name="Duration (s)" inherits_from_parent="1" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="5" />
                                </Box>
                                <Box name="Color Edit" id="16" localization="8" tooltip="Transmit a table of number [R,G,B] correponsding to the selected color." plugin="coloredit_plugin" x="105" y="47">
                                  <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped([170, 0, 127])]]>
                                    </content>
                                  </script>
                                  <pluginContent>
                                    <color>#aa007f</color>
                                  </pluginContent>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="To send the color on the output." id="2" />
                                  <Output name="onStopped" type="2" type_size="3" nature="1" inner="0" tooltip="[R,G,B] with R, G and B between 0 and 255." id="3" />
                                </Box>
                                <Link inputowner="15" indexofinput="2" outputowner="16" indexofoutput="3" />
                                <Link inputowner="16" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="0" indexofinput="3" outputowner="15" indexofoutput="3" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                        </Timeline>
                      </Box>
                      <Link inputowner="1" indexofinput="2" outputowner="3" indexofoutput="4" />
                      <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                      <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="4" />
                      <Link inputowner="5" indexofinput="2" outputowner="2" indexofoutput="5" />
                      <Link inputowner="0" indexofinput="4" outputowner="5" indexofoutput="4" />
                      <Link inputowner="0" indexofinput="4" outputowner="4" indexofoutput="4" />
                      <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                      <Link inputowner="6" indexofinput="2" outputowner="6" indexofoutput="3" />
                      <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="2" />
                      <Link inputowner="0" indexofinput="4" outputowner="6" indexofoutput="3" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
              </Timeline>
            </Box>
            <Box name="Animals" id="5" localization="8" tooltip="" x="634" y="204">
              <bitmap>media/images/box/box-diagram.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
              <Timeline enable="0">
                <BehaviorLayer name="behavior_layer1">
                  <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                      <Box name="Animated Say" id="3" localization="8" tooltip="Say some text with animations. The text can be localized." x="131" y="26">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Parameter name="Text" inherits_from_parent="0" content_type="5" value="I am going to imitate a animal!" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                        <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                          <Choice value="disabled" />
                          <Choice value="random" />
                          <Choice value="contextual" />
                        </Parameter>
                        <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Random Int." id="1" localization="8" tooltip="Generate a random integer between a min number and a max number set as&#x0A;parameters.&#x0A;Note that the min and max numbers are included in the range of possible values." x="281" y="32">
                        <bitmap>media/images/box/box-script.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import random

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        # attributes needed in shuffle mode
        self.nMax = 1
        self.nMin = 0
        self.nIndex = self.nMax - self.nMin
        self.aShuffled = []

    def onUnload(self):
         #puts code for box cleanup here
        pass

    def onInput_onStart(self):
        nMax = self.getParameter("Max value")
        nMin = self.getParameter("Min value")
        if( nMin > nMax ):
            temp = nMin
            nMin = nMax
            nMax = temp
        # if shuffle
        if( self.getParameter("Shuffle") ):
            self.nIndex += 1
            if( self.nIndex > self.nMax - self.nMin or nMax != self.nMax or nMin != self.nMin ):
                self.nMax = nMax
                self.nMin = nMin
                self.nIndex = 0
                self.aShuffled = []
                for i in range( nMin, nMax + 1 ):
                    self.aShuffled.insert( random.randint(0, len(self.aShuffled)), i )
            self.output_RandomValue( self.aShuffled[self.nIndex] )
        # if not shuffle
        else:
            self.nIndex = self.nMax - self.nMin
            self.output_RandomValue( random.randint( nMin, nMax ) )]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="Generate a random integer." id="2" />
                        <Output name="output_RandomValue" type="2" type_size="1" nature="2" inner="0" tooltip="The random value obtained." id="3" />
                        <Parameter name="Min value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="1000" tooltip="The minimum value you can get." id="4" />
                        <Parameter name="Max value" inherits_from_parent="0" content_type="1" value="2" default_value="10" min="0" max="1000" tooltip="The maximum number you can get." id="5" />
                        <Parameter name="Shuffle" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="When this option is selected the box will give all the numbers between min and&#x0A;max before giving the same number twice." id="6" />
                      </Box>
                      <Box name="Switch Case" id="2" localization="8" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." plugin="dispatcher_plugin" x="430" y="32">
                        <bitmap>media/images/box/interaction/choice.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
		  GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
		  GeneratedClass.__init__( self )

	def onInput_onStart(self, p):
		p = self.typeConversion(p)
		if(p == self.typeConversion(0)):
			self.output_1(p)
		elif(p == self.typeConversion(1)):
			self.output_2(p)
		elif(p == self.typeConversion(2)):
			self.output_3(p)
		else:
			self.onDefault()

	def typeConversion(self, p):
		try:
			p = float(p)
			pint = int(p)
			if( p == pint ):
				p = pint
		except:
			p = str(p)
		return p]]>
                          </content>
                        </script>
                        <pluginContent>
                          <keywords>
                            <keyword>0</keyword>
                            <keyword>1</keyword>
                            <keyword>2</keyword>
                            <keyword></keyword>
                            <keyword></keyword>
                          </keywords>
                        </pluginContent>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" />
                        <Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" />
                        <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
                        <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
                        <Output name="output_3" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" />
                        <Output name="output_4" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="7" />
                      </Box>
                      <Box name="Gorilla" id="4" localization="8" tooltip="" x="741" y="37">
                        <bitmap>media/images/box/box-diagram.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="0">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram>
                                <Box name="Gorilla" id="6" localization="8" tooltip="ID : #04A 0003&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Gorilla&#x0A;" x="284" y="136">
                                  <bitmap>media/images/box/movement/move.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="268">
                                    <ActuatorList model="">
                                      <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                                        <Key frame="8" value="-9.84929" />
                                        <Key frame="26" value="-21.9" />
                                        <Key frame="42" value="-38.5" />
                                        <Key frame="54" value="-20.4812" />
                                        <Key frame="71" value="-12.8346" />
                                        <Key frame="82" value="-11.4283" />
                                        <Key frame="93" value="-16.6" />
                                        <Key frame="103" value="-13.3263" />
                                        <Key frame="109" value="-16.6" />
                                        <Key frame="115" value="-13.3263" />
                                        <Key frame="120" value="-16.6" />
                                        <Key frame="125" value="-13.3263" />
                                        <Key frame="130" value="-16.6" />
                                        <Key frame="135" value="-13.3263" />
                                        <Key frame="140" value="-16.6" />
                                        <Key frame="145" value="-13.3263" />
                                        <Key frame="150" value="-16.6" />
                                        <Key frame="157" value="-31.7712" />
                                        <Key frame="172" value="-28.1" />
                                        <Key frame="188" value="-38.5" />
                                        <Key frame="198" value="-13.8893" />
                                        <Key frame="211" value="-12.8346" />
                                        <Key frame="229" value="4.7" />
                                        <Key frame="250" value="-8.51502" />
                                        <Key frame="268" value="-10.2843" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                                        <Key frame="8" value="0.524544" />
                                        <Key frame="42" value="-0.266077" />
                                        <Key frame="54" value="-0.266077" />
                                        <Key frame="71" value="0.700723" />
                                        <Key frame="82" value="0.700723" />
                                        <Key frame="93" value="-0.0140832" />
                                        <Key frame="103" value="0.626383" />
                                        <Key frame="109" value="-0.0140832" />
                                        <Key frame="115" value="0.626383" />
                                        <Key frame="120" value="-0.0140832" />
                                        <Key frame="125" value="0.626383" />
                                        <Key frame="130" value="-0.0140832" />
                                        <Key frame="135" value="0.626383" />
                                        <Key frame="140" value="-0.0140832" />
                                        <Key frame="145" value="0.626383" />
                                        <Key frame="150" value="-0.0140832" />
                                        <Key frame="157" value="0" />
                                        <Key frame="172" value="-0.266077" />
                                        <Key frame="188" value="-0.266077" />
                                        <Key frame="198" value="-0.00240423" />
                                        <Key frame="211" value="0.700723" />
                                        <Key frame="250" value="-0.567633" />
                                        <Key frame="268" value="-0.480661" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                                        <Key frame="8" value="5.15662" />
                                        <Key frame="42" value="-47.6346" />
                                        <Key frame="54" value="-50.5723" />
                                        <Key frame="71" value="-15.9987" />
                                        <Key frame="93" value="-5.80326" />
                                        <Key frame="118" value="-17.3171" />
                                        <Key frame="148" value="-17.3171" />
                                        <Key frame="157" value="-21.5359" />
                                        <Key frame="172" value="-50.7159" />
                                        <Key frame="188" value="-50.7159" />
                                        <Key frame="198" value="-15.9987" />
                                        <Key frame="211" value="-11.1647" />
                                        <Key frame="229" value="-2.63916" />
                                        <Key frame="250" value="4.80387" />
                                        <Key frame="268" value="5.11475" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                                        <Key frame="8" value="-7.82207" />
                                        <Key frame="42" value="-1.33228" />
                                        <Key frame="54" value="-0.295102" />
                                        <Key frame="71" value="-4.30429" />
                                        <Key frame="93" value="14.3288" />
                                        <Key frame="118" value="13.6256" />
                                        <Key frame="148" value="13.6256" />
                                        <Key frame="157" value="12.1315" />
                                        <Key frame="172" value="0" />
                                        <Key frame="188" value="0" />
                                        <Key frame="198" value="-4.30429" />
                                        <Key frame="211" value="12.6588" />
                                        <Key frame="229" value="-0.261268" />
                                        <Key frame="250" value="-8.23111" />
                                        <Key frame="268" value="-7.76345" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                                        <Key frame="8" value="-23.8756" />
                                        <Key frame="26" value="-81.1" />
                                        <Key frame="42" value="-12" />
                                        <Key frame="54" value="-12.8091" />
                                        <Key frame="71" value="-30.3" />
                                        <Key frame="84" value="-52.5" />
                                        <Key frame="95" value="-58.8535" />
                                        <Key frame="103" value="-88.4547" />
                                        <Key frame="109" value="-61.6441" />
                                        <Key frame="115" value="-88.4406" />
                                        <Key frame="120" value="-61.6441" />
                                        <Key frame="125" value="-87.9664" />
                                        <Key frame="130" value="-61.504" />
                                        <Key frame="135" value="-88.322" />
                                        <Key frame="140" value="-62.0779" />
                                        <Key frame="145" value="-88.4406" />
                                        <Key frame="150" value="-66.8289" />
                                        <Key frame="159" value="-2.52888" />
                                        <Key frame="172" value="-17.3" />
                                        <Key frame="188" value="-10.5446" />
                                        <Key frame="198" value="-10.4567" />
                                        <Key frame="211" value="-36.4" />
                                        <Key frame="229" value="-38.4321" />
                                        <Key frame="250" value="-25.4784" />
                                        <Key frame="268" value="-23.9847" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                                        <Key frame="8" value="-68.4559" />
                                        <Key frame="26" value="-39.1" />
                                        <Key frame="42" value="-88.2" />
                                        <Key frame="54" value="-65.1716" />
                                        <Key frame="71" value="-60.384" />
                                        <Key frame="84" value="-60.0324" />
                                        <Key frame="95" value="-33.0148" />
                                        <Key frame="103" value="-15.8961" />
                                        <Key frame="109" value="-15.8961" />
                                        <Key frame="115" value="-15.8961" />
                                        <Key frame="120" value="-15.8961" />
                                        <Key frame="125" value="-15.8961" />
                                        <Key frame="130" value="-15.8961" />
                                        <Key frame="135" value="-15.8961" />
                                        <Key frame="140" value="-15.8961" />
                                        <Key frame="145" value="-15.8961" />
                                        <Key frame="150" value="-15.8961" />
                                        <Key frame="159" value="-36.2478" />
                                        <Key frame="172" value="-60.2082" />
                                        <Key frame="188" value="-60.2082" />
                                        <Key frame="198" value="-61.0872" />
                                        <Key frame="211" value="-32.4" />
                                        <Key frame="229" value="-49.7814" />
                                        <Key frame="250" value="-67.7115" />
                                        <Key frame="268" value="-68.2723" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                                        <Key frame="8" value="0.2918" />
                                        <Key frame="26" value="0" />
                                        <Key frame="42" value="0.57" />
                                        <Key frame="54" value="0" />
                                        <Key frame="71" value="0.054" />
                                        <Key frame="82" value="0.0552" />
                                        <Key frame="93" value="0.01456" />
                                        <Key frame="101" value="0.00396501" />
                                        <Key frame="107" value="0.510166" />
                                        <Key frame="113" value="0" />
                                        <Key frame="118" value="0.510166" />
                                        <Key frame="123" value="0.00607498" />
                                        <Key frame="128" value="0.510166" />
                                        <Key frame="133" value="0.00391997" />
                                        <Key frame="138" value="0.510166" />
                                        <Key frame="143" value="0.00728999" />
                                        <Key frame="148" value="0.114844" />
                                        <Key frame="157" value="0.304851" />
                                        <Key frame="172" value="0.0492001" />
                                        <Key frame="188" value="0.0492001" />
                                        <Key frame="198" value="0.054" />
                                        <Key frame="211" value="0.054" />
                                        <Key frame="229" value="0.67" />
                                        <Key frame="250" value="0.33889" />
                                        <Key frame="268" value="0.294559" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                                        <Key frame="8" value="7.07452" />
                                        <Key frame="42" value="-69.1403" />
                                        <Key frame="54" value="-69.892" />
                                        <Key frame="71" value="-88" />
                                        <Key frame="93" value="-87.7135" />
                                        <Key frame="118" value="-73.563" />
                                        <Key frame="148" value="-73.563" />
                                        <Key frame="157" value="-80.9459" />
                                        <Key frame="172" value="-70.3989" />
                                        <Key frame="188" value="-70.3989" />
                                        <Key frame="198" value="-88" />
                                        <Key frame="211" value="-87.4499" />
                                        <Key frame="229" value="-32.2539" />
                                        <Key frame="250" value="5.9767" />
                                        <Key frame="268" value="7.39015" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                                        <Key frame="8" value="5.63552" />
                                        <Key frame="42" value="-18.7117" />
                                        <Key frame="54" value="-21.5989" />
                                        <Key frame="71" value="-18.4549" />
                                        <Key frame="93" value="-15.906" />
                                        <Key frame="118" value="-14.4997" />
                                        <Key frame="148" value="-14.4997" />
                                        <Key frame="157" value="-16.0818" />
                                        <Key frame="172" value="-21.74" />
                                        <Key frame="188" value="-21.74" />
                                        <Key frame="198" value="-18.4549" />
                                        <Key frame="211" value="-18.367" />
                                        <Key frame="229" value="-2.81013" />
                                        <Key frame="250" value="6.20275" />
                                        <Key frame="268" value="6.20348" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                                        <Key frame="8" value="-9.84409" />
                                        <Key frame="42" value="-59.6158" />
                                        <Key frame="54" value="-62.8575" />
                                        <Key frame="71" value="-60.2913" />
                                        <Key frame="93" value="-60.3792" />
                                        <Key frame="118" value="-55.8967" />
                                        <Key frame="148" value="-55.8967" />
                                        <Key frame="157" value="-54.4026" />
                                        <Key frame="172" value="-63.016" />
                                        <Key frame="188" value="-63.016" />
                                        <Key frame="198" value="-60.2913" />
                                        <Key frame="211" value="-61.7855" />
                                        <Key frame="229" value="-29.1777" />
                                        <Key frame="250" value="-10.429" />
                                        <Key frame="268" value="-10.1725" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                                        <Key frame="8" value="-4.79482" />
                                        <Key frame="42" value="115.981" />
                                        <Key frame="54" value="120.804" />
                                        <Key frame="71" value="108.104" />
                                        <Key frame="93" value="112.851" />
                                        <Key frame="118" value="104.765" />
                                        <Key frame="148" value="104.765" />
                                        <Key frame="157" value="110.214" />
                                        <Key frame="172" value="121.04" />
                                        <Key frame="188" value="121.04" />
                                        <Key frame="198" value="108.104" />
                                        <Key frame="211" value="111.708" />
                                        <Key frame="229" value="40.4278" />
                                        <Key frame="250" value="-3.34525" />
                                        <Key frame="268" value="-5.06757" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                                        <Key frame="8" value="84.3432" />
                                        <Key frame="42" value="20.4571" />
                                        <Key frame="54" value="15.7209" />
                                        <Key frame="71" value="17.8986" />
                                        <Key frame="82" value="18.3381" />
                                        <Key frame="93" value="18.7871" />
                                        <Key frame="101" value="-1.06845" />
                                        <Key frame="107" value="19.3434" />
                                        <Key frame="113" value="-1.05474" />
                                        <Key frame="118" value="19.3434" />
                                        <Key frame="123" value="-0.912421" />
                                        <Key frame="128" value="19.2027" />
                                        <Key frame="133" value="-1.24519" />
                                        <Key frame="138" value="19.156" />
                                        <Key frame="143" value="-0.993287" />
                                        <Key frame="148" value="14.5825" />
                                        <Key frame="157" value="30.3155" />
                                        <Key frame="172" value="15.5255" />
                                        <Key frame="188" value="15.5255" />
                                        <Key frame="198" value="16.1408" />
                                        <Key frame="211" value="17.8986" />
                                        <Key frame="229" value="50.8976" />
                                        <Key frame="250" value="80.0169" />
                                        <Key frame="268" value="83.7803" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                                        <Key frame="8" value="10.4273" />
                                        <Key frame="26" value="29.4" />
                                        <Key frame="42" value="-1.93602" />
                                        <Key frame="54" value="-1.48766" />
                                        <Key frame="71" value="-3.34228" />
                                        <Key frame="82" value="-4.39699" />
                                        <Key frame="93" value="40.0449" />
                                        <Key frame="101" value="26.1544" />
                                        <Key frame="107" value="49.3442" />
                                        <Key frame="113" value="26.6014" />
                                        <Key frame="118" value="49.3442" />
                                        <Key frame="123" value="26.4811" />
                                        <Key frame="128" value="48.8986" />
                                        <Key frame="133" value="26.1558" />
                                        <Key frame="138" value="48.8986" />
                                        <Key frame="143" value="26.6014" />
                                        <Key frame="148" value="45.1993" />
                                        <Key frame="157" value="5.45398" />
                                        <Key frame="172" value="-1.93602" />
                                        <Key frame="188" value="-1.93602" />
                                        <Key frame="198" value="-3.1665" />
                                        <Key frame="211" value="-3.34228" />
                                        <Key frame="229" value="23.2414" />
                                        <Key frame="250" value="12.7664" />
                                        <Key frame="268" value="10.3043" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                                        <Key frame="8" value="5.88233" />
                                        <Key frame="26" value="6.8" />
                                        <Key frame="42" value="14.6" />
                                        <Key frame="54" value="39.0438" />
                                        <Key frame="71" value="43.0645" />
                                        <Key frame="82" value="42.0098" />
                                        <Key frame="93" value="-7.37445" />
                                        <Key frame="101" value="-37.3321" />
                                        <Key frame="107" value="-37.3321" />
                                        <Key frame="113" value="-37.3321" />
                                        <Key frame="118" value="-37.3321" />
                                        <Key frame="123" value="-37.3321" />
                                        <Key frame="128" value="-37.3321" />
                                        <Key frame="133" value="-37.3321" />
                                        <Key frame="138" value="-37.3321" />
                                        <Key frame="143" value="-37.3321" />
                                        <Key frame="148" value="-37.3321" />
                                        <Key frame="157" value="14.7929" />
                                        <Key frame="172" value="43.3282" />
                                        <Key frame="188" value="43.3282" />
                                        <Key frame="198" value="43.0645" />
                                        <Key frame="211" value="43.0645" />
                                        <Key frame="229" value="-77.2" />
                                        <Key frame="250" value="-4.16376" />
                                        <Key frame="268" value="5.4059" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                                        <Key frame="8" value="4.95848" />
                                        <Key frame="42" value="-44.1003" />
                                        <Key frame="54" value="-46.9675" />
                                        <Key frame="71" value="-35.9453" />
                                        <Key frame="93" value="-25.3983" />
                                        <Key frame="118" value="-28.1229" />
                                        <Key frame="148" value="-28.1229" />
                                        <Key frame="157" value="-39.1973" />
                                        <Key frame="172" value="-47.1076" />
                                        <Key frame="188" value="-47.1076" />
                                        <Key frame="198" value="-35.9453" />
                                        <Key frame="211" value="-29.705" />
                                        <Key frame="229" value="-8.61098" />
                                        <Key frame="250" value="4.39472" />
                                        <Key frame="268" value="4.73901" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                                        <Key frame="8" value="7.02546" />
                                        <Key frame="42" value="0.244606" />
                                        <Key frame="54" value="-0.740477" />
                                        <Key frame="71" value="-1.57965" />
                                        <Key frame="93" value="-5.53478" />
                                        <Key frame="118" value="-5.00743" />
                                        <Key frame="148" value="-5.00743" />
                                        <Key frame="157" value="-4.65585" />
                                        <Key frame="172" value="-0.788627" />
                                        <Key frame="188" value="-0.788627" />
                                        <Key frame="198" value="-1.57965" />
                                        <Key frame="211" value="-3.95273" />
                                        <Key frame="229" value="0.793436" />
                                        <Key frame="250" value="6.959" />
                                        <Key frame="268" value="7.34719" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                                        <Key frame="8" value="23.6032" />
                                        <Key frame="26" value="81.1" />
                                        <Key frame="42" value="12" />
                                        <Key frame="54" value="5.20832" />
                                        <Key frame="71" value="11.4283" />
                                        <Key frame="84" value="2" />
                                        <Key frame="95" value="47.0903" />
                                        <Key frame="103" value="69.1978" />
                                        <Key frame="109" value="88.4826" />
                                        <Key frame="115" value="69.5741" />
                                        <Key frame="120" value="88.4771" />
                                        <Key frame="125" value="69.7061" />
                                        <Key frame="130" value="88.0315" />
                                        <Key frame="135" value="69.9346" />
                                        <Key frame="140" value="88.0315" />
                                        <Key frame="145" value="69.6311" />
                                        <Key frame="150" value="75.7053" />
                                        <Key frame="159" value="2.56215" />
                                        <Key frame="172" value="7.9" />
                                        <Key frame="188" value="2" />
                                        <Key frame="198" value="2" />
                                        <Key frame="211" value="11.4283" />
                                        <Key frame="229" value="37.0093" />
                                        <Key frame="250" value="24.119" />
                                        <Key frame="268" value="23.7862" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                                        <Key frame="8" value="68.9325" />
                                        <Key frame="26" value="39.1" />
                                        <Key frame="42" value="88.2" />
                                        <Key frame="54" value="87.0433" />
                                        <Key frame="71" value="85.1647" />
                                        <Key frame="84" value="84.11" />
                                        <Key frame="95" value="16.2825" />
                                        <Key frame="103" value="16.2825" />
                                        <Key frame="109" value="16.2825" />
                                        <Key frame="115" value="16.2825" />
                                        <Key frame="120" value="16.2825" />
                                        <Key frame="125" value="16.2825" />
                                        <Key frame="130" value="16.2825" />
                                        <Key frame="135" value="16.2825" />
                                        <Key frame="140" value="16.2825" />
                                        <Key frame="145" value="16.2825" />
                                        <Key frame="150" value="16.2825" />
                                        <Key frame="159" value="33.6513" />
                                        <Key frame="172" value="85.2526" />
                                        <Key frame="188" value="85.2526" />
                                        <Key frame="198" value="84.2858" />
                                        <Key frame="211" value="85.1647" />
                                        <Key frame="229" value="49.7814" />
                                        <Key frame="250" value="67.3553" />
                                        <Key frame="268" value="68.2695" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                                        <Key frame="8" value="0.304283" />
                                        <Key frame="26" value="0" />
                                        <Key frame="42" value="0.57" />
                                        <Key frame="54" value="0" />
                                        <Key frame="71" value="0.07" />
                                        <Key frame="82" value="0.3724" />
                                        <Key frame="93" value="0.00387714" />
                                        <Key frame="101" value="0.410699" />
                                        <Key frame="107" value="0.00173999" />
                                        <Key frame="113" value="0.410699" />
                                        <Key frame="118" value="0.00101498" />
                                        <Key frame="123" value="0.410699" />
                                        <Key frame="128" value="0.00850497" />
                                        <Key frame="133" value="0.410699" />
                                        <Key frame="138" value="0" />
                                        <Key frame="143" value="0.410699" />
                                        <Key frame="148" value="0.0103306" />
                                        <Key frame="157" value="0.157731" />
                                        <Key frame="172" value="0.3744" />
                                        <Key frame="188" value="0.3744" />
                                        <Key frame="198" value="0.3644" />
                                        <Key frame="211" value="0.826" />
                                        <Key frame="229" value="0.67" />
                                        <Key frame="250" value="0.349675" />
                                        <Key frame="268" value="0.306788" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                                        <Key frame="8" value="7.0775" />
                                        <Key frame="42" value="-74.0462" />
                                        <Key frame="54" value="-74.8103" />
                                        <Key frame="71" value="-87.3668" />
                                        <Key frame="93" value="-73.8315" />
                                        <Key frame="118" value="-57.8352" />
                                        <Key frame="148" value="-57.8352" />
                                        <Key frame="157" value="-63.2844" />
                                        <Key frame="172" value="-75.3256" />
                                        <Key frame="188" value="-75.3256" />
                                        <Key frame="198" value="-87.3668" />
                                        <Key frame="211" value="-76.9956" />
                                        <Key frame="229" value="-32.4345" />
                                        <Key frame="250" value="5.88244" />
                                        <Key frame="268" value="7.36624" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                                        <Key frame="8" value="-5.72958" />
                                        <Key frame="42" value="17.907" />
                                        <Key frame="54" value="19.911" />
                                        <Key frame="71" value="15.735" />
                                        <Key frame="93" value="14.7682" />
                                        <Key frame="118" value="15.735" />
                                        <Key frame="148" value="15.735" />
                                        <Key frame="157" value="15.3835" />
                                        <Key frame="172" value="20.4812" />
                                        <Key frame="188" value="20.4812" />
                                        <Key frame="198" value="15.735" />
                                        <Key frame="211" value="15.1198" />
                                        <Key frame="229" value="2.72705" />
                                        <Key frame="250" value="-5.47326" />
                                        <Key frame="268" value="-5.72363" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                                        <Key frame="8" value="-9.84409" />
                                        <Key frame="42" value="-59.6158" />
                                        <Key frame="54" value="-62.8575" />
                                        <Key frame="71" value="-60.2913" />
                                        <Key frame="93" value="-60.3792" />
                                        <Key frame="118" value="-55.8967" />
                                        <Key frame="148" value="-55.8967" />
                                        <Key frame="157" value="-54.4026" />
                                        <Key frame="172" value="-63.016" />
                                        <Key frame="188" value="-63.016" />
                                        <Key frame="198" value="-60.2913" />
                                        <Key frame="211" value="-61.7855" />
                                        <Key frame="229" value="-29.1777" />
                                        <Key frame="250" value="-10.429" />
                                        <Key frame="268" value="-10.1725" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                                        <Key frame="8" value="-4.69973" />
                                        <Key frame="42" value="116.022" />
                                        <Key frame="54" value="120.806" />
                                        <Key frame="71" value="120.59" />
                                        <Key frame="93" value="120.502" />
                                        <Key frame="118" value="104.945" />
                                        <Key frame="148" value="104.945" />
                                        <Key frame="157" value="111.976" />
                                        <Key frame="172" value="121.04" />
                                        <Key frame="188" value="121.04" />
                                        <Key frame="198" value="120.59" />
                                        <Key frame="211" value="116.635" />
                                        <Key frame="229" value="44.6514" />
                                        <Key frame="250" value="-3.23065" />
                                        <Key frame="268" value="-5.06046" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                                        <Key frame="8" value="84.1835" />
                                        <Key frame="42" value="22.2417" />
                                        <Key frame="54" value="22.3605" />
                                        <Key frame="71" value="41.6631" />
                                        <Key frame="82" value="36.829" />
                                        <Key frame="93" value="15.1635" />
                                        <Key frame="101" value="35.0191" />
                                        <Key frame="107" value="14.6072" />
                                        <Key frame="113" value="35.0054" />
                                        <Key frame="118" value="14.6072" />
                                        <Key frame="123" value="34.8631" />
                                        <Key frame="128" value="14.7479" />
                                        <Key frame="133" value="35.1958" />
                                        <Key frame="138" value="14.7946" />
                                        <Key frame="143" value="34.9439" />
                                        <Key frame="148" value="18.314" />
                                        <Key frame="157" value="29.4286" />
                                        <Key frame="172" value="22.5027" />
                                        <Key frame="188" value="22.5027" />
                                        <Key frame="198" value="23.9968" />
                                        <Key frame="211" value="41.6631" />
                                        <Key frame="229" value="75.9202" />
                                        <Key frame="250" value="82.2838" />
                                        <Key frame="268" value="83.8255" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                                        <Key frame="8" value="-10.4935" />
                                        <Key frame="26" value="-29.4" />
                                        <Key frame="42" value="2.98591" />
                                        <Key frame="54" value="2.83221" />
                                        <Key frame="71" value="14.1482" />
                                        <Key frame="82" value="-0.793436" />
                                        <Key frame="93" value="-24.2349" />
                                        <Key frame="101" value="-48.8999" />
                                        <Key frame="107" value="-26.1558" />
                                        <Key frame="113" value="-48.8986" />
                                        <Key frame="118" value="-26.1558" />
                                        <Key frame="123" value="-49.0189" />
                                        <Key frame="128" value="-26.6014" />
                                        <Key frame="133" value="-49.3442" />
                                        <Key frame="138" value="-26.6014" />
                                        <Key frame="143" value="-48.8986" />
                                        <Key frame="148" value="-30.3007" />
                                        <Key frame="157" value="3.86583" />
                                        <Key frame="172" value="2.98591" />
                                        <Key frame="188" value="2.98591" />
                                        <Key frame="198" value="3.68905" />
                                        <Key frame="211" value="14.1482" />
                                        <Key frame="229" value="-37.6671" />
                                        <Key frame="250" value="-14.6104" />
                                        <Key frame="268" value="-10.6301" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                                        <Key frame="8" value="5.67181" />
                                        <Key frame="26" value="-6.8" />
                                        <Key frame="42" value="-14.6" />
                                        <Key frame="54" value="-52.918" />
                                        <Key frame="71" value="-59.593" />
                                        <Key frame="82" value="-67.5033" />
                                        <Key frame="93" value="37.1888" />
                                        <Key frame="101" value="37.1888" />
                                        <Key frame="107" value="37.1888" />
                                        <Key frame="113" value="37.1888" />
                                        <Key frame="118" value="37.1888" />
                                        <Key frame="123" value="37.1888" />
                                        <Key frame="128" value="37.1888" />
                                        <Key frame="133" value="37.1888" />
                                        <Key frame="138" value="37.1888" />
                                        <Key frame="143" value="37.1888" />
                                        <Key frame="148" value="37.1888" />
                                        <Key frame="157" value="-20.1526" />
                                        <Key frame="172" value="-59.593" />
                                        <Key frame="188" value="-59.593" />
                                        <Key frame="198" value="-59.7688" />
                                        <Key frame="211" value="-59.593" />
                                        <Key frame="229" value="77.2" />
                                        <Key frame="250" value="13.6644" />
                                        <Key frame="268" value="5.33957" />
                                      </ActuatorCurve>
                                    </ActuatorList>
                                  </Timeline>
                                  <Resource name="Standing" type="Lock" timeout="1" />
                                  <Resource name="All motors" type="Lock" timeout="1" />
                                </Box>
                                <Box name="Play Sound" id="1" localization="8" tooltip="Play a sound file. Select the file in parameters. The format of the file can be wav or ogg (on virtual robot) and also mp3 (on a real robot).&#x0A;&#x0A;Note: There can be some delay to play ogg or mp3 (on a robot) files. We advise you to use wav if&#x0A;you want a fast play of the file." x="337" y="323">
                                  <bitmap>media/images/box/interaction/play_music.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Starts the music." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops the music." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                  <Parameter name="File name" inherits_from_parent="0" content_type="4" value="/../Gorilla Sounds SOUND EFFECT of Gorilla HQ Audio.mp3" default_value="" tooltip="Name of the file you want to play.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="5" />
                                  <Parameter name="Begin position (s)" inherits_from_parent="0" content_type="2" value="11.7978" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="6" />
                                  <Parameter name="Volume (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="7" />
                                  <Parameter name="Balance L/R" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="8" />
                                  <Parameter name="Play in loop" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="9" />
                                  <Timeline enable="0">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                          <Box name="Play Sound File" id="2" localization="8" tooltip="Play the sound." x="442" y="70">
                                            <bitmap>media/images/box/interaction/play_music.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.player = self.session().service('ALAudioPlayer')
        self.playerStop = self.session().service('ALAudioPlayer') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.playerStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            if (self.getParameter("Play in loop")) :
               id = self.player.pCall("playFileInLoop",p,self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            else :
               id = self.player.pCall("playFileFromPosition",p,self.getParameter("Begin position (s)"),self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            self.ids.append(id)
            self.player.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Begin position (s)" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="5" />
                                            <Parameter name="Volume (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="6" />
                                            <Parameter name="Balance L/R" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="7" />
                                            <Parameter name="Play in loop" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="8" />
                                          </Box>
                                          <Box name="Get Attached File" id="1" localization="8" tooltip="Use this box to choose an attached file in its parameters. The filename will be sent on&#x0A;the output when the input is stimulated." x="216" y="71">
                                            <bitmap>media/images/box/folder.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        pass

    def onInput_onStart(self):
        self.onStopped(self.behaviorAbsolutePath() + self.getParameter("File name"))]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the filepath on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The filepath of the selected resource file." id="3" />
                                            <Parameter name="File name" inherits_from_parent="1" content_type="4" value="" default_value="" tooltip="Name of the file which is going to be sent on the box output.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="4" />
                                          </Box>
                                          <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                          <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                          <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                  </Timeline>
                                  <Resource name="Audio player" type="Lock" timeout="0" />
                                </Box>
                                <Box name="Stand Up" id="2" localization="8" tooltip="the robot tries to stand up from any position for a number of tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." x="698" y="167">
                                  <bitmap>media/images/box/movement/stand.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated when the robot succeed in standing up." id="4" />
                                  <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot failed to stand up after n tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." id="5" />
                                  <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of stand up before stimulating the failure output." id="6" />
                                  <Timeline enable="0">
                                    <BehaviorLayer name="StandUpBehavior">
                                      <BehaviorKeyframe name="DetectRobotPose" index="1">
                                        <Diagram>
                                          <Box name="Goto Posture" id="2" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="331" y="92">
                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureService = self.session().service("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureService.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureService.setMaxTryNumber(self.nTries)

        result = self.postureService.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                            <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                            <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                              <Choice value="Crouch" />
                                              <Choice value="LyingBack" />
                                              <Choice value="LyingBelly" />
                                              <Choice value="Sit" />
                                              <Choice value="SitRelax" />
                                              <Choice value="StandInit" />
                                              <Choice value="Stand" />
                                              <Choice value="StandZero" />
                                            </Parameter>
                                            <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                                            <Parameter name="Maximum of tries" inherits_from_parent="1" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" />
                                            <Resource name="All motors" type="Lock" timeout="0" />
                                            <Resource name="Stiffness" type="Lock" timeout="0" />
                                          </Box>
                                          <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                          <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                          <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="5" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                  </Timeline>
                                  <Resource name="All motors" type="Lock" timeout="0" />
                                </Box>
                                <Box name="Guessing" id="15" localization="8" tooltip="" x="1268" y="69">
                                  <bitmap>media/images/box/box-diagram.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Input name="InitialGuess" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                  <Timeline enable="0">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                          <Box name="Counter" id="11" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="682" y="493">
                                            <bitmap>media/images/box/loop.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.onInput_onInit()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()
        self.onReinitialized()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                            <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                            <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                            <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                            <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                            <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                            <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="5" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                          </Box>
                                          <Box name="Switch Case" id="13" localization="8" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." plugin="dispatcher_plugin" x="904" y="323">
                                            <bitmap>media/images/box/interaction/choice.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
		  GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
		  GeneratedClass.__init__( self )

	def onInput_onStart(self, p):
		p = self.typeConversion(p)
		if(p == self.typeConversion(0)):
			self.output_1(p)
		elif(p == self.typeConversion(1)):
			self.output_2(p)
		elif(p == self.typeConversion(2)):
			self.output_3(p)
		else:
			self.onDefault()

	def typeConversion(self, p):
		try:
			p = float(p)
			pint = int(p)
			if( p == pint ):
				p = pint
		except:
			p = str(p)
		return p]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <keywords>
                                                <keyword>0</keyword>
                                                <keyword>1</keyword>
                                                <keyword>2</keyword>
                                                <keyword></keyword>
                                              </keywords>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" />
                                            <Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" />
                                            <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
                                            <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
                                            <Output name="output_3" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" />
                                          </Box>
                                          <Box name="Animated Say" id="14" localization="8" tooltip="Say some text with animations. The text can be localized." x="555" y="341">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="95" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Parameter name="Text" inherits_from_parent="0" content_type="5" value="not quite" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                                            <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                                              <Choice value="disabled" />
                                              <Choice value="random" />
                                              <Choice value="contextual" />
                                            </Parameter>
                                            <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Animated Say (1)" id="12" localization="8" tooltip="Say some text with animations. The text can be localized." x="1638" y="361">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Turn that frown upside down No Ell" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                                            <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                                              <Choice value="disabled" />
                                              <Choice value="random" />
                                              <Choice value="contextual" />
                                            </Parameter>
                                            <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Tactile Head" id="6" localization="8" tooltip="Detect touch on head tactile sensor." x="1021" y="673">
                                            <bitmap>media/images/box/sensors/tactileHead.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
            self.onStopped() #~ activate output of the box
        pass]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Input name="FrontTactilTouched" type="0" type_size="1" nature="4" stm_value_name="FrontTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" />
                                            <Input name="MiddleTactilTouched" type="0" type_size="1" nature="4" stm_value_name="MiddleTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="5" />
                                            <Input name="RearTactilTouched" type="0" type_size="1" nature="4" stm_value_name="RearTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="6" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="7" />
                                            <Output name="frontTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The front tactile head sensor was touched." id="8" />
                                            <Output name="middleTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The middle tactile head sensor was touched." id="9" />
                                            <Output name="rearTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The rear tactile head sensor was touched." id="10" />
                                            <Timeline enable="0">
                                              <BehaviorLayer name="behavior_layer1">
                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                  <Diagram>
                                                    <Box name="If &gt; 0" id="1" localization="8" tooltip="Transmit only if value is &gt; 0." x="260" y="17">
                                                      <bitmap>media/images/box/box-diagram.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                    </Box>
                                                    <Box name="If &gt; 0" id="2" localization="8" tooltip="Transmit only if value is &gt; 0." x="256" y="119">
                                                      <bitmap>media/images/box/box-diagram.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                    </Box>
                                                    <Box name="If &gt; 0" id="3" localization="8" tooltip="Transmit only if value is &gt; 0." x="261" y="223">
                                                      <bitmap>media/images/box/box-diagram.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                    </Box>
                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                    <Link inputowner="0" indexofinput="8" outputowner="1" indexofoutput="4" />
                                                    <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="5" />
                                                    <Link inputowner="0" indexofinput="9" outputowner="2" indexofoutput="4" />
                                                    <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="6" />
                                                    <Link inputowner="0" indexofinput="10" outputowner="3" indexofoutput="4" />
                                                  </Diagram>
                                                </BehaviorKeyframe>
                                              </BehaviorLayer>
                                            </Timeline>
                                            <Resource name="Head-sequence" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Animated Say (2)" id="5" localization="8" tooltip="Say some text with animations. The text can be localized." x="1075" y="858">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Parameter name="Text" inherits_from_parent="0" content_type="5" value="If you think it was a college student on a monday, touch the front of my head. If you think it is a zombie apocalypse, press the middle of my head, if you think its jake from state farm, press the back of my head" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                                            <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                                              <Choice value="disabled" />
                                              <Choice value="random" />
                                              <Choice value="contextual" />
                                            </Parameter>
                                            <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Animated Say (3)" id="8" localization="8" tooltip="Say some text with animations. The text can be localized." x="1633" y="621">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Congrats! You guessed it right" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                                            <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                                              <Choice value="disabled" />
                                              <Choice value="random" />
                                              <Choice value="contextual" />
                                            </Parameter>
                                            <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Link inputowner="13" indexofinput="2" outputowner="11" indexofoutput="4" />
                                          <Link inputowner="11" indexofinput="2" outputowner="14" indexofoutput="4" />
                                          <Link inputowner="11" indexofinput="3" outputowner="0" indexofoutput="2" />
                                          <Link inputowner="12" indexofinput="2" outputowner="13" indexofoutput="6" />
                                          <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="4" />
                                          <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="4" />
                                          <Link inputowner="6" indexofinput="2" outputowner="13" indexofoutput="4" />
                                          <Link inputowner="5" indexofinput="2" outputowner="13" indexofoutput="4" />
                                          <Link inputowner="6" indexofinput="2" outputowner="13" indexofoutput="5" />
                                          <Link inputowner="5" indexofinput="2" outputowner="13" indexofoutput="5" />
                                          <Link inputowner="0" indexofinput="5" outputowner="8" indexofoutput="4" />
                                          <Link inputowner="0" indexofinput="5" outputowner="12" indexofoutput="4" />
                                          <Link inputowner="8" indexofinput="2" outputowner="6" indexofoutput="9" />
                                          <Link inputowner="14" indexofinput="2" outputowner="6" indexofoutput="8" />
                                          <Link inputowner="14" indexofinput="2" outputowner="6" indexofoutput="10" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                  </Timeline>
                                </Box>
                                <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="1" indexofinput="3" outputowner="6" indexofoutput="4" />
                                <Link inputowner="2" indexofinput="2" outputowner="6" indexofoutput="4" />
                                <Link inputowner="2" indexofinput="2" outputowner="2" indexofoutput="5" />
                                <Link inputowner="15" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="15" indexofinput="4" outputowner="2" indexofoutput="4" />
                                <Link inputowner="0" indexofinput="4" outputowner="15" indexofoutput="5" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                        </Timeline>
                      </Box>
                      <Box name="Mouse" id="5" localization="8" tooltip="" x="747" y="166">
                        <bitmap>media/images/box/box-diagram.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="0">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram>
                                <Box name="Mouse" id="2" localization="8" tooltip="ID : #04A 0002&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Mouse&#x0A;" x="369" y="181">
                                  <bitmap>media/images/box/movement/move.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="157">
                                    <ActuatorList model="">
                                      <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                                        <Key frame="1" value="-9.6705" />
                                        <Key frame="19" value="-3.6" />
                                        <Key frame="23" value="-6.9" />
                                        <Key frame="26" value="-3.6" />
                                        <Key frame="28" value="-6.9" />
                                        <Key frame="30" value="-2.2" />
                                        <Key frame="33" value="-6.9" />
                                        <Key frame="36" value="-2.2" />
                                        <Key frame="46" value="-3.6" />
                                        <Key frame="48" value="-6.9" />
                                        <Key frame="50" value="-2.2" />
                                        <Key frame="52" value="-6.9" />
                                        <Key frame="54" value="-2.2" />
                                        <Key frame="60" value="-25.5" />
                                        <Key frame="68" value="-25.5" />
                                        <Key frame="73" value="-6.9" />
                                        <Key frame="76" value="-3.6" />
                                        <Key frame="78" value="-6.9" />
                                        <Key frame="80" value="-2.2" />
                                        <Key frame="83" value="-6.9" />
                                        <Key frame="86" value="-2.2" />
                                        <Key frame="95" value="-3.6" />
                                        <Key frame="97" value="-6.9" />
                                        <Key frame="99" value="-2.2" />
                                        <Key frame="102" value="-6.9" />
                                        <Key frame="105" value="-2.2" />
                                        <Key frame="155" value="-11.0768" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                                        <Key frame="1" value="0" />
                                        <Key frame="19" value="0" />
                                        <Key frame="155" value="0" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                                        <Key frame="1" value="4.74374" />
                                        <Key frame="12" value="-2.90283" />
                                        <Key frame="21" value="-19.2507" />
                                        <Key frame="54" value="-23.909" />
                                        <Key frame="62" value="-15.0319" />
                                        <Key frame="69" value="-15.0319" />
                                        <Key frame="76" value="-24.1678" />
                                        <Key frame="108" value="-26.8046" />
                                        <Key frame="155" value="5.09532" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                                        <Key frame="1" value="-7.3805" />
                                        <Key frame="12" value="-9.31412" />
                                        <Key frame="21" value="-7.73207" />
                                        <Key frame="54" value="-6.32579" />
                                        <Key frame="62" value="-14.9392" />
                                        <Key frame="69" value="-14.9392" />
                                        <Key frame="76" value="-16.2624" />
                                        <Key frame="108" value="-21.6238" />
                                        <Key frame="155" value="-7.29261" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                                        <Key frame="1" value="-25.3983" />
                                        <Key frame="14" value="-40.4" />
                                        <Key frame="21" value="-82.002" />
                                        <Key frame="107" value="-82.002" />
                                        <Key frame="119" value="-82.002" />
                                        <Key frame="137" value="-74" />
                                        <Key frame="157" value="-23.201" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                                        <Key frame="1" value="-66.7122" />
                                        <Key frame="21" value="-56.5137" />
                                        <Key frame="107" value="-56.5137" />
                                        <Key frame="119" value="-56.5137" />
                                        <Key frame="157" value="-68.9095" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                                        <Key frame="1" value="0.2896" />
                                        <Key frame="14" value="0.76" />
                                        <Key frame="21" value="0.13181" />
                                        <Key frame="25" value="0.3" />
                                        <Key frame="28" value="0.16" />
                                        <Key frame="30" value="0.29" />
                                        <Key frame="32" value="0.17" />
                                        <Key frame="35" value="0.29" />
                                        <Key frame="38" value="0.17" />
                                        <Key frame="48" value="0.16" />
                                        <Key frame="50" value="0.29" />
                                        <Key frame="52" value="0.17" />
                                        <Key frame="54" value="0.29" />
                                        <Key frame="56" value="0.17" />
                                        <Key frame="75" value="0.3" />
                                        <Key frame="78" value="0.16" />
                                        <Key frame="80" value="0.29" />
                                        <Key frame="82" value="0.17" />
                                        <Key frame="85" value="0.29" />
                                        <Key frame="88" value="0.17" />
                                        <Key frame="97" value="0.16" />
                                        <Key frame="99" value="0.29" />
                                        <Key frame="101" value="0.17" />
                                        <Key frame="104" value="0.29" />
                                        <Key frame="107" value="0.17" />
                                        <Key frame="119" value="0.17" />
                                        <Key frame="137" value="0.08" />
                                        <Key frame="157" value="0.316" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                                        <Key frame="1" value="7.56109" />
                                        <Key frame="12" value="-44.9982" />
                                        <Key frame="21" value="-73.6509" />
                                        <Key frame="54" value="-82.3521" />
                                        <Key frame="62" value="-58.7972" />
                                        <Key frame="69" value="-58.7972" />
                                        <Key frame="76" value="-69.349" />
                                        <Key frame="108" value="-73.9193" />
                                        <Key frame="155" value="7.4732" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                                        <Key frame="1" value="5.97904" />
                                        <Key frame="12" value="7.73688" />
                                        <Key frame="21" value="8.96736" />
                                        <Key frame="54" value="10.1978" />
                                        <Key frame="62" value="16.1745" />
                                        <Key frame="69" value="16.1745" />
                                        <Key frame="76" value="22.8494" />
                                        <Key frame="108" value="23.4647" />
                                        <Key frame="155" value="5.97904" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                                        <Key frame="1" value="-10.0173" />
                                        <Key frame="12" value="-0.964409" />
                                        <Key frame="21" value="7.64898" />
                                        <Key frame="54" value="7.03374" />
                                        <Key frame="62" value="6.3306" />
                                        <Key frame="69" value="6.3306" />
                                        <Key frame="76" value="7.64898" />
                                        <Key frame="108" value="7.03374" />
                                        <Key frame="155" value="-9.22623" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                                        <Key frame="1" value="-5.27591" />
                                        <Key frame="12" value="32.7812" />
                                        <Key frame="21" value="65.0375" />
                                        <Key frame="54" value="79.0123" />
                                        <Key frame="62" value="49.3049" />
                                        <Key frame="69" value="49.3049" />
                                        <Key frame="76" value="63.7239" />
                                        <Key frame="108" value="70.14" />
                                        <Key frame="155" value="-5.29" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                                        <Key frame="1" value="84.4615" />
                                        <Key frame="21" value="1.49414" />
                                        <Key frame="56" value="1.49414" />
                                        <Key frame="62" value="5.9" />
                                        <Key frame="70" value="5.9" />
                                        <Key frame="75" value="1.49414" />
                                        <Key frame="107" value="1.49414" />
                                        <Key frame="119" value="1.49414" />
                                        <Key frame="137" value="52.4" />
                                        <Key frame="157" value="85.692" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                                        <Key frame="1" value="5.88634" />
                                        <Key frame="21" value="3.60351" />
                                        <Key frame="107" value="3.60351" />
                                        <Key frame="119" value="3.60351" />
                                        <Key frame="157" value="8.96255" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                                        <Key frame="1" value="2.54646" />
                                        <Key frame="14" value="-85" />
                                        <Key frame="21" value="-52.1222" />
                                        <Key frame="107" value="-52.1222" />
                                        <Key frame="119" value="-52.1222" />
                                        <Key frame="137" value="-57.6" />
                                        <Key frame="157" value="4.83163" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                                        <Key frame="1" value="5.10013" />
                                        <Key frame="12" value="-7.02893" />
                                        <Key frame="21" value="-24.1678" />
                                        <Key frame="54" value="-26.8046" />
                                        <Key frame="62" value="-14.4997" />
                                        <Key frame="69" value="-14.4997" />
                                        <Key frame="76" value="-19.2507" />
                                        <Key frame="108" value="-23.909" />
                                        <Key frame="155" value="5.80326" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                                        <Key frame="1" value="7.4732" />
                                        <Key frame="12" value="13.8014" />
                                        <Key frame="21" value="16.2624" />
                                        <Key frame="54" value="21.6238" />
                                        <Key frame="62" value="14.4166" />
                                        <Key frame="69" value="14.4166" />
                                        <Key frame="76" value="7.73207" />
                                        <Key frame="108" value="6.32579" />
                                        <Key frame="155" value="7.38531" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                                        <Key frame="1" value="25.8426" />
                                        <Key frame="12" value="40.4" />
                                        <Key frame="19" value="82.0898" />
                                        <Key frame="105" value="82.0898" />
                                        <Key frame="117" value="82.0898" />
                                        <Key frame="135" value="74" />
                                        <Key frame="155" value="24.4363" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                                        <Key frame="1" value="66.8832" />
                                        <Key frame="19" value="54.4922" />
                                        <Key frame="105" value="54.4922" />
                                        <Key frame="117" value="54.4922" />
                                        <Key frame="155" value="69.1684" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                                        <Key frame="1" value="0.2924" />
                                        <Key frame="12" value="0.76" />
                                        <Key frame="19" value="0.13181" />
                                        <Key frame="23" value="0.3" />
                                        <Key frame="26" value="0.16" />
                                        <Key frame="28" value="0.29" />
                                        <Key frame="30" value="0.17" />
                                        <Key frame="33" value="0.29" />
                                        <Key frame="36" value="0.17" />
                                        <Key frame="46" value="0.16" />
                                        <Key frame="48" value="0.29" />
                                        <Key frame="50" value="0.17" />
                                        <Key frame="52" value="0.29" />
                                        <Key frame="54" value="0.17" />
                                        <Key frame="73" value="0.3" />
                                        <Key frame="76" value="0.16" />
                                        <Key frame="78" value="0.29" />
                                        <Key frame="80" value="0.17" />
                                        <Key frame="83" value="0.29" />
                                        <Key frame="86" value="0.17" />
                                        <Key frame="95" value="0.16" />
                                        <Key frame="97" value="0.29" />
                                        <Key frame="99" value="0.17" />
                                        <Key frame="102" value="0.29" />
                                        <Key frame="105" value="0.17" />
                                        <Key frame="117" value="0.17" />
                                        <Key frame="135" value="0.08" />
                                        <Key frame="155" value="0.3144" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                                        <Key frame="1" value="7.46839" />
                                        <Key frame="12" value="-44.7393" />
                                        <Key frame="21" value="-69.349" />
                                        <Key frame="54" value="-73.9193" />
                                        <Key frame="62" value="-61.7903" />
                                        <Key frame="69" value="-61.7903" />
                                        <Key frame="76" value="-73.6509" />
                                        <Key frame="108" value="-82.3521" />
                                        <Key frame="155" value="7.64417" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                                        <Key frame="1" value="-5.2711" />
                                        <Key frame="12" value="-15.115" />
                                        <Key frame="21" value="-22.8494" />
                                        <Key frame="54" value="-23.4647" />
                                        <Key frame="62" value="-16.8728" />
                                        <Key frame="69" value="-16.8728" />
                                        <Key frame="76" value="-8.96736" />
                                        <Key frame="108" value="-10.1978" />
                                        <Key frame="155" value="-5.79845" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                                        <Key frame="1" value="-10.0173" />
                                        <Key frame="12" value="-0.964409" />
                                        <Key frame="21" value="7.64898" />
                                        <Key frame="54" value="7.03374" />
                                        <Key frame="62" value="6.3306" />
                                        <Key frame="69" value="6.3306" />
                                        <Key frame="76" value="7.64898" />
                                        <Key frame="108" value="7.03374" />
                                        <Key frame="155" value="-9.22623" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                                        <Key frame="1" value="-4.83163" />
                                        <Key frame="12" value="35.5107" />
                                        <Key frame="21" value="63.7239" />
                                        <Key frame="54" value="70.14" />
                                        <Key frame="62" value="51.3312" />
                                        <Key frame="69" value="51.3312" />
                                        <Key frame="76" value="65.0375" />
                                        <Key frame="108" value="79.0123" />
                                        <Key frame="155" value="-4.74374" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                                        <Key frame="1" value="84.9937" />
                                        <Key frame="19" value="1.05469" />
                                        <Key frame="54" value="1.05469" />
                                        <Key frame="60" value="12.6" />
                                        <Key frame="68" value="12.6" />
                                        <Key frame="73" value="1.05469" />
                                        <Key frame="105" value="1.05469" />
                                        <Key frame="117" value="1.05469" />
                                        <Key frame="135" value="52.4" />
                                        <Key frame="155" value="86.0484" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                                        <Key frame="1" value="-6.3306" />
                                        <Key frame="19" value="-1.58204" />
                                        <Key frame="105" value="-1.58204" />
                                        <Key frame="117" value="-1.58204" />
                                        <Key frame="155" value="-9.6705" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                                        <Key frame="1" value="8.69887" />
                                        <Key frame="12" value="85" />
                                        <Key frame="19" value="51.9416" />
                                        <Key frame="105" value="51.9416" />
                                        <Key frame="117" value="51.9416" />
                                        <Key frame="135" value="57.6" />
                                        <Key frame="155" value="5.18321" />
                                      </ActuatorCurve>
                                    </ActuatorList>
                                  </Timeline>
                                  <Resource name="Standing" type="Lock" timeout="1" />
                                  <Resource name="All motors" type="Lock" timeout="1" />
                                </Box>
                                <Box name="Play Sound" id="1" localization="8" tooltip="Play a sound file. Select the file in parameters. The format of the file can be wav or ogg (on virtual robot) and also mp3 (on a real robot).&#x0A;&#x0A;Note: There can be some delay to play ogg or mp3 (on a robot) files. We advise you to use wav if&#x0A;you want a fast play of the file." x="317" y="314">
                                  <bitmap>media/images/box/interaction/play_music.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Starts the music." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops the music." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                  <Parameter name="File name" inherits_from_parent="0" content_type="4" value="/../Sound Effects Of Mouse High Quality Audio.mp3" default_value="" tooltip="Name of the file you want to play.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="5" />
                                  <Parameter name="Begin position (s)" inherits_from_parent="0" content_type="2" value="8.42697" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="6" />
                                  <Parameter name="Volume (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="7" />
                                  <Parameter name="Balance L/R" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="8" />
                                  <Parameter name="Play in loop" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="9" />
                                  <Timeline enable="0">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                          <Box name="Play Sound File" id="2" localization="8" tooltip="Play the sound." x="442" y="70">
                                            <bitmap>media/images/box/interaction/play_music.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.player = self.session().service('ALAudioPlayer')
        self.playerStop = self.session().service('ALAudioPlayer') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.playerStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            if (self.getParameter("Play in loop")) :
               id = self.player.pCall("playFileInLoop",p,self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            else :
               id = self.player.pCall("playFileFromPosition",p,self.getParameter("Begin position (s)"),self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            self.ids.append(id)
            self.player.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Begin position (s)" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="5" />
                                            <Parameter name="Volume (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="6" />
                                            <Parameter name="Balance L/R" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="7" />
                                            <Parameter name="Play in loop" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="8" />
                                          </Box>
                                          <Box name="Get Attached File" id="1" localization="8" tooltip="Use this box to choose an attached file in its parameters. The filename will be sent on&#x0A;the output when the input is stimulated." x="216" y="71">
                                            <bitmap>media/images/box/folder.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        pass

    def onInput_onStart(self):
        self.onStopped(self.behaviorAbsolutePath() + self.getParameter("File name"))]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the filepath on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The filepath of the selected resource file." id="3" />
                                            <Parameter name="File name" inherits_from_parent="1" content_type="4" value="" default_value="" tooltip="Name of the file which is going to be sent on the box output.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="4" />
                                          </Box>
                                          <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                          <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                          <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                  </Timeline>
                                  <Resource name="Audio player" type="Lock" timeout="0" />
                                </Box>
                                <Box name="Stand Up" id="3" localization="8" tooltip="the robot tries to stand up from any position for a number of tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." x="947" y="136">
                                  <bitmap>media/images/box/movement/stand.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated when the robot succeed in standing up." id="4" />
                                  <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot failed to stand up after n tries.&#x0A;&#x0A;Note: The number of tries can be set in parameters." id="5" />
                                  <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of stand up before stimulating the failure output." id="6" />
                                  <Timeline enable="0">
                                    <BehaviorLayer name="StandUpBehavior">
                                      <BehaviorKeyframe name="DetectRobotPose" index="1">
                                        <Diagram>
                                          <Box name="Goto Posture" id="2" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="331" y="92">
                                            <bitmap>media/images/box/box-diagram.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureService = self.session().service("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureService.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureService.setMaxTryNumber(self.nTries)

        result = self.postureService.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                                            <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                                            <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                              <Choice value="Crouch" />
                                              <Choice value="LyingBack" />
                                              <Choice value="LyingBelly" />
                                              <Choice value="Sit" />
                                              <Choice value="SitRelax" />
                                              <Choice value="StandInit" />
                                              <Choice value="Stand" />
                                              <Choice value="StandZero" />
                                            </Parameter>
                                            <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                                            <Parameter name="Maximum of tries" inherits_from_parent="1" content_type="1" value="3" default_value="3" min="0" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" />
                                            <Resource name="All motors" type="Lock" timeout="0" />
                                            <Resource name="Stiffness" type="Lock" timeout="0" />
                                          </Box>
                                          <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                          <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                          <Link inputowner="0" indexofinput="5" outputowner="2" indexofoutput="5" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                  </Timeline>
                                  <Resource name="All motors" type="Lock" timeout="0" />
                                </Box>
                                <Box name="Guessing" id="15" localization="8" tooltip="" x="1355" y="28">
                                  <bitmap>media/images/box/box-diagram.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Input name="InitialGuess" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                  <Timeline enable="0">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                          <Box name="Counter" id="11" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="682" y="493">
                                            <bitmap>media/images/box/loop.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.onInput_onInit()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()
        self.onReinitialized()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                            <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                            <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                            <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                            <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                            <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                            <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="5" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                          </Box>
                                          <Box name="Switch Case" id="13" localization="8" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." plugin="dispatcher_plugin" x="904" y="323">
                                            <bitmap>media/images/box/interaction/choice.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
		  GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
		  GeneratedClass.__init__( self )

	def onInput_onStart(self, p):
		p = self.typeConversion(p)
		if(p == self.typeConversion(0)):
			self.output_1(p)
		elif(p == self.typeConversion(1)):
			self.output_2(p)
		elif(p == self.typeConversion(2)):
			self.output_3(p)
		else:
			self.onDefault()

	def typeConversion(self, p):
		try:
			p = float(p)
			pint = int(p)
			if( p == pint ):
				p = pint
		except:
			p = str(p)
		return p]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <keywords>
                                                <keyword>0</keyword>
                                                <keyword>1</keyword>
                                                <keyword>2</keyword>
                                                <keyword></keyword>
                                              </keywords>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" />
                                            <Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" />
                                            <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
                                            <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
                                            <Output name="output_3" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" />
                                          </Box>
                                          <Box name="Animated Say" id="14" localization="8" tooltip="Say some text with animations. The text can be localized." x="555" y="341">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="95" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Parameter name="Text" inherits_from_parent="0" content_type="5" value="not quite" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                                            <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                                              <Choice value="disabled" />
                                              <Choice value="random" />
                                              <Choice value="contextual" />
                                            </Parameter>
                                            <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Animated Say (1)" id="12" localization="8" tooltip="Say some text with animations. The text can be localized." x="1638" y="361">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Turn that frown upside down No Ell" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                                            <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                                              <Choice value="disabled" />
                                              <Choice value="random" />
                                              <Choice value="contextual" />
                                            </Parameter>
                                            <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Tactile Head" id="6" localization="8" tooltip="Detect touch on head tactile sensor." x="1021" y="673">
                                            <bitmap>media/images/box/sensors/tactileHead.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
            self.onStopped() #~ activate output of the box
        pass]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Input name="FrontTactilTouched" type="0" type_size="1" nature="4" stm_value_name="FrontTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" />
                                            <Input name="MiddleTactilTouched" type="0" type_size="1" nature="4" stm_value_name="MiddleTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="5" />
                                            <Input name="RearTactilTouched" type="0" type_size="1" nature="4" stm_value_name="RearTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="6" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="7" />
                                            <Output name="frontTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The front tactile head sensor was touched." id="8" />
                                            <Output name="middleTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The middle tactile head sensor was touched." id="9" />
                                            <Output name="rearTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The rear tactile head sensor was touched." id="10" />
                                            <Timeline enable="0">
                                              <BehaviorLayer name="behavior_layer1">
                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                  <Diagram>
                                                    <Box name="If &gt; 0" id="1" localization="8" tooltip="Transmit only if value is &gt; 0." x="260" y="17">
                                                      <bitmap>media/images/box/box-diagram.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                    </Box>
                                                    <Box name="If &gt; 0" id="2" localization="8" tooltip="Transmit only if value is &gt; 0." x="256" y="119">
                                                      <bitmap>media/images/box/box-diagram.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                    </Box>
                                                    <Box name="If &gt; 0" id="3" localization="8" tooltip="Transmit only if value is &gt; 0." x="261" y="223">
                                                      <bitmap>media/images/box/box-diagram.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                    </Box>
                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                    <Link inputowner="0" indexofinput="8" outputowner="1" indexofoutput="4" />
                                                    <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="5" />
                                                    <Link inputowner="0" indexofinput="9" outputowner="2" indexofoutput="4" />
                                                    <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="6" />
                                                    <Link inputowner="0" indexofinput="10" outputowner="3" indexofoutput="4" />
                                                  </Diagram>
                                                </BehaviorKeyframe>
                                              </BehaviorLayer>
                                            </Timeline>
                                            <Resource name="Head-sequence" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Animated Say (2)" id="5" localization="8" tooltip="Say some text with animations. The text can be localized." x="1075" y="858">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Parameter name="Text" inherits_from_parent="0" content_type="5" value="If you think it was a college student on a monday, touch the front of my head. If you think it is a zombie apocalypse, press the middle of my head, if you think its jake from state farm, press the back of my head" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                                            <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                                              <Choice value="disabled" />
                                              <Choice value="random" />
                                              <Choice value="contextual" />
                                            </Parameter>
                                            <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Animated Say (3)" id="8" localization="8" tooltip="Say some text with animations. The text can be localized." x="1633" y="621">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Congrats! You guessed it right" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                                            <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                                              <Choice value="disabled" />
                                              <Choice value="random" />
                                              <Choice value="contextual" />
                                            </Parameter>
                                            <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Link inputowner="13" indexofinput="2" outputowner="11" indexofoutput="4" />
                                          <Link inputowner="11" indexofinput="2" outputowner="14" indexofoutput="4" />
                                          <Link inputowner="11" indexofinput="3" outputowner="0" indexofoutput="2" />
                                          <Link inputowner="12" indexofinput="2" outputowner="13" indexofoutput="6" />
                                          <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="4" />
                                          <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="4" />
                                          <Link inputowner="6" indexofinput="2" outputowner="13" indexofoutput="4" />
                                          <Link inputowner="5" indexofinput="2" outputowner="13" indexofoutput="4" />
                                          <Link inputowner="6" indexofinput="2" outputowner="13" indexofoutput="5" />
                                          <Link inputowner="5" indexofinput="2" outputowner="13" indexofoutput="5" />
                                          <Link inputowner="0" indexofinput="5" outputowner="8" indexofoutput="4" />
                                          <Link inputowner="0" indexofinput="5" outputowner="12" indexofoutput="4" />
                                          <Link inputowner="8" indexofinput="2" outputowner="6" indexofoutput="9" />
                                          <Link inputowner="14" indexofinput="2" outputowner="6" indexofoutput="8" />
                                          <Link inputowner="14" indexofinput="2" outputowner="6" indexofoutput="10" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                  </Timeline>
                                </Box>
                                <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="1" indexofinput="3" outputowner="2" indexofoutput="4" />
                                <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="4" />
                                <Link inputowner="3" indexofinput="2" outputowner="3" indexofoutput="5" />
                                <Link inputowner="0" indexofinput="4" outputowner="15" indexofoutput="5" />
                                <Link inputowner="15" indexofinput="4" outputowner="3" indexofoutput="4" />
                                <Link inputowner="15" indexofinput="2" outputowner="0" indexofoutput="2" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                        </Timeline>
                      </Box>
                      <Box name="Elephant" id="6" localization="8" tooltip="" x="745" y="309">
                        <bitmap>media/images/box/box-diagram.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="0">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram>
                                <Box name="Elephant" id="4" localization="8" tooltip="ID : #04A 0001&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Elephant&#x0A;" x="270" y="81">
                                  <bitmap>media/images/box/movement/move.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="172">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                          <Box name="Play Sound" id="1" localization="8" tooltip="Play a sound file. Select the file in parameters. The format of the file can be wav or ogg (on virtual robot) and also mp3 (on a real robot).&#x0A;&#x0A;Note: There can be some delay to play ogg or mp3 (on a robot) files. We advise you to use wav if&#x0A;you want a fast play of the file." x="95" y="52">
                                            <bitmap>media/images/box/interaction/play_music.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Starts the music." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops the music." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                            <Parameter name="File name" inherits_from_parent="0" content_type="4" value="/elephant.ogg" default_value="" tooltip="Name of the file you want to play.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="5" />
                                            <Parameter name="Begin position (s)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="6" />
                                            <Parameter name="Volume (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="7" />
                                            <Parameter name="Balance L/R" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="8" />
                                            <Parameter name="Play in loop" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="9" />
                                            <Timeline enable="0">
                                              <BehaviorLayer name="behavior_layer1">
                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                  <Diagram>
                                                    <Box name="Play Sound File" id="2" localization="8" tooltip="Play the sound." x="442" y="70">
                                                      <bitmap>media/images/box/interaction/play_music.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.player = self.session().service('ALAudioPlayer')
        self.playerStop = self.session().service('ALAudioPlayer') #Create another proxy as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.playerStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            if (self.getParameter("Play in loop")) :
               id = self.player.pCall("playFileInLoop",p,self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            else :
               id = self.player.pCall("playFileFromPosition",p,self.getParameter("Begin position (s)"),self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            self.ids.append(id)
            self.player.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                      <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                      <Parameter name="Begin position (s)" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="5" />
                                                      <Parameter name="Volume (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="6" />
                                                      <Parameter name="Balance L/R" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="7" />
                                                      <Parameter name="Play in loop" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="8" />
                                                    </Box>
                                                    <Box name="Get Attached File" id="1" localization="8" tooltip="Use this box to choose an attached file in its parameters. The filename will be sent on&#x0A;the output when the input is stimulated." x="216" y="71">
                                                      <bitmap>media/images/box/folder.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        pass

    def onInput_onStart(self):
        self.onStopped(self.behaviorAbsolutePath() + self.getParameter("File name"))]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the filepath on the output." id="2" />
                                                      <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The filepath of the selected resource file." id="3" />
                                                      <Parameter name="File name" inherits_from_parent="1" content_type="4" value="" default_value="" tooltip="Name of the file which is going to be sent on the box output.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="4" />
                                                    </Box>
                                                    <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                                    <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                                  </Diagram>
                                                </BehaviorKeyframe>
                                              </BehaviorLayer>
                                            </Timeline>
                                            <Resource name="Audio player" type="Lock" timeout="0" />
                                          </Box>
                                          <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                    <ActuatorList model="">
                                      <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                                        <Key frame="12" value="-12.2" />
                                        <Key frame="22" value="29.5" />
                                        <Key frame="49" value="8.55243" />
                                        <Key frame="84" value="29.5" />
                                        <Key frame="111" value="8.55243" />
                                        <Key frame="144" value="29.5" />
                                        <Key frame="157" value="15.7302" />
                                        <Key frame="170" value="-11.2525" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                                        <Key frame="12" value="-2.6" />
                                        <Key frame="22" value="-21.4" />
                                        <Key frame="49" value="-21.2458" />
                                        <Key frame="84" value="-21.4" />
                                        <Key frame="111" value="-21.2458" />
                                        <Key frame="144" value="-21.4" />
                                        <Key frame="157" value="2.107" />
                                        <Key frame="170" value="-1.23289" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                                        <Key frame="14" value="-48.7" />
                                        <Key frame="24" value="-88.5" />
                                        <Key frame="51" value="-88.5" />
                                        <Key frame="86" value="-88.5" />
                                        <Key frame="113" value="-88.5" />
                                        <Key frame="146" value="-88.5" />
                                        <Key frame="159" value="-70.4868" />
                                        <Key frame="172" value="-24.2557" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                                        <Key frame="24" value="0" />
                                        <Key frame="51" value="1.60444" />
                                        <Key frame="86" value="0" />
                                        <Key frame="113" value="1.60444" />
                                        <Key frame="146" value="0" />
                                        <Key frame="159" value="-77.7866" />
                                        <Key frame="172" value="-68.6458" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                                        <Key frame="14" value="0.08" />
                                        <Key frame="24" value="0.602755" />
                                        <Key frame="51" value="0.602755" />
                                        <Key frame="86" value="0.602755" />
                                        <Key frame="113" value="0.602755" />
                                        <Key frame="146" value="0.602755" />
                                        <Key frame="159" value="0.1" />
                                        <Key frame="172" value="0.3092" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                                        <Key frame="14" value="11.2" />
                                        <Key frame="24" value="-23.1" />
                                        <Key frame="51" value="-37.4943" />
                                        <Key frame="86" value="-23.1" />
                                        <Key frame="113" value="-37.4943" />
                                        <Key frame="146" value="-23.1" />
                                        <Key frame="159" value="87.6256" />
                                        <Key frame="172" value="87.9772" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                                        <Key frame="24" value="8.00403" />
                                        <Key frame="51" value="8.88428" />
                                        <Key frame="86" value="8.00403" />
                                        <Key frame="113" value="8.88428" />
                                        <Key frame="146" value="8.00403" />
                                        <Key frame="159" value="0.349159" />
                                        <Key frame="172" value="6.67737" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                                        <Key frame="14" value="-43.9" />
                                        <Key frame="24" value="0" />
                                        <Key frame="51" value="0" />
                                        <Key frame="86" value="0" />
                                        <Key frame="113" value="0" />
                                        <Key frame="146" value="0" />
                                        <Key frame="159" value="-17.3171" />
                                        <Key frame="172" value="5.09532" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                                        <Key frame="12" value="71.5" />
                                        <Key frame="22" value="30.6" />
                                        <Key frame="36" value="2" />
                                        <Key frame="62" value="50.6986" />
                                        <Key frame="84" value="30.6" />
                                        <Key frame="98" value="2" />
                                        <Key frame="124" value="50.6986" />
                                        <Key frame="144" value="30.6" />
                                        <Key frame="157" value="73.9193" />
                                        <Key frame="170" value="23.9968" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                                        <Key frame="12" value="81.5" />
                                        <Key frame="22" value="70.8345" />
                                        <Key frame="49" value="71.103" />
                                        <Key frame="84" value="70.8345" />
                                        <Key frame="111" value="71.103" />
                                        <Key frame="144" value="70.8345" />
                                        <Key frame="157" value="80.067" />
                                        <Key frame="170" value="68.7289" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                                        <Key frame="12" value="0.66" />
                                        <Key frame="35" value="0.602465" />
                                        <Key frame="62" value="0.98" />
                                        <Key frame="97" value="0.602465" />
                                        <Key frame="124" value="0.98" />
                                        <Key frame="157" value="0.1" />
                                        <Key frame="170" value="0.308" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                                        <Key frame="12" value="45.6" />
                                        <Key frame="22" value="30.4" />
                                        <Key frame="49" value="-28.9992" />
                                        <Key frame="84" value="30.4" />
                                        <Key frame="111" value="-28.9992" />
                                        <Key frame="144" value="30.4" />
                                        <Key frame="157" value="91.0582" />
                                        <Key frame="170" value="87.8941" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                                        <Key frame="22" value="12.5928" />
                                        <Key frame="49" value="10.8939" />
                                        <Key frame="84" value="12.5928" />
                                        <Key frame="111" value="10.8939" />
                                        <Key frame="144" value="12.5928" />
                                        <Key frame="157" value="11.9478" />
                                        <Key frame="170" value="-7.12163" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                                        <Key frame="12" value="28.3" />
                                        <Key frame="22" value="-73" />
                                        <Key frame="49" value="-72.8936" />
                                        <Key frame="84" value="-73" />
                                        <Key frame="111" value="-72.8936" />
                                        <Key frame="144" value="-73" />
                                        <Key frame="157" value="50.6232" />
                                        <Key frame="170" value="4.91954" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                                        <Key frame="22" value="-1.76024" />
                                        <Key frame="46" value="-7.03374" />
                                        <Key frame="81" value="-8.5279" />
                                        <Key frame="108" value="-7.03374" />
                                        <Key frame="141" value="-8.5279" />
                                        <Key frame="167" value="4.91954" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                                        <Key frame="22" value="-8.25942" />
                                        <Key frame="46" value="-8.4352" />
                                        <Key frame="81" value="-7.99575" />
                                        <Key frame="108" value="-8.4352" />
                                        <Key frame="141" value="-7.99575" />
                                        <Key frame="167" value="-7.55628" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                                        <Key frame="22" value="-24.1678" />
                                        <Key frame="46" value="7.38531" />
                                        <Key frame="81" value="-39.9883" />
                                        <Key frame="108" value="7.38531" />
                                        <Key frame="141" value="-39.9883" />
                                        <Key frame="167" value="7.64898" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                                        <Key frame="22" value="5.80326" />
                                        <Key frame="46" value="8.61579" />
                                        <Key frame="81" value="5.01224" />
                                        <Key frame="108" value="8.61579" />
                                        <Key frame="141" value="5.01224" />
                                        <Key frame="167" value="5.45169" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                                        <Key frame="22" value="-16.5212" />
                                        <Key frame="46" value="-10.5446" />
                                        <Key frame="81" value="-14.4997" />
                                        <Key frame="108" value="-10.5446" />
                                        <Key frame="141" value="-14.4997" />
                                        <Key frame="167" value="-8.96255" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                                        <Key frame="22" value="27.8593" />
                                        <Key frame="46" value="15.5544" />
                                        <Key frame="81" value="43.7677" />
                                        <Key frame="108" value="15.5544" />
                                        <Key frame="141" value="43.7677" />
                                        <Key frame="167" value="-5.27591" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                                        <Key frame="22" value="-2.1949" />
                                        <Key frame="46" value="-4.48007" />
                                        <Key frame="81" value="-12.1267" />
                                        <Key frame="108" value="-4.48007" />
                                        <Key frame="141" value="-12.1267" />
                                        <Key frame="167" value="5.71537" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                                        <Key frame="22" value="10.2857" />
                                        <Key frame="46" value="12.3951" />
                                        <Key frame="81" value="7.20952" />
                                        <Key frame="108" value="12.3951" />
                                        <Key frame="141" value="7.20952" />
                                        <Key frame="167" value="7.4732" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                                        <Key frame="22" value="-23.1179" />
                                        <Key frame="46" value="11.3356" />
                                        <Key frame="81" value="-40.4326" />
                                        <Key frame="108" value="11.3356" />
                                        <Key frame="141" value="-40.4326" />
                                        <Key frame="167" value="7.20472" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                                        <Key frame="22" value="-7.11683" />
                                        <Key frame="46" value="-11.9509" />
                                        <Key frame="81" value="-3.68905" />
                                        <Key frame="108" value="-11.9509" />
                                        <Key frame="141" value="-3.68905" />
                                        <Key frame="167" value="-5.18321" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                                        <Key frame="22" value="-16.5212" />
                                        <Key frame="46" value="-10.5446" />
                                        <Key frame="81" value="-14.4997" />
                                        <Key frame="108" value="-10.5446" />
                                        <Key frame="141" value="-14.4997" />
                                        <Key frame="167" value="-8.96255" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                                        <Key frame="22" value="26.7215" />
                                        <Key frame="46" value="7.56109" />
                                        <Key frame="81" value="46.6729" />
                                        <Key frame="108" value="7.56109" />
                                        <Key frame="141" value="46.6729" />
                                        <Key frame="167" value="-4.74374" />
                                      </ActuatorCurve>
                                    </ActuatorList>
                                  </Timeline>
                                  <Resource name="Standing" type="Lock" timeout="1" />
                                  <Resource name="All motors" type="Lock" timeout="1" />
                                  <Resource name="Speakers" type="Lock" timeout="1" />
                                </Box>
                                <Box name="Play Sound" id="1" localization="8" tooltip="Play a sound file. Select the file in parameters. The format of the file can be wav or ogg (on virtual robot) and also mp3 (on a real robot).&#x0A;&#x0A;Note: There can be some delay to play ogg or mp3 (on a robot) files. We advise you to use wav if&#x0A;you want a fast play of the file." x="273" y="246">
                                  <bitmap>media/images/box/interaction/play_music.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Starts the music." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops the music." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                  <Parameter name="File name" inherits_from_parent="0" content_type="4" value="/Sound of the African Bushveld, Elephants - AFRICAN WILDLIFE.mp3" default_value="" tooltip="Name of the file you want to play.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="5" />
                                  <Parameter name="Begin position (s)" inherits_from_parent="0" content_type="2" value="40" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="6" />
                                  <Parameter name="Volume (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="7" />
                                  <Parameter name="Balance L/R" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="8" />
                                  <Parameter name="Play in loop" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="9" />
                                  <Timeline enable="0">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                          <Box name="Play Sound File" id="2" localization="8" tooltip="Play the sound." x="442" y="70">
                                            <bitmap>media/images/box/interaction/play_music.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.player = self.session().service('ALAudioPlayer')
        self.playerStop = self.session().service('ALAudioPlayer') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.playerStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            if (self.getParameter("Play in loop")) :
               id = self.player.pCall("playFileInLoop",p,self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            else :
               id = self.player.pCall("playFileFromPosition",p,self.getParameter("Begin position (s)"),self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            self.ids.append(id)
            self.player.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Begin position (s)" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="5" />
                                            <Parameter name="Volume (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="6" />
                                            <Parameter name="Balance L/R" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="7" />
                                            <Parameter name="Play in loop" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="8" />
                                          </Box>
                                          <Box name="Get Attached File" id="1" localization="8" tooltip="Use this box to choose an attached file in its parameters. The filename will be sent on&#x0A;the output when the input is stimulated." x="216" y="71">
                                            <bitmap>media/images/box/folder.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        pass

    def onInput_onStart(self):
        self.onStopped(self.behaviorAbsolutePath() + self.getParameter("File name"))]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the filepath on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The filepath of the selected resource file." id="3" />
                                            <Parameter name="File name" inherits_from_parent="1" content_type="4" value="" default_value="" tooltip="Name of the file which is going to be sent on the box output.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="4" />
                                          </Box>
                                          <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                          <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                          <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                  </Timeline>
                                  <Resource name="Audio player" type="Lock" timeout="0" />
                                </Box>
                                <Box name="Guessing" id="15" localization="8" tooltip="" x="1054" y="70">
                                  <bitmap>media/images/box/box-diagram.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Input name="InitialGuess" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                  <Timeline enable="0">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                          <Box name="Counter" id="11" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="682" y="493">
                                            <bitmap>media/images/box/loop.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.onInput_onInit()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()
        self.onReinitialized()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                            <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                            <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                            <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                            <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                            <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                            <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="5" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                          </Box>
                                          <Box name="Switch Case" id="13" localization="8" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." plugin="dispatcher_plugin" x="904" y="323">
                                            <bitmap>media/images/box/interaction/choice.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
		  GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
		  GeneratedClass.__init__( self )

	def onInput_onStart(self, p):
		p = self.typeConversion(p)
		if(p == self.typeConversion(0)):
			self.output_1(p)
		elif(p == self.typeConversion(1)):
			self.output_2(p)
		elif(p == self.typeConversion(2)):
			self.output_3(p)
		else:
			self.onDefault()

	def typeConversion(self, p):
		try:
			p = float(p)
			pint = int(p)
			if( p == pint ):
				p = pint
		except:
			p = str(p)
		return p]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <keywords>
                                                <keyword>0</keyword>
                                                <keyword>1</keyword>
                                                <keyword>2</keyword>
                                                <keyword></keyword>
                                              </keywords>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" />
                                            <Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" />
                                            <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
                                            <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
                                            <Output name="output_3" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" />
                                          </Box>
                                          <Box name="Animated Say" id="14" localization="8" tooltip="Say some text with animations. The text can be localized." x="555" y="341">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="95" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Parameter name="Text" inherits_from_parent="0" content_type="5" value="not quite" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                                            <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                                              <Choice value="disabled" />
                                              <Choice value="random" />
                                              <Choice value="contextual" />
                                            </Parameter>
                                            <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Animated Say (1)" id="12" localization="8" tooltip="Say some text with animations. The text can be localized." x="1638" y="361">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Turn that frown upside down No Ell" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                                            <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                                              <Choice value="disabled" />
                                              <Choice value="random" />
                                              <Choice value="contextual" />
                                            </Parameter>
                                            <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Tactile Head" id="6" localization="8" tooltip="Detect touch on head tactile sensor." x="1021" y="673">
                                            <bitmap>media/images/box/sensors/tactileHead.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
            self.onStopped() #~ activate output of the box
        pass]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Input name="FrontTactilTouched" type="0" type_size="1" nature="4" stm_value_name="FrontTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" />
                                            <Input name="MiddleTactilTouched" type="0" type_size="1" nature="4" stm_value_name="MiddleTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="5" />
                                            <Input name="RearTactilTouched" type="0" type_size="1" nature="4" stm_value_name="RearTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="6" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="7" />
                                            <Output name="frontTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The front tactile head sensor was touched." id="8" />
                                            <Output name="middleTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The middle tactile head sensor was touched." id="9" />
                                            <Output name="rearTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The rear tactile head sensor was touched." id="10" />
                                            <Timeline enable="0">
                                              <BehaviorLayer name="behavior_layer1">
                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                  <Diagram>
                                                    <Box name="If &gt; 0" id="1" localization="8" tooltip="Transmit only if value is &gt; 0." x="260" y="17">
                                                      <bitmap>media/images/box/box-diagram.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                    </Box>
                                                    <Box name="If &gt; 0" id="2" localization="8" tooltip="Transmit only if value is &gt; 0." x="256" y="119">
                                                      <bitmap>media/images/box/box-diagram.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                    </Box>
                                                    <Box name="If &gt; 0" id="3" localization="8" tooltip="Transmit only if value is &gt; 0." x="261" y="223">
                                                      <bitmap>media/images/box/box-diagram.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                    </Box>
                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                    <Link inputowner="0" indexofinput="8" outputowner="1" indexofoutput="4" />
                                                    <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="5" />
                                                    <Link inputowner="0" indexofinput="9" outputowner="2" indexofoutput="4" />
                                                    <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="6" />
                                                    <Link inputowner="0" indexofinput="10" outputowner="3" indexofoutput="4" />
                                                  </Diagram>
                                                </BehaviorKeyframe>
                                              </BehaviorLayer>
                                            </Timeline>
                                            <Resource name="Head-sequence" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Animated Say (2)" id="5" localization="8" tooltip="Say some text with animations. The text can be localized." x="1075" y="858">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Parameter name="Text" inherits_from_parent="0" content_type="5" value="If you think it was a college student on a monday, touch the front of my head. If you think it is a zombie apocalypse, press the middle of my head, if you think its jake from state farm, press the back of my head" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                                            <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                                              <Choice value="disabled" />
                                              <Choice value="random" />
                                              <Choice value="contextual" />
                                            </Parameter>
                                            <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Animated Say (3)" id="8" localization="8" tooltip="Say some text with animations. The text can be localized." x="1633" y="621">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Congrats! You guessed it right" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                                            <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                                              <Choice value="disabled" />
                                              <Choice value="random" />
                                              <Choice value="contextual" />
                                            </Parameter>
                                            <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Link inputowner="13" indexofinput="2" outputowner="11" indexofoutput="4" />
                                          <Link inputowner="11" indexofinput="2" outputowner="14" indexofoutput="4" />
                                          <Link inputowner="11" indexofinput="3" outputowner="0" indexofoutput="2" />
                                          <Link inputowner="12" indexofinput="2" outputowner="13" indexofoutput="6" />
                                          <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="4" />
                                          <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="4" />
                                          <Link inputowner="6" indexofinput="2" outputowner="13" indexofoutput="4" />
                                          <Link inputowner="5" indexofinput="2" outputowner="13" indexofoutput="4" />
                                          <Link inputowner="6" indexofinput="2" outputowner="13" indexofoutput="5" />
                                          <Link inputowner="5" indexofinput="2" outputowner="13" indexofoutput="5" />
                                          <Link inputowner="0" indexofinput="5" outputowner="8" indexofoutput="4" />
                                          <Link inputowner="0" indexofinput="5" outputowner="12" indexofoutput="4" />
                                          <Link inputowner="8" indexofinput="2" outputowner="6" indexofoutput="9" />
                                          <Link inputowner="14" indexofinput="2" outputowner="6" indexofoutput="8" />
                                          <Link inputowner="14" indexofinput="2" outputowner="6" indexofoutput="10" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                  </Timeline>
                                </Box>
                                <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="1" indexofinput="3" outputowner="4" indexofoutput="4" />
                                <Link inputowner="15" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="15" indexofinput="4" outputowner="4" indexofoutput="4" />
                                <Link inputowner="0" indexofinput="4" outputowner="15" indexofoutput="5" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                        </Timeline>
                      </Box>
                      <Box name="Eye LEDs" id="7" localization="8" tooltip="Set the LED color of the eyes. Note that you must open the box to enter the color." x="258" y="404">
                        <bitmap>media/images/box/interaction/LED.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                        <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Both" default_value="Both" custom_choice="0" tooltip="Choose the eye where the LED light is set." id="4">
                          <Choice value="Both" />
                          <Choice value="Left" />
                          <Choice value="Right" />
                        </Parameter>
                        <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="5" />
                        <Timeline enable="0">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram>
                                <Box name="Eyes LEDs" id="15" localization="8" tooltip="Set the color of LEDs of robot&apos;s eyes." x="281" y="41">
                                  <bitmap>media/images/box/interaction/LED.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.fadeOps = []
        self.leds = self.session().service("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_color(self, p):
        if( self.getParameter("Side") == "Left" ):
            sGroup = "LeftFaceLeds"
        elif( self.getParameter("Side") == "Right" ):
            sGroup = "RightFaceLeds"
        else:
            sGroup = "FaceLeds"
        fadeOp = self.leds.fadeRGB(sGroup, 256*256*p[0] + 256*p[1] + p[2], self.getParameter("Duration (s)"), _async=True)
        self.fadeOps.append(fadeOp)
        fadeOp.wait()
        self.fadeOps.remove(fadeOp)
        if( self.fadeOps == [] ):
            self.onDone() # activate output of the box]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="color" type="2" type_size="3" nature="2" inner="0" tooltip="Color of robot&apos;s eyes." id="2" />
                                  <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                  <Parameter name="Side" inherits_from_parent="1" content_type="3" value="Both" default_value="Both" custom_choice="0" tooltip="Choose the eye where the LED light is set." id="4">
                                    <Choice value="Both" />
                                    <Choice value="Left" />
                                    <Choice value="Right" />
                                  </Parameter>
                                  <Parameter name="Duration (s)" inherits_from_parent="1" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="5" />
                                </Box>
                                <Box name="Color Edit" id="16" localization="8" tooltip="Transmit a table of number [R,G,B] correponsding to the selected color." plugin="coloredit_plugin" x="105" y="47">
                                  <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped([255, 170, 0])]]>
                                    </content>
                                  </script>
                                  <pluginContent>
                                    <color>#ffaa00</color>
                                  </pluginContent>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="To send the color on the output." id="2" />
                                  <Output name="onStopped" type="2" type_size="3" nature="1" inner="0" tooltip="[R,G,B] with R, G and B between 0 and 255." id="3" />
                                </Box>
                                <Link inputowner="15" indexofinput="2" outputowner="16" indexofoutput="3" />
                                <Link inputowner="16" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="0" indexofinput="3" outputowner="15" indexofoutput="3" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                        </Timeline>
                      </Box>
                      <Link inputowner="1" indexofinput="2" outputowner="3" indexofoutput="4" />
                      <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                      <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="4" />
                      <Link inputowner="5" indexofinput="2" outputowner="2" indexofoutput="5" />
                      <Link inputowner="6" indexofinput="2" outputowner="2" indexofoutput="6" />
                      <Link inputowner="0" indexofinput="4" outputowner="4" indexofoutput="4" />
                      <Link inputowner="0" indexofinput="4" outputowner="6" indexofoutput="4" />
                      <Link inputowner="0" indexofinput="4" outputowner="5" indexofoutput="4" />
                      <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                      <Link inputowner="7" indexofinput="2" outputowner="7" indexofoutput="3" />
                      <Link inputowner="7" indexofinput="2" outputowner="0" indexofoutput="2" />
                      <Link inputowner="0" indexofinput="4" outputowner="7" indexofoutput="3" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
              </Timeline>
            </Box>
            <Box name="Sports" id="2" localization="8" tooltip="" x="633" y="519">
              <bitmap>media/images/box/box-diagram.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
              <Timeline enable="0">
                <BehaviorLayer name="behavior_layer1">
                  <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                      <Box name="Animated Say" id="3" localization="8" tooltip="Say some text with animations. The text can be localized." x="239" y="45">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Parameter name="Text" inherits_from_parent="0" content_type="5" value="I am going to imitate a animal. If you have a guess, touch the center of my head and wait for the beep and tell me what you think I am imitating. If you need me to act it out in a clearer or different manner, tap the center of my head." default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                        <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                          <Choice value="disabled" />
                          <Choice value="random" />
                          <Choice value="contextual" />
                        </Parameter>
                        <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Random Int." id="1" localization="8" tooltip="Generate a random integer between a min number and a max number set as&#x0A;parameters.&#x0A;Note that the min and max numbers are included in the range of possible values." x="389" y="51">
                        <bitmap>media/images/box/box-script.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import random

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        # attributes needed in shuffle mode
        self.nMax = 1
        self.nMin = 0
        self.nIndex = self.nMax - self.nMin
        self.aShuffled = []

    def onUnload(self):
         #puts code for box cleanup here
        pass

    def onInput_onStart(self):
        nMax = self.getParameter("Max value")
        nMin = self.getParameter("Min value")
        if( nMin > nMax ):
            temp = nMin
            nMin = nMax
            nMax = temp
        # if shuffle
        if( self.getParameter("Shuffle") ):
            self.nIndex += 1
            if( self.nIndex > self.nMax - self.nMin or nMax != self.nMax or nMin != self.nMin ):
                self.nMax = nMax
                self.nMin = nMin
                self.nIndex = 0
                self.aShuffled = []
                for i in range( nMin, nMax + 1 ):
                    self.aShuffled.insert( random.randint(0, len(self.aShuffled)), i )
            self.output_RandomValue( self.aShuffled[self.nIndex] )
        # if not shuffle
        else:
            self.nIndex = self.nMax - self.nMin
            self.output_RandomValue( random.randint( nMin, nMax ) )]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="Generate a random integer." id="2" />
                        <Output name="output_RandomValue" type="2" type_size="1" nature="2" inner="0" tooltip="The random value obtained." id="3" />
                        <Parameter name="Min value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="1000" tooltip="The minimum value you can get." id="4" />
                        <Parameter name="Max value" inherits_from_parent="0" content_type="1" value="2" default_value="10" min="0" max="1000" tooltip="The maximum number you can get." id="5" />
                        <Parameter name="Shuffle" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="When this option is selected the box will give all the numbers between min and&#x0A;max before giving the same number twice." id="6" />
                      </Box>
                      <Box name="Switch Case" id="2" localization="8" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." plugin="dispatcher_plugin" x="538" y="51">
                        <bitmap>media/images/box/interaction/choice.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
		  GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
		  GeneratedClass.__init__( self )

	def onInput_onStart(self, p):
		p = self.typeConversion(p)
		if(p == self.typeConversion(0)):
			self.output_1(p)
		elif(p == self.typeConversion(1)):
			self.output_2(p)
		elif(p == self.typeConversion(2)):
			self.output_3(p)
		else:
			self.onDefault()

	def typeConversion(self, p):
		try:
			p = float(p)
			pint = int(p)
			if( p == pint ):
				p = pint
		except:
			p = str(p)
		return p]]>
                          </content>
                        </script>
                        <pluginContent>
                          <keywords>
                            <keyword>0</keyword>
                            <keyword>1</keyword>
                            <keyword>2</keyword>
                            <keyword></keyword>
                          </keywords>
                        </pluginContent>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" />
                        <Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" />
                        <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
                        <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
                        <Output name="output_3" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" />
                      </Box>
                      <Box name="Racecar Driving" id="6" localization="8" tooltip="" x="819" y="225">
                        <bitmap>media/images/box/box-diagram.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="0">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram>
                                <Box name="Timeline" id="1" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="346" y="79">
                                  <bitmap>media/images/box/movement/move.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Timeline enable="1" fps="2" start_frame="1" end_frame="-1" size="13">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram />
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                    <ActuatorList model="nao">
                                      <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                                        <Key frame="3" value="-16.6139" />
                                        <Key frame="4" value="-12.2194" />
                                        <Key frame="5" value="-12.2194" />
                                        <Key frame="7" value="-16.6139" />
                                        <Key frame="8" value="-12.2194" />
                                        <Key frame="9" value="-12.2194" />
                                        <Key frame="11" value="-16.6139" />
                                        <Key frame="12" value="-12.2194" />
                                        <Key frame="13" value="-12.2194" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                                        <Key frame="3" value="-1.05711" />
                                        <Key frame="4" value="-0.705531" />
                                        <Key frame="5" value="-0.705531" />
                                        <Key frame="7" value="-1.05711" />
                                        <Key frame="8" value="-0.705531" />
                                        <Key frame="9" value="-0.705531" />
                                        <Key frame="11" value="-1.05711" />
                                        <Key frame="12" value="-0.705531" />
                                        <Key frame="13" value="-0.705531" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                                        <Key frame="3" value="4.56796" />
                                        <Key frame="4" value="5.00743" />
                                        <Key frame="5" value="4.91954" />
                                        <Key frame="7" value="4.56796" />
                                        <Key frame="8" value="5.00743" />
                                        <Key frame="9" value="4.91954" />
                                        <Key frame="11" value="4.56796" />
                                        <Key frame="12" value="5.00743" />
                                        <Key frame="13" value="4.91954" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                                        <Key frame="3" value="-5.97423" />
                                        <Key frame="4" value="-6.67737" />
                                        <Key frame="5" value="-6.67737" />
                                        <Key frame="7" value="-5.97423" />
                                        <Key frame="8" value="-6.67737" />
                                        <Key frame="9" value="-6.67737" />
                                        <Key frame="11" value="-5.97423" />
                                        <Key frame="12" value="-6.67737" />
                                        <Key frame="13" value="-6.67737" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                                        <Key frame="3" value="-0.964409" />
                                        <Key frame="4" value="-20.74" />
                                        <Key frame="5" value="-35.8574" />
                                        <Key frame="7" value="-0.964409" />
                                        <Key frame="8" value="-20.74" />
                                        <Key frame="9" value="-35.8574" />
                                        <Key frame="11" value="-0.964409" />
                                        <Key frame="12" value="-20.74" />
                                        <Key frame="13" value="-35.8574" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                                        <Key frame="3" value="-66.888" />
                                        <Key frame="4" value="-63.5481" />
                                        <Key frame="5" value="-61.4387" />
                                        <Key frame="7" value="-66.888" />
                                        <Key frame="8" value="-63.5481" />
                                        <Key frame="9" value="-61.4387" />
                                        <Key frame="11" value="-66.888" />
                                        <Key frame="12" value="-63.5481" />
                                        <Key frame="13" value="-61.4387" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                                        <Key frame="3" value="0.2912" />
                                        <Key frame="4" value="0.2904" />
                                        <Key frame="5" value="0.2872" />
                                        <Key frame="7" value="0.2912" />
                                        <Key frame="8" value="0.2904" />
                                        <Key frame="9" value="0.2872" />
                                        <Key frame="11" value="0.2912" />
                                        <Key frame="12" value="0.2904" />
                                        <Key frame="13" value="0.2872" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                                        <Key frame="3" value="7.56109" />
                                        <Key frame="4" value="7.20952" />
                                        <Key frame="5" value="7.20952" />
                                        <Key frame="7" value="7.56109" />
                                        <Key frame="8" value="7.20952" />
                                        <Key frame="9" value="7.20952" />
                                        <Key frame="11" value="7.56109" />
                                        <Key frame="12" value="7.20952" />
                                        <Key frame="13" value="7.20952" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                                        <Key frame="3" value="6.68218" />
                                        <Key frame="4" value="6.5064" />
                                        <Key frame="5" value="6.59429" />
                                        <Key frame="7" value="6.68218" />
                                        <Key frame="8" value="6.5064" />
                                        <Key frame="9" value="6.59429" />
                                        <Key frame="11" value="6.68218" />
                                        <Key frame="12" value="6.5064" />
                                        <Key frame="13" value="6.59429" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                                        <Key frame="3" value="-9.75358" />
                                        <Key frame="4" value="-9.5778" />
                                        <Key frame="5" value="-9.5778" />
                                        <Key frame="7" value="-9.75358" />
                                        <Key frame="8" value="-9.5778" />
                                        <Key frame="9" value="-9.5778" />
                                        <Key frame="11" value="-9.75358" />
                                        <Key frame="12" value="-9.5778" />
                                        <Key frame="13" value="-9.5778" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                                        <Key frame="3" value="-5.27591" />
                                        <Key frame="4" value="-5.27591" />
                                        <Key frame="5" value="-5.27591" />
                                        <Key frame="7" value="-5.27591" />
                                        <Key frame="8" value="-5.27591" />
                                        <Key frame="9" value="-5.27591" />
                                        <Key frame="11" value="-5.27591" />
                                        <Key frame="12" value="-5.27591" />
                                        <Key frame="13" value="-5.27591" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                                        <Key frame="3" value="-13.7135" />
                                        <Key frame="4" value="-26.282" />
                                        <Key frame="5" value="14.9392" />
                                        <Key frame="7" value="-13.7135" />
                                        <Key frame="8" value="-26.282" />
                                        <Key frame="9" value="14.9392" />
                                        <Key frame="11" value="-13.7135" />
                                        <Key frame="12" value="-26.282" />
                                        <Key frame="13" value="14.9392" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                                        <Key frame="3" value="2.63435" />
                                        <Key frame="4" value="-2.02391" />
                                        <Key frame="5" value="-1.93602" />
                                        <Key frame="7" value="2.63435" />
                                        <Key frame="8" value="-2.02391" />
                                        <Key frame="9" value="-1.93602" />
                                        <Key frame="11" value="2.63435" />
                                        <Key frame="12" value="-2.02391" />
                                        <Key frame="13" value="-1.93602" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                                        <Key frame="3" value="-15.5592" />
                                        <Key frame="4" value="30.3202" />
                                        <Key frame="5" value="-49.5733" />
                                        <Key frame="7" value="-15.5592" />
                                        <Key frame="8" value="30.3202" />
                                        <Key frame="9" value="-49.5733" />
                                        <Key frame="11" value="-15.5592" />
                                        <Key frame="12" value="30.3202" />
                                        <Key frame="13" value="-49.5733" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                                        <Key frame="3" value="4.57277" />
                                        <Key frame="4" value="4.48488" />
                                        <Key frame="5" value="4.74855" />
                                        <Key frame="7" value="4.57277" />
                                        <Key frame="8" value="4.48488" />
                                        <Key frame="9" value="4.74855" />
                                        <Key frame="11" value="4.57277" />
                                        <Key frame="12" value="4.48488" />
                                        <Key frame="13" value="4.74855" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                                        <Key frame="3" value="5.97904" />
                                        <Key frame="4" value="6.06693" />
                                        <Key frame="5" value="6.24271" />
                                        <Key frame="7" value="5.97904" />
                                        <Key frame="8" value="6.06693" />
                                        <Key frame="9" value="6.24271" />
                                        <Key frame="11" value="5.97904" />
                                        <Key frame="12" value="6.06693" />
                                        <Key frame="13" value="6.24271" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                                        <Key frame="3" value="10.1978" />
                                        <Key frame="4" value="52.5617" />
                                        <Key frame="5" value="44.2119" />
                                        <Key frame="7" value="10.1978" />
                                        <Key frame="8" value="52.5617" />
                                        <Key frame="9" value="44.2119" />
                                        <Key frame="11" value="10.1978" />
                                        <Key frame="12" value="52.5617" />
                                        <Key frame="13" value="44.2119" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                                        <Key frame="3" value="71.2778" />
                                        <Key frame="4" value="79.9791" />
                                        <Key frame="5" value="38.67" />
                                        <Key frame="7" value="71.2778" />
                                        <Key frame="8" value="79.9791" />
                                        <Key frame="9" value="38.67" />
                                        <Key frame="11" value="71.2778" />
                                        <Key frame="12" value="79.9791" />
                                        <Key frame="13" value="38.67" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                                        <Key frame="3" value="0.3184" />
                                        <Key frame="4" value="0.3192" />
                                        <Key frame="5" value="0.3156" />
                                        <Key frame="7" value="0.3184" />
                                        <Key frame="8" value="0.3192" />
                                        <Key frame="9" value="0.3156" />
                                        <Key frame="11" value="0.3184" />
                                        <Key frame="12" value="0.3192" />
                                        <Key frame="13" value="0.3156" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                                        <Key frame="3" value="7.29261" />
                                        <Key frame="4" value="7.02893" />
                                        <Key frame="5" value="7.3805" />
                                        <Key frame="7" value="7.29261" />
                                        <Key frame="8" value="7.02893" />
                                        <Key frame="9" value="7.3805" />
                                        <Key frame="11" value="7.29261" />
                                        <Key frame="12" value="7.02893" />
                                        <Key frame="13" value="7.3805" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                                        <Key frame="3" value="-6.67737" />
                                        <Key frame="4" value="-6.94104" />
                                        <Key frame="5" value="-6.85315" />
                                        <Key frame="7" value="-6.67737" />
                                        <Key frame="8" value="-6.94104" />
                                        <Key frame="9" value="-6.85315" />
                                        <Key frame="11" value="-6.67737" />
                                        <Key frame="12" value="-6.94104" />
                                        <Key frame="13" value="-6.85315" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                                        <Key frame="3" value="-9.75358" />
                                        <Key frame="4" value="-9.5778" />
                                        <Key frame="5" value="-9.5778" />
                                        <Key frame="7" value="-9.75358" />
                                        <Key frame="8" value="-9.5778" />
                                        <Key frame="9" value="-9.5778" />
                                        <Key frame="11" value="-9.75358" />
                                        <Key frame="12" value="-9.5778" />
                                        <Key frame="13" value="-9.5778" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                                        <Key frame="3" value="-5.09532" />
                                        <Key frame="4" value="-5.44688" />
                                        <Key frame="5" value="-5.53478" />
                                        <Key frame="7" value="-5.09532" />
                                        <Key frame="8" value="-5.44688" />
                                        <Key frame="9" value="-5.53478" />
                                        <Key frame="11" value="-5.09532" />
                                        <Key frame="12" value="-5.44688" />
                                        <Key frame="13" value="-5.53478" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                                        <Key frame="3" value="-6.67737" />
                                        <Key frame="4" value="16.5261" />
                                        <Key frame="5" value="-19.5096" />
                                        <Key frame="7" value="-6.67737" />
                                        <Key frame="8" value="16.5261" />
                                        <Key frame="9" value="-19.5096" />
                                        <Key frame="11" value="-6.67737" />
                                        <Key frame="12" value="16.5261" />
                                        <Key frame="13" value="-19.5096" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                                        <Key frame="3" value="-0.0902951" />
                                        <Key frame="4" value="-0.881327" />
                                        <Key frame="5" value="-13.362" />
                                        <Key frame="7" value="-0.0902951" />
                                        <Key frame="8" value="-0.881327" />
                                        <Key frame="9" value="-13.362" />
                                        <Key frame="11" value="-0.0902951" />
                                        <Key frame="12" value="-0.881327" />
                                        <Key frame="13" value="-13.362" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                                        <Key frame="3" value="20.5643" />
                                        <Key frame="4" value="44.3829" />
                                        <Key frame="5" value="6.50159" />
                                        <Key frame="7" value="20.5643" />
                                        <Key frame="8" value="44.3829" />
                                        <Key frame="9" value="6.50159" />
                                        <Key frame="11" value="20.5643" />
                                        <Key frame="12" value="44.3829" />
                                        <Key frame="13" value="6.50159" />
                                      </ActuatorCurve>
                                    </ActuatorList>
                                  </Timeline>
                                </Box>
                                <Box name="Play Sound" id="2" localization="8" tooltip="Play a sound file. Select the file in parameters. The format of the file can be wav or ogg (on virtual robot) and also mp3 (on a real robot).&#x0A;&#x0A;Note: There can be some delay to play ogg or mp3 (on a robot) files. We advise you to use wav if&#x0A;you want a fast play of the file." x="387" y="271">
                                  <bitmap>media/images/box/interaction/play_music.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Starts the music." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops the music." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                  <Parameter name="File name" inherits_from_parent="0" content_type="4" value="/../Car driving sound effects.mp3" default_value="" tooltip="Name of the file you want to play.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="5" />
                                  <Parameter name="Begin position (s)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="6" />
                                  <Parameter name="Volume (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="7" />
                                  <Parameter name="Balance L/R" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="8" />
                                  <Parameter name="Play in loop" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="9" />
                                  <Timeline enable="0">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                          <Box name="Play Sound File" id="2" localization="8" tooltip="Play the sound." x="442" y="70">
                                            <bitmap>media/images/box/interaction/play_music.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.player = self.session().service('ALAudioPlayer')
        self.playerStop = self.session().service('ALAudioPlayer') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.playerStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            if (self.getParameter("Play in loop")) :
               id = self.player.pCall("playFileInLoop",p,self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            else :
               id = self.player.pCall("playFileFromPosition",p,self.getParameter("Begin position (s)"),self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            self.ids.append(id)
            self.player.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Begin position (s)" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="5" />
                                            <Parameter name="Volume (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="6" />
                                            <Parameter name="Balance L/R" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="7" />
                                            <Parameter name="Play in loop" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="8" />
                                          </Box>
                                          <Box name="Get Attached File" id="1" localization="8" tooltip="Use this box to choose an attached file in its parameters. The filename will be sent on&#x0A;the output when the input is stimulated." x="216" y="71">
                                            <bitmap>media/images/box/folder.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        pass

    def onInput_onStart(self):
        self.onStopped(self.behaviorAbsolutePath() + self.getParameter("File name"))]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the filepath on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The filepath of the selected resource file." id="3" />
                                            <Parameter name="File name" inherits_from_parent="1" content_type="4" value="" default_value="" tooltip="Name of the file which is going to be sent on the box output.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="4" />
                                          </Box>
                                          <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                          <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                          <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                  </Timeline>
                                  <Resource name="Audio player" type="Lock" timeout="0" />
                                </Box>
                                <Box name="Guessing" id="15" localization="8" tooltip="" x="883" y="112">
                                  <bitmap>media/images/box/box-diagram.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Input name="InitialGuess" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                  <Timeline enable="0">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                          <Box name="Counter" id="11" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="682" y="493">
                                            <bitmap>media/images/box/loop.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.onInput_onInit()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()
        self.onReinitialized()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                            <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                            <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                            <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                            <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                            <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                            <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="5" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                          </Box>
                                          <Box name="Switch Case" id="13" localization="8" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." plugin="dispatcher_plugin" x="904" y="323">
                                            <bitmap>media/images/box/interaction/choice.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
		  GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
		  GeneratedClass.__init__( self )

	def onInput_onStart(self, p):
		p = self.typeConversion(p)
		if(p == self.typeConversion(0)):
			self.output_1(p)
		elif(p == self.typeConversion(1)):
			self.output_2(p)
		elif(p == self.typeConversion(2)):
			self.output_3(p)
		else:
			self.onDefault()

	def typeConversion(self, p):
		try:
			p = float(p)
			pint = int(p)
			if( p == pint ):
				p = pint
		except:
			p = str(p)
		return p]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <keywords>
                                                <keyword>0</keyword>
                                                <keyword>1</keyword>
                                                <keyword>2</keyword>
                                                <keyword></keyword>
                                              </keywords>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" />
                                            <Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" />
                                            <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
                                            <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
                                            <Output name="output_3" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" />
                                          </Box>
                                          <Box name="Animated Say" id="14" localization="8" tooltip="Say some text with animations. The text can be localized." x="555" y="341">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="95" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Parameter name="Text" inherits_from_parent="0" content_type="5" value="not quite" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                                            <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                                              <Choice value="disabled" />
                                              <Choice value="random" />
                                              <Choice value="contextual" />
                                            </Parameter>
                                            <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Animated Say (1)" id="12" localization="8" tooltip="Say some text with animations. The text can be localized." x="1638" y="361">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Turn that frown upside down No Ell" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                                            <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                                              <Choice value="disabled" />
                                              <Choice value="random" />
                                              <Choice value="contextual" />
                                            </Parameter>
                                            <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Tactile Head" id="6" localization="8" tooltip="Detect touch on head tactile sensor." x="1021" y="673">
                                            <bitmap>media/images/box/sensors/tactileHead.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
            self.onStopped() #~ activate output of the box
        pass]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Input name="FrontTactilTouched" type="0" type_size="1" nature="4" stm_value_name="FrontTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" />
                                            <Input name="MiddleTactilTouched" type="0" type_size="1" nature="4" stm_value_name="MiddleTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="5" />
                                            <Input name="RearTactilTouched" type="0" type_size="1" nature="4" stm_value_name="RearTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="6" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="7" />
                                            <Output name="frontTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The front tactile head sensor was touched." id="8" />
                                            <Output name="middleTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The middle tactile head sensor was touched." id="9" />
                                            <Output name="rearTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The rear tactile head sensor was touched." id="10" />
                                            <Timeline enable="0">
                                              <BehaviorLayer name="behavior_layer1">
                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                  <Diagram>
                                                    <Box name="If &gt; 0" id="1" localization="8" tooltip="Transmit only if value is &gt; 0." x="260" y="17">
                                                      <bitmap>media/images/box/box-diagram.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                    </Box>
                                                    <Box name="If &gt; 0" id="2" localization="8" tooltip="Transmit only if value is &gt; 0." x="256" y="119">
                                                      <bitmap>media/images/box/box-diagram.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                    </Box>
                                                    <Box name="If &gt; 0" id="3" localization="8" tooltip="Transmit only if value is &gt; 0." x="261" y="223">
                                                      <bitmap>media/images/box/box-diagram.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                    </Box>
                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                    <Link inputowner="0" indexofinput="8" outputowner="1" indexofoutput="4" />
                                                    <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="5" />
                                                    <Link inputowner="0" indexofinput="9" outputowner="2" indexofoutput="4" />
                                                    <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="6" />
                                                    <Link inputowner="0" indexofinput="10" outputowner="3" indexofoutput="4" />
                                                  </Diagram>
                                                </BehaviorKeyframe>
                                              </BehaviorLayer>
                                            </Timeline>
                                            <Resource name="Head-sequence" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Animated Say (2)" id="5" localization="8" tooltip="Say some text with animations. The text can be localized." x="1075" y="858">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Parameter name="Text" inherits_from_parent="0" content_type="5" value="If you think it was a roller coaster, touch the front of my head. If you think it is a formula 1 race car driver, press the middle of my head, if you think its an allstate commercial, press the back of my head" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                                            <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                                              <Choice value="disabled" />
                                              <Choice value="random" />
                                              <Choice value="contextual" />
                                            </Parameter>
                                            <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Animated Say (3)" id="8" localization="8" tooltip="Say some text with animations. The text can be localized." x="1633" y="621">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Congrats! You guessed it right" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                                            <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                                              <Choice value="disabled" />
                                              <Choice value="random" />
                                              <Choice value="contextual" />
                                            </Parameter>
                                            <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Link inputowner="13" indexofinput="2" outputowner="11" indexofoutput="4" />
                                          <Link inputowner="11" indexofinput="2" outputowner="14" indexofoutput="4" />
                                          <Link inputowner="11" indexofinput="3" outputowner="0" indexofoutput="2" />
                                          <Link inputowner="12" indexofinput="2" outputowner="13" indexofoutput="6" />
                                          <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="4" />
                                          <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="4" />
                                          <Link inputowner="6" indexofinput="2" outputowner="13" indexofoutput="4" />
                                          <Link inputowner="5" indexofinput="2" outputowner="13" indexofoutput="4" />
                                          <Link inputowner="6" indexofinput="2" outputowner="13" indexofoutput="5" />
                                          <Link inputowner="5" indexofinput="2" outputowner="13" indexofoutput="5" />
                                          <Link inputowner="0" indexofinput="5" outputowner="8" indexofoutput="4" />
                                          <Link inputowner="0" indexofinput="5" outputowner="12" indexofoutput="4" />
                                          <Link inputowner="8" indexofinput="2" outputowner="6" indexofoutput="9" />
                                          <Link inputowner="14" indexofinput="2" outputowner="6" indexofoutput="8" />
                                          <Link inputowner="14" indexofinput="2" outputowner="6" indexofoutput="10" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                  </Timeline>
                                </Box>
                                <Link inputowner="2" indexofinput="3" outputowner="1" indexofoutput="4" />
                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="15" indexofinput="4" outputowner="1" indexofoutput="4" />
                                <Link inputowner="15" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="0" indexofinput="4" outputowner="15" indexofoutput="5" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                        </Timeline>
                      </Box>
                      <Box name="Golf" id="4" localization="8" tooltip="" x="828" y="87">
                        <bitmap>media/images/box/box-diagram.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="0">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram>
                                <Box name="Golf" id="1" localization="8" tooltip="ID : #04E 0002&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Golf" x="446" y="178">
                                  <bitmap>media/images/box/movement/move.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="327">
                                    <ActuatorList model="">
                                      <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                                        <Key frame="1" value="-11.3404" />
                                        <Key frame="74" value="29.5" />
                                        <Key frame="95" value="-11.9" />
                                        <Key frame="112" value="-11.9" />
                                        <Key frame="128" value="16.3455" />
                                        <Key frame="161" value="29.5" />
                                        <Key frame="179" value="-11.9" />
                                        <Key frame="191" value="16.1697" />
                                        <Key frame="230" value="-11.9" />
                                        <Key frame="239" value="-10.4615" />
                                        <Key frame="289" value="-10.4615" />
                                        <Key frame="304" value="2.2" />
                                        <Key frame="327" value="-6.85796" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                                        <Key frame="1" value="-0.178186" />
                                        <Key frame="49" value="-5.89115" />
                                        <Key frame="74" value="-5.89115" />
                                        <Key frame="95" value="61.2" />
                                        <Key frame="112" value="61.2" />
                                        <Key frame="128" value="-5.89115" />
                                        <Key frame="161" value="-5.89115" />
                                        <Key frame="179" value="61.2" />
                                        <Key frame="191" value="-5.18802" />
                                        <Key frame="230" value="61.2" />
                                        <Key frame="239" value="60.555" />
                                        <Key frame="289" value="60.555" />
                                        <Key frame="327" value="-0.61764" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                                        <Key frame="1" value="5.09532" />
                                        <Key frame="21" value="6.94104" />
                                        <Key frame="49" value="6.94104" />
                                        <Key frame="86" value="10.8083" />
                                        <Key frame="97" value="10.8083" />
                                        <Key frame="145" value="9.31412" />
                                        <Key frame="158" value="9.31412" />
                                        <Key frame="199" value="6.94104" />
                                        <Key frame="223" value="-10.2857" />
                                        <Key frame="239" value="6.67737" />
                                        <Key frame="289" value="6.67737" />
                                        <Key frame="304" value="-10.5494" />
                                        <Key frame="327" value="-4.92435" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                                        <Key frame="1" value="-7.46839" />
                                        <Key frame="21" value="3.69386" />
                                        <Key frame="49" value="3.69386" />
                                        <Key frame="86" value="-1.40386" />
                                        <Key frame="97" value="-1.40386" />
                                        <Key frame="145" value="6.06693" />
                                        <Key frame="158" value="6.06693" />
                                        <Key frame="199" value="3.69386" />
                                        <Key frame="223" value="3.86964" />
                                        <Key frame="239" value="3.69386" />
                                        <Key frame="289" value="3.69386" />
                                        <Key frame="304" value="3.86964" />
                                        <Key frame="327" value="0.353968" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                                        <Key frame="1" value="-24.0799" />
                                        <Key frame="24" value="-88.5" />
                                        <Key frame="49" value="-32.4296" />
                                        <Key frame="80" value="-2" />
                                        <Key frame="127" value="-36.3848" />
                                        <Key frame="162" value="-6.06212" />
                                        <Key frame="179" value="-36.3848" />
                                        <Key frame="199" value="-35.2422" />
                                        <Key frame="239" value="-34.9785" />
                                        <Key frame="289" value="-34.9785" />
                                        <Key frame="304" value="-62.0492" />
                                        <Key frame="327" value="-9.13833" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                                        <Key frame="1" value="-67.4154" />
                                        <Key frame="24" value="-108.285" />
                                        <Key frame="49" value="-73.7436" />
                                        <Key frame="80" value="-93.3434" />
                                        <Key frame="127" value="-59.3293" />
                                        <Key frame="162" value="-57.8352" />
                                        <Key frame="179" value="-59.3293" />
                                        <Key frame="199" value="-59.6809" />
                                        <Key frame="239" value="-59.6809" />
                                        <Key frame="289" value="-59.6809" />
                                        <Key frame="304" value="-72.8646" />
                                        <Key frame="327" value="-59.6809" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                                        <Key frame="1" value="0.3032" />
                                        <Key frame="24" value="0.5004" />
                                        <Key frame="49" value="0.7624" />
                                        <Key frame="80" value="0.7628" />
                                        <Key frame="127" value="0.7628" />
                                        <Key frame="162" value="1" />
                                        <Key frame="179" value="0.7628" />
                                        <Key frame="199" value="0.7644" />
                                        <Key frame="239" value="0.7648" />
                                        <Key frame="289" value="0.7648" />
                                        <Key frame="304" value="0.54" />
                                        <Key frame="327" value="0.3328" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                                        <Key frame="1" value="7.4732" />
                                        <Key frame="21" value="-13.3571" />
                                        <Key frame="49" value="-13.3571" />
                                        <Key frame="86" value="-16.6091" />
                                        <Key frame="97" value="-16.6091" />
                                        <Key frame="145" value="-16.1697" />
                                        <Key frame="158" value="-16.1697" />
                                        <Key frame="199" value="-13.3571" />
                                        <Key frame="223" value="-33.1328" />
                                        <Key frame="239" value="-13.7966" />
                                        <Key frame="289" value="-13.7966" />
                                        <Key frame="304" value="-33.8359" />
                                        <Key frame="327" value="17.4929" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                                        <Key frame="1" value="5.89115" />
                                        <Key frame="21" value="-5.2711" />
                                        <Key frame="49" value="-5.2711" />
                                        <Key frame="86" value="-1.14019" />
                                        <Key frame="97" value="-1.14019" />
                                        <Key frame="145" value="-8.17153" />
                                        <Key frame="158" value="-8.17153" />
                                        <Key frame="199" value="-5.2711" />
                                        <Key frame="223" value="-4.91954" />
                                        <Key frame="239" value="-5.2711" />
                                        <Key frame="289" value="-5.2711" />
                                        <Key frame="304" value="-5.97423" />
                                        <Key frame="327" value="-0.964409" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                                        <Key frame="1" value="-9.66569" />
                                        <Key frame="21" value="-5.53478" />
                                        <Key frame="49" value="-5.53478" />
                                        <Key frame="86" value="-6.58948" />
                                        <Key frame="97" value="-6.58948" />
                                        <Key frame="145" value="-6.50159" />
                                        <Key frame="158" value="-6.50159" />
                                        <Key frame="199" value="-5.62267" />
                                        <Key frame="223" value="-7.20472" />
                                        <Key frame="239" value="-5.88634" />
                                        <Key frame="289" value="-5.88634" />
                                        <Key frame="304" value="-7.81997" />
                                        <Key frame="327" value="-6.94104" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                                        <Key frame="1" value="-5.18802" />
                                        <Key frame="21" value="-5.27591" />
                                        <Key frame="49" value="-5.27591" />
                                        <Key frame="86" value="-5.27591" />
                                        <Key frame="97" value="-5.27591" />
                                        <Key frame="145" value="-4.48488" />
                                        <Key frame="158" value="-4.48488" />
                                        <Key frame="199" value="-5.18802" />
                                        <Key frame="223" value="33.748" />
                                        <Key frame="239" value="-4.83644" />
                                        <Key frame="289" value="-4.83644" />
                                        <Key frame="304" value="31.1113" />
                                        <Key frame="327" value="-3.60597" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                                        <Key frame="1" value="85.2526" />
                                        <Key frame="24" value="109.686" />
                                        <Key frame="49" value="65.1254" />
                                        <Key frame="80" value="49.7443" />
                                        <Key frame="127" value="76.0239" />
                                        <Key frame="162" value="63.3675" />
                                        <Key frame="179" value="76.0239" />
                                        <Key frame="199" value="76.5513" />
                                        <Key frame="239" value="76.6392" />
                                        <Key frame="289" value="76.6392" />
                                        <Key frame="304" value="104.677" />
                                        <Key frame="327" value="102.831" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                                        <Key frame="1" value="4.91954" />
                                        <Key frame="24" value="-10.1978" />
                                        <Key frame="49" value="-18" />
                                        <Key frame="80" value="-18" />
                                        <Key frame="127" value="-18" />
                                        <Key frame="162" value="-18" />
                                        <Key frame="179" value="-18" />
                                        <Key frame="199" value="-18" />
                                        <Key frame="239" value="-15.9987" />
                                        <Key frame="289" value="-15.9987" />
                                        <Key frame="304" value="28.0351" />
                                        <Key frame="327" value="9.48991" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                                        <Key frame="1" value="3.24959" />
                                        <Key frame="24" value="11.863" />
                                        <Key frame="49" value="6.2379" />
                                        <Key frame="80" value="5.88634" />
                                        <Key frame="127" value="-33.6649" />
                                        <Key frame="162" value="-50.4523" />
                                        <Key frame="179" value="-33.6649" />
                                        <Key frame="199" value="-34.7196" />
                                        <Key frame="239" value="-34.8075" />
                                        <Key frame="289" value="-34.8075" />
                                        <Key frame="304" value="-51.507" />
                                        <Key frame="327" value="-60.8235" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                                        <Key frame="1" value="5.3638" />
                                        <Key frame="21" value="5.89115" />
                                        <Key frame="49" value="5.89115" />
                                        <Key frame="86" value="7.20952" />
                                        <Key frame="97" value="7.20952" />
                                        <Key frame="145" value="9.6705" />
                                        <Key frame="158" value="9.6705" />
                                        <Key frame="199" value="5.62747" />
                                        <Key frame="223" value="-13.5329" />
                                        <Key frame="239" value="5.01224" />
                                        <Key frame="289" value="5.01224" />
                                        <Key frame="304" value="-14.5876" />
                                        <Key frame="327" value="-4.04062" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                                        <Key frame="1" value="7.38531" />
                                        <Key frame="21" value="-1.0523" />
                                        <Key frame="49" value="-1.0523" />
                                        <Key frame="86" value="-6.67737" />
                                        <Key frame="97" value="-6.67737" />
                                        <Key frame="145" value="1.76024" />
                                        <Key frame="158" value="1.76024" />
                                        <Key frame="199" value="-1.0523" />
                                        <Key frame="223" value="-2.0191" />
                                        <Key frame="239" value="-1.0523" />
                                        <Key frame="289" value="-1.0523" />
                                        <Key frame="304" value="-1.57965" />
                                        <Key frame="327" value="-1.0523" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                                        <Key frame="1" value="24.4363" />
                                        <Key frame="24" value="87.8062" />
                                        <Key frame="49" value="24.6121" />
                                        <Key frame="80" value="2.1997" />
                                        <Key frame="127" value="47.7276" />
                                        <Key frame="162" value="2.1997" />
                                        <Key frame="179" value="47.7276" />
                                        <Key frame="199" value="46.8487" />
                                        <Key frame="239" value="46.1456" />
                                        <Key frame="289" value="46.1456" />
                                        <Key frame="304" value="57.2199" />
                                        <Key frame="327" value="2.90283" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                                        <Key frame="1" value="67.7621" />
                                        <Key frame="24" value="93.866" />
                                        <Key frame="49" value="71.8051" />
                                        <Key frame="80" value="98.9637" />
                                        <Key frame="127" value="76.1997" />
                                        <Key frame="162" value="88.0651" />
                                        <Key frame="179" value="76.1997" />
                                        <Key frame="199" value="76.9029" />
                                        <Key frame="239" value="76.9908" />
                                        <Key frame="289" value="76.9908" />
                                        <Key frame="304" value="89.9987" />
                                        <Key frame="327" value="93.3386" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                                        <Key frame="1" value="0.306" />
                                        <Key frame="24" value="0.2544" />
                                        <Key frame="49" value="0.17" />
                                        <Key frame="80" value="0.26" />
                                        <Key frame="127" value="0.32" />
                                        <Key frame="162" value="0.26" />
                                        <Key frame="179" value="0.32" />
                                        <Key frame="199" value="0.3172" />
                                        <Key frame="239" value="0.3172" />
                                        <Key frame="289" value="0.3172" />
                                        <Key frame="304" value="0.5188" />
                                        <Key frame="327" value="0.0472" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                                        <Key frame="1" value="7.3805" />
                                        <Key frame="21" value="-12.483" />
                                        <Key frame="49" value="-12.483" />
                                        <Key frame="86" value="-14.2409" />
                                        <Key frame="97" value="-14.2409" />
                                        <Key frame="145" value="-15.9987" />
                                        <Key frame="158" value="-15.9987" />
                                        <Key frame="199" value="-13.0104" />
                                        <Key frame="223" value="-29.4461" />
                                        <Key frame="239" value="-13.274" />
                                        <Key frame="289" value="-13.274" />
                                        <Key frame="304" value="-32.6981" />
                                        <Key frame="327" value="19.0701" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                                        <Key frame="1" value="-5.79845" />
                                        <Key frame="21" value="3.1665" />
                                        <Key frame="49" value="3.1665" />
                                        <Key frame="86" value="8.35212" />
                                        <Key frame="97" value="8.35212" />
                                        <Key frame="145" value="0.61764" />
                                        <Key frame="158" value="0.61764" />
                                        <Key frame="199" value="3.1665" />
                                        <Key frame="223" value="5.01224" />
                                        <Key frame="239" value="3.1665" />
                                        <Key frame="289" value="3.1665" />
                                        <Key frame="304" value="3.69386" />
                                        <Key frame="327" value="0.881327" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                                        <Key frame="1" value="-9.66569" />
                                        <Key frame="21" value="-5.53478" />
                                        <Key frame="49" value="-5.53478" />
                                        <Key frame="86" value="-6.58948" />
                                        <Key frame="97" value="-6.58948" />
                                        <Key frame="145" value="-6.50159" />
                                        <Key frame="158" value="-6.50159" />
                                        <Key frame="199" value="-5.62267" />
                                        <Key frame="223" value="-7.20472" />
                                        <Key frame="239" value="-5.88634" />
                                        <Key frame="289" value="-5.88634" />
                                        <Key frame="304" value="-7.81997" />
                                        <Key frame="327" value="-6.94104" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                                        <Key frame="1" value="-5.18321" />
                                        <Key frame="21" value="-5.29" />
                                        <Key frame="49" value="-5.29" />
                                        <Key frame="86" value="-5.00743" />
                                        <Key frame="97" value="-5.00743" />
                                        <Key frame="145" value="-5.2711" />
                                        <Key frame="158" value="-5.2711" />
                                        <Key frame="199" value="-5.18321" />
                                        <Key frame="223" value="32.9618" />
                                        <Key frame="239" value="-4.83163" />
                                        <Key frame="289" value="-4.83163" />
                                        <Key frame="304" value="34.456" />
                                        <Key frame="327" value="-5.29" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                                        <Key frame="1" value="86.2242" />
                                        <Key frame="24" value="105.297" />
                                        <Key frame="49" value="62.4055" />
                                        <Key frame="80" value="50.7159" />
                                        <Key frame="127" value="86.5758" />
                                        <Key frame="162" value="64.1634" />
                                        <Key frame="179" value="86.5758" />
                                        <Key frame="199" value="86.1363" />
                                        <Key frame="239" value="86.0484" />
                                        <Key frame="289" value="86.0484" />
                                        <Key frame="304" value="107.318" />
                                        <Key frame="327" value="99.0564" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                                        <Key frame="1" value="-4.57277" />
                                        <Key frame="24" value="3.60116" />
                                        <Key frame="49" value="18" />
                                        <Key frame="80" value="18" />
                                        <Key frame="127" value="18" />
                                        <Key frame="162" value="18" />
                                        <Key frame="179" value="18" />
                                        <Key frame="199" value="18" />
                                        <Key frame="239" value="16.697" />
                                        <Key frame="289" value="16.697" />
                                        <Key frame="304" value="-18.6354" />
                                        <Key frame="327" value="-6.5064" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                                        <Key frame="1" value="3.95273" />
                                        <Key frame="24" value="49.1291" />
                                        <Key frame="49" value="0.612832" />
                                        <Key frame="80" value="-2.81494" />
                                        <Key frame="127" value="-9.58261" />
                                        <Key frame="162" value="-0.353968" />
                                        <Key frame="179" value="-9.58261" />
                                        <Key frame="199" value="-6.68218" />
                                        <Key frame="239" value="-6.5064" />
                                        <Key frame="289" value="-6.5064" />
                                        <Key frame="304" value="25.9256" />
                                        <Key frame="327" value="11.7751" />
                                      </ActuatorCurve>
                                    </ActuatorList>
                                  </Timeline>
                                  <Resource name="Standing" type="Lock" timeout="1" />
                                  <Resource name="All motors" type="Lock" timeout="1" />
                                </Box>
                                <Box name="Animated Say (1)" id="6" localization="8" tooltip="Say some text with animations. The text can be localized." x="489" y="364">
                                  <bitmap>media/images/box/interaction/say.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                  <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                  <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="50" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                  <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Four!" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                                  <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                                    <Choice value="disabled" />
                                    <Choice value="random" />
                                    <Choice value="contextual" />
                                  </Parameter>
                                  <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                                  <Resource name="Speech" type="Lock" timeout="0" />
                                </Box>
                                <Box name="Guessing" id="15" localization="8" tooltip="" x="972" y="181">
                                  <bitmap>media/images/box/box-diagram.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Input name="InitialGuess" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                  <Timeline enable="0">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                          <Box name="Counter" id="11" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="682" y="493">
                                            <bitmap>media/images/box/loop.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.onInput_onInit()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()
        self.onReinitialized()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                            <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                            <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                            <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                            <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                            <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                            <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="5" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                          </Box>
                                          <Box name="Switch Case" id="13" localization="8" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." plugin="dispatcher_plugin" x="904" y="323">
                                            <bitmap>media/images/box/interaction/choice.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
		  GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
		  GeneratedClass.__init__( self )

	def onInput_onStart(self, p):
		p = self.typeConversion(p)
		if(p == self.typeConversion(0)):
			self.output_1(p)
		elif(p == self.typeConversion(1)):
			self.output_2(p)
		elif(p == self.typeConversion(2)):
			self.output_3(p)
		else:
			self.onDefault()

	def typeConversion(self, p):
		try:
			p = float(p)
			pint = int(p)
			if( p == pint ):
				p = pint
		except:
			p = str(p)
		return p]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <keywords>
                                                <keyword>0</keyword>
                                                <keyword>1</keyword>
                                                <keyword>2</keyword>
                                                <keyword></keyword>
                                              </keywords>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" />
                                            <Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" />
                                            <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
                                            <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
                                            <Output name="output_3" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" />
                                          </Box>
                                          <Box name="Animated Say" id="14" localization="8" tooltip="Say some text with animations. The text can be localized." x="972" y="802">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="95" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Parameter name="Text" inherits_from_parent="0" content_type="5" value="not quite" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                                            <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                                              <Choice value="disabled" />
                                              <Choice value="random" />
                                              <Choice value="contextual" />
                                            </Parameter>
                                            <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Animated Say (1)" id="12" localization="8" tooltip="Say some text with animations. The text can be localized." x="1638" y="361">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Turn that frown upside down No Ell" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                                            <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                                              <Choice value="disabled" />
                                              <Choice value="random" />
                                              <Choice value="contextual" />
                                            </Parameter>
                                            <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Tactile Head" id="6" localization="8" tooltip="Detect touch on head tactile sensor." x="1021" y="673">
                                            <bitmap>media/images/box/sensors/tactileHead.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
            self.onStopped() #~ activate output of the box
        pass]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Input name="FrontTactilTouched" type="0" type_size="1" nature="4" stm_value_name="FrontTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" />
                                            <Input name="MiddleTactilTouched" type="0" type_size="1" nature="4" stm_value_name="MiddleTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="5" />
                                            <Input name="RearTactilTouched" type="0" type_size="1" nature="4" stm_value_name="RearTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="6" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="7" />
                                            <Output name="frontTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The front tactile head sensor was touched." id="8" />
                                            <Output name="middleTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The middle tactile head sensor was touched." id="9" />
                                            <Output name="rearTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The rear tactile head sensor was touched." id="10" />
                                            <Timeline enable="0">
                                              <BehaviorLayer name="behavior_layer1">
                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                  <Diagram>
                                                    <Box name="If &gt; 0" id="1" localization="8" tooltip="Transmit only if value is &gt; 0." x="260" y="17">
                                                      <bitmap>media/images/box/box-diagram.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                    </Box>
                                                    <Box name="If &gt; 0" id="2" localization="8" tooltip="Transmit only if value is &gt; 0." x="256" y="119">
                                                      <bitmap>media/images/box/box-diagram.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                    </Box>
                                                    <Box name="If &gt; 0" id="3" localization="8" tooltip="Transmit only if value is &gt; 0." x="261" y="223">
                                                      <bitmap>media/images/box/box-diagram.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                    </Box>
                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                    <Link inputowner="0" indexofinput="8" outputowner="1" indexofoutput="4" />
                                                    <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="5" />
                                                    <Link inputowner="0" indexofinput="9" outputowner="2" indexofoutput="4" />
                                                    <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="6" />
                                                    <Link inputowner="0" indexofinput="10" outputowner="3" indexofoutput="4" />
                                                  </Diagram>
                                                </BehaviorKeyframe>
                                              </BehaviorLayer>
                                            </Timeline>
                                            <Resource name="Head-sequence" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Animated Say (2)" id="5" localization="8" tooltip="Say some text with animations. The text can be localized." x="1075" y="858">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Parameter name="Text" inherits_from_parent="0" content_type="5" value="If you think it was a romantic date, touch the front of my head. If you think it is a golfer, press the middle of my head, if you think its jake from state farm, press the back of my head" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                                            <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                                              <Choice value="disabled" />
                                              <Choice value="random" />
                                              <Choice value="contextual" />
                                            </Parameter>
                                            <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Animated Say (3)" id="8" localization="8" tooltip="Say some text with animations. The text can be localized." x="1633" y="621">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Congrats! You guessed it right" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                                            <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                                              <Choice value="disabled" />
                                              <Choice value="random" />
                                              <Choice value="contextual" />
                                            </Parameter>
                                            <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Link inputowner="13" indexofinput="2" outputowner="11" indexofoutput="4" />
                                          <Link inputowner="11" indexofinput="2" outputowner="14" indexofoutput="4" />
                                          <Link inputowner="11" indexofinput="3" outputowner="0" indexofoutput="2" />
                                          <Link inputowner="12" indexofinput="2" outputowner="13" indexofoutput="6" />
                                          <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="4" />
                                          <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="4" />
                                          <Link inputowner="6" indexofinput="2" outputowner="13" indexofoutput="4" />
                                          <Link inputowner="5" indexofinput="2" outputowner="13" indexofoutput="4" />
                                          <Link inputowner="6" indexofinput="2" outputowner="13" indexofoutput="5" />
                                          <Link inputowner="5" indexofinput="2" outputowner="13" indexofoutput="5" />
                                          <Link inputowner="0" indexofinput="5" outputowner="8" indexofoutput="4" />
                                          <Link inputowner="0" indexofinput="5" outputowner="12" indexofoutput="4" />
                                          <Link inputowner="8" indexofinput="2" outputowner="6" indexofoutput="9" />
                                          <Link inputowner="14" indexofinput="2" outputowner="6" indexofoutput="8" />
                                          <Link inputowner="14" indexofinput="2" outputowner="6" indexofoutput="10" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                  </Timeline>
                                </Box>
                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="6" indexofinput="3" outputowner="1" indexofoutput="4" />
                                <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="15" indexofinput="4" outputowner="1" indexofoutput="4" />
                                <Link inputowner="15" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="0" indexofinput="4" outputowner="15" indexofoutput="5" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                        </Timeline>
                      </Box>
                      <Box name="Football" id="7" localization="8" tooltip="" x="849" y="609">
                        <bitmap>media/images/box/box-diagram.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="0">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram>
                                <Box name="Football" id="2" localization="8" tooltip="ID : #04E 0001&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Football" x="388" y="292">
                                  <bitmap>media/images/box/movement/move.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="195">
                                    <ActuatorList model="">
                                      <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                                        <Key frame="65" value="-17.4929" />
                                        <Key frame="87" value="-17.4929" />
                                        <Key frame="112" value="-20.7449" />
                                        <Key frame="155" value="7.46839" smooth="1" symmetrical="1">
                                          <Tangent side="left" interpType="bezier" abscissaParam="-14.3333" ordinateParam="-11.1223" />
                                          <Tangent side="right" interpType="bezier" abscissaParam="7" ordinateParam="5.43184" />
                                        </Key>
                                        <Key frame="176" value="15.3" />
                                        <Key frame="195" value="-9.84628" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                                        <Key frame="65" value="-70.5795" />
                                        <Key frame="87" value="-70.5795" />
                                        <Key frame="112" value="-58.011" />
                                        <Key frame="130" value="-62.845" />
                                        <Key frame="195" value="-0.793436" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                                        <Key frame="22" value="-16.7018" />
                                        <Key frame="39" value="-17.3171" />
                                        <Key frame="65" value="-17.405" />
                                        <Key frame="87" value="-17.405" />
                                        <Key frame="99" value="0.173378" />
                                        <Key frame="105" value="9.84147" />
                                        <Key frame="112" value="18.6306" />
                                        <Key frame="130" value="-3.95753" />
                                        <Key frame="155" value="3.60116" />
                                        <Key frame="176" value="3.16169" />
                                        <Key frame="195" value="5.2711" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                                        <Key frame="22" value="4.22121" />
                                        <Key frame="39" value="6.77007" />
                                        <Key frame="65" value="8.5279" />
                                        <Key frame="87" value="8.5279" />
                                        <Key frame="99" value="-4.48007" />
                                        <Key frame="105" value="-9.75358" />
                                        <Key frame="112" value="-13.445" />
                                        <Key frame="130" value="-20.0369" />
                                        <Key frame="155" value="-4.39218" />
                                        <Key frame="176" value="-14.3239" />
                                        <Key frame="195" value="-7.29261" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                                        <Key frame="15" value="-87.2741" />
                                        <Key frame="25" value="-80.3306" />
                                        <Key frame="44" value="-84.7252" />
                                        <Key frame="65" value="-77.0786" />
                                        <Key frame="87" value="-77.0786" />
                                        <Key frame="99" value="-35.1543" />
                                        <Key frame="112" value="-55.8967" />
                                        <Key frame="130" value="-40.9551" />
                                        <Key frame="155" value="-80.067" />
                                        <Key frame="176" value="-39.2852" />
                                        <Key frame="195" value="-22.9373" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                                        <Key frame="15" value="-33.6649" />
                                        <Key frame="25" value="-63.8118" />
                                        <Key frame="44" value="-19.5144" />
                                        <Key frame="65" value="-95.1891" />
                                        <Key frame="87" value="-95.1891" />
                                        <Key frame="99" value="-82.8843" />
                                        <Key frame="112" value="-42.542" />
                                        <Key frame="130" value="-21.0964" />
                                        <Key frame="155" value="-91.8493" />
                                        <Key frame="176" value="-57.7473" />
                                        <Key frame="195" value="-68.9974" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                                        <Key frame="15" value="0.9568" />
                                        <Key frame="25" value="0.8768" />
                                        <Key frame="44" value="0.61" />
                                        <Key frame="65" value="0.4304" />
                                        <Key frame="87" value="0.4304" />
                                        <Key frame="99" value="0.12" />
                                        <Key frame="105" value="0.23" />
                                        <Key frame="112" value="1" />
                                        <Key frame="130" value="0.42" />
                                        <Key frame="155" value="0.438" />
                                        <Key frame="176" value="0.3832" />
                                        <Key frame="195" value="0.3088" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                                        <Key frame="22" value="-41.3067" />
                                        <Key frame="39" value="-33.1328" />
                                        <Key frame="65" value="-17.7517" />
                                        <Key frame="87" value="-17.7517" />
                                        <Key frame="99" value="-0.349159" />
                                        <Key frame="105" value="10.4615" />
                                        <Key frame="112" value="16.8776" />
                                        <Key frame="130" value="-5.79845" />
                                        <Key frame="155" value="-17.2244" />
                                        <Key frame="176" value="2.81494" />
                                        <Key frame="195" value="7.56109" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                                        <Key frame="22" value="-2.1949" />
                                        <Key frame="39" value="-1.49175" />
                                        <Key frame="65" value="-0.43705" />
                                        <Key frame="87" value="-0.43705" />
                                        <Key frame="99" value="-1.75543" />
                                        <Key frame="105" value="0.353968" />
                                        <Key frame="112" value="-0.524941" />
                                        <Key frame="130" value="11.1647" />
                                        <Key frame="155" value="-2.98591" />
                                        <Key frame="176" value="17.7565" />
                                        <Key frame="195" value="5.80326" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                                        <Key frame="22" value="-14.0603" />
                                        <Key frame="39" value="-22.1463" />
                                        <Key frame="65" value="-27.5956" />
                                        <Key frame="87" value="-27.5956" />
                                        <Key frame="99" value="-42.4493" />
                                        <Key frame="105" value="-42.4493" />
                                        <Key frame="112" value="-44.6466" />
                                        <Key frame="130" value="-42.3614" />
                                        <Key frame="155" value="-47.1955" />
                                        <Key frame="195" value="-9.66569" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                                        <Key frame="22" value="60.9066" />
                                        <Key frame="39" value="53.6115" smooth="1" symmetrical="1">
                                          <Tangent side="left" interpType="bezier" abscissaParam="-5.66667" ordinateParam="3.54799" />
                                          <Tangent side="right" interpType="bezier" abscissaParam="8.66667" ordinateParam="-5.42634" />
                                        </Key>
                                        <Key frame="65" value="41.922" />
                                        <Key frame="87" value="41.922" />
                                        <Key frame="99" value="19.7732" />
                                        <Key frame="105" value="5.35899" />
                                        <Key frame="112" value="-4.92435" />
                                        <Key frame="130" value="45.2618" />
                                        <Key frame="155" value="37.2637" />
                                        <Key frame="176" value="11.6872" />
                                        <Key frame="195" value="-5.27591" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                                        <Key frame="15" value="25.0467" />
                                        <Key frame="25" value="39.2852" />
                                        <Key frame="44" value="9.92936" />
                                        <Key frame="87" value="8.34731" />
                                        <Key frame="99" value="-42.8057" />
                                        <Key frame="112" value="-1.76024" />
                                        <Key frame="130" value="40.1641" />
                                        <Key frame="155" value="62.0492" />
                                        <Key frame="176" value="81.1217" />
                                        <Key frame="195" value="84.1979" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                                        <Key frame="15" value="22.2342" />
                                        <Key frame="25" value="-3.34228" />
                                        <Key frame="44" value="23.0252" />
                                        <Key frame="65" value="38.0547" />
                                        <Key frame="87" value="38.0547" />
                                        <Key frame="99" value="-4.48488" />
                                        <Key frame="112" value="-18" />
                                        <Key frame="130" value="-8.61579" />
                                        <Key frame="155" value="13.0056" />
                                        <Key frame="176" value="11.863" />
                                        <Key frame="195" value="9.05044" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                                        <Key frame="15" value="-53.6164" />
                                        <Key frame="25" value="-28.6551" />
                                        <Key frame="44" value="-76.3803" />
                                        <Key frame="65" value="-104.5" />
                                        <Key frame="87" value="-104.5" />
                                        <Key frame="112" value="-63.3724" />
                                        <Key frame="130" value="-5.45169" />
                                        <Key frame="155" value="1.40386" />
                                        <Key frame="176" value="25.4862" />
                                        <Key frame="195" value="5.09532" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                                        <Key frame="22" value="-12.2146" />
                                        <Key frame="39" value="-11.5993" />
                                        <Key frame="65" value="22.4148" />
                                        <Key frame="87" value="22.4148" />
                                        <Key frame="99" value="-0.964409" />
                                        <Key frame="105" value="-17.7517" />
                                        <Key frame="112" value="-30.6718" />
                                        <Key frame="130" value="-51.7658" />
                                        <Key frame="155" value="-29.5292" />
                                        <Key frame="176" value="-7.81997" />
                                        <Key frame="195" value="4.92435" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                                        <Key frame="22" value="7.73688" />
                                        <Key frame="39" value="3.43018" />
                                        <Key frame="65" value="2.90283" />
                                        <Key frame="87" value="2.90283" />
                                        <Key frame="99" value="15.9987" />
                                        <Key frame="105" value="13.1862" />
                                        <Key frame="112" value="10.901" />
                                        <Key frame="130" value="7.56109" />
                                        <Key frame="155" value="8.44001" />
                                        <Key frame="176" value="5.18802" />
                                        <Key frame="195" value="7.38531" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                                        <Key frame="15" value="87.7183" />
                                        <Key frame="25" value="85.2574" />
                                        <Key frame="44" value="88.5" />
                                        <Key frame="65" value="75.853" />
                                        <Key frame="87" value="75.853" />
                                        <Key frame="99" value="70.8431" />
                                        <Key frame="112" value="67.679" />
                                        <Key frame="130" value="52.3859" />
                                        <Key frame="155" value="85.1695" />
                                        <Key frame="176" value="32.786" />
                                        <Key frame="195" value="22.9421" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                                        <Key frame="15" value="20.3885" />
                                        <Key frame="25" value="52.469" />
                                        <Key frame="44" value="-3.07861" />
                                        <Key frame="65" value="42.4493" />
                                        <Key frame="87" value="42.4493" />
                                        <Key frame="99" value="39.7247" />
                                        <Key frame="112" value="39.1094" />
                                        <Key frame="130" value="55.721" />
                                        <Key frame="155" value="106.698" />
                                        <Key frame="195" value="68.9047" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                                        <Key frame="15" value="0.9576" />
                                        <Key frame="25" value="0.9576" />
                                        <Key frame="44" value="0.9544" />
                                        <Key frame="65" value="0.9544" />
                                        <Key frame="87" value="0.9544" />
                                        <Key frame="99" value="0.9476" />
                                        <Key frame="112" value="0.9476" />
                                        <Key frame="130" value="0.42" />
                                        <Key frame="155" value="0.9564" />
                                        <Key frame="176" value="0.6464" />
                                        <Key frame="195" value="0.3056" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                                        <Key frame="22" value="-37.8837" />
                                        <Key frame="39" value="-15.1198" />
                                        <Key frame="65" value="-2.02391" />
                                        <Key frame="87" value="-2.02391" />
                                        <Key frame="99" value="-22.9421" />
                                        <Key frame="105" value="-25.491" />
                                        <Key frame="112" value="-34.2802" />
                                        <Key frame="130" value="-27.6883" />
                                        <Key frame="155" value="-27.6004" />
                                        <Key frame="176" value="13.0056" />
                                        <Key frame="195" value="7.46839" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                                        <Key frame="22" value="-4.91954" />
                                        <Key frame="39" value="-9.84147" />
                                        <Key frame="65" value="-14.7634" />
                                        <Key frame="87" value="-14.7634" />
                                        <Key frame="99" value="-21.3553" />
                                        <Key frame="105" value="-26.0135" />
                                        <Key frame="112" value="-28.7382" />
                                        <Key frame="130" value="-27.5077" />
                                        <Key frame="155" value="-17.0486" />
                                        <Key frame="176" value="-3.60116" />
                                        <Key frame="195" value="-5.79845" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                                        <Key frame="22" value="-14.0603" />
                                        <Key frame="39" value="-22.1463" />
                                        <Key frame="65" value="-27.5956" />
                                        <Key frame="87" value="-27.5956" />
                                        <Key frame="99" value="-42.4493" />
                                        <Key frame="105" value="-42.4493" />
                                        <Key frame="112" value="-44.6466" />
                                        <Key frame="130" value="-42.3614" />
                                        <Key frame="155" value="-47.1955" />
                                        <Key frame="195" value="-9.66569" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                                        <Key frame="22" value="52.6496" />
                                        <Key frame="39" value="31.5555" smooth="1" symmetrical="1">
                                          <Tangent side="left" interpType="bezier" abscissaParam="-5.19453" ordinateParam="7.14569" />
                                          <Tangent side="right" interpType="bezier" abscissaParam="7.94458" ordinateParam="-10.9287" />
                                        </Key>
                                        <Key frame="65" value="10.901" />
                                        <Key frame="87" value="10.901" />
                                        <Key frame="99" value="33.8407" />
                                        <Key frame="105" value="55.9015" />
                                        <Key frame="112" value="74.0072" />
                                        <Key frame="130" value="93.0797" />
                                        <Key frame="155" value="70.8431" />
                                        <Key frame="176" value="13.4498" />
                                        <Key frame="195" value="-5.2711" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                                        <Key frame="15" value="7.64898" />
                                        <Key frame="25" value="28.4793" />
                                        <Key frame="44" value="-19.4217" />
                                        <Key frame="65" value="7.64898" />
                                        <Key frame="87" value="7.64898" />
                                        <Key frame="112" value="69.7884" />
                                        <Key frame="155" value="78.4897" />
                                        <Key frame="176" value="102.22" />
                                        <Key frame="195" value="83.939" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                                        <Key frame="15" value="-13.5377" />
                                        <Key frame="25" value="-8.70368" />
                                        <Key frame="65" value="-54.5832" />
                                        <Key frame="87" value="-54.5832" />
                                        <Key frame="112" value="-9.23104" />
                                        <Key frame="130" value="-3.1665" />
                                        <Key frame="155" value="-16.7897" />
                                        <Key frame="195" value="-9.40682" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                                        <Key frame="15" value="-5.97904" />
                                        <Key frame="25" value="-7.56109" />
                                        <Key frame="44" value="39.461" />
                                        <Key frame="65" value="-11.3404" />
                                        <Key frame="87" value="-11.3404" />
                                        <Key frame="112" value="-26.7215" />
                                        <Key frame="130" value="-19.4265" />
                                        <Key frame="155" value="-19.5144" />
                                        <Key frame="195" value="4.65585" />
                                      </ActuatorCurve>
                                    </ActuatorList>
                                  </Timeline>
                                  <Resource name="Standing" type="Lock" timeout="1" />
                                  <Resource name="All motors" type="Lock" timeout="1" />
                                </Box>
                                <Box name="Play Sound" id="5" localization="8" tooltip="Play a sound file. Select the file in parameters. The format of the file can be wav or ogg (on virtual robot) and also mp3 (on a real robot).&#x0A;&#x0A;Note: There can be some delay to play ogg or mp3 (on a robot) files. We advise you to use wav if&#x0A;you want a fast play of the file." x="212" y="281">
                                  <bitmap>media/images/box/interaction/play_music.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Starts the music." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops the music." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                  <Parameter name="File name" inherits_from_parent="0" content_type="4" value="/../Sports Human Voice Male Football Quarterback Hut Hike 03.wav" default_value="" tooltip="Name of the file you want to play.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="5" />
                                  <Parameter name="Begin position (s)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="6" />
                                  <Parameter name="Volume (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="7" />
                                  <Parameter name="Balance L/R" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="8" />
                                  <Parameter name="Play in loop" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="9" />
                                  <Timeline enable="0">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                          <Box name="Play Sound File" id="2" localization="8" tooltip="Play the sound." x="442" y="70">
                                            <bitmap>media/images/box/interaction/play_music.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.player = self.session().service('ALAudioPlayer')
        self.playerStop = self.session().service('ALAudioPlayer') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.playerStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            if (self.getParameter("Play in loop")) :
               id = self.player.pCall("playFileInLoop",p,self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            else :
               id = self.player.pCall("playFileFromPosition",p,self.getParameter("Begin position (s)"),self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            self.ids.append(id)
            self.player.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Begin position (s)" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="5" />
                                            <Parameter name="Volume (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="6" />
                                            <Parameter name="Balance L/R" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="7" />
                                            <Parameter name="Play in loop" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="8" />
                                          </Box>
                                          <Box name="Get Attached File" id="1" localization="8" tooltip="Use this box to choose an attached file in its parameters. The filename will be sent on&#x0A;the output when the input is stimulated." x="216" y="71">
                                            <bitmap>media/images/box/folder.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        pass

    def onInput_onStart(self):
        self.onStopped(self.behaviorAbsolutePath() + self.getParameter("File name"))]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the filepath on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The filepath of the selected resource file." id="3" />
                                            <Parameter name="File name" inherits_from_parent="1" content_type="4" value="" default_value="" tooltip="Name of the file which is going to be sent on the box output.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="4" />
                                          </Box>
                                          <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                          <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                          <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                  </Timeline>
                                  <Resource name="Audio player" type="Lock" timeout="0" />
                                </Box>
                                <Box name="Guessing" id="15" localization="8" tooltip="" x="831" y="288">
                                  <bitmap>media/images/box/box-diagram.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Input name="InitialGuess" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                  <Timeline enable="0">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                          <Box name="Counter" id="11" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="682" y="493">
                                            <bitmap>media/images/box/loop.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.onInput_onInit()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()
        self.onReinitialized()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                            <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                            <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                            <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                            <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                            <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                            <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="5" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                          </Box>
                                          <Box name="Switch Case" id="13" localization="8" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." plugin="dispatcher_plugin" x="904" y="323">
                                            <bitmap>media/images/box/interaction/choice.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
		  GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
		  GeneratedClass.__init__( self )

	def onInput_onStart(self, p):
		p = self.typeConversion(p)
		if(p == self.typeConversion(0)):
			self.output_1(p)
		elif(p == self.typeConversion(1)):
			self.output_2(p)
		elif(p == self.typeConversion(2)):
			self.output_3(p)
		else:
			self.onDefault()

	def typeConversion(self, p):
		try:
			p = float(p)
			pint = int(p)
			if( p == pint ):
				p = pint
		except:
			p = str(p)
		return p]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <keywords>
                                                <keyword>0</keyword>
                                                <keyword>1</keyword>
                                                <keyword>2</keyword>
                                                <keyword></keyword>
                                              </keywords>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" />
                                            <Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" />
                                            <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
                                            <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
                                            <Output name="output_3" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" />
                                          </Box>
                                          <Box name="Animated Say" id="14" localization="8" tooltip="Say some text with animations. The text can be localized." x="555" y="341">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="95" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Parameter name="Text" inherits_from_parent="0" content_type="5" value="not quite" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                                            <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                                              <Choice value="disabled" />
                                              <Choice value="random" />
                                              <Choice value="contextual" />
                                            </Parameter>
                                            <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Animated Say (1)" id="12" localization="8" tooltip="Say some text with animations. The text can be localized." x="1638" y="361">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Turn that frown upside down No Ell" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                                            <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                                              <Choice value="disabled" />
                                              <Choice value="random" />
                                              <Choice value="contextual" />
                                            </Parameter>
                                            <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Tactile Head" id="6" localization="8" tooltip="Detect touch on head tactile sensor." x="1021" y="673">
                                            <bitmap>media/images/box/sensors/tactileHead.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
            self.onStopped() #~ activate output of the box
        pass]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Input name="FrontTactilTouched" type="0" type_size="1" nature="4" stm_value_name="FrontTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" />
                                            <Input name="MiddleTactilTouched" type="0" type_size="1" nature="4" stm_value_name="MiddleTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="5" />
                                            <Input name="RearTactilTouched" type="0" type_size="1" nature="4" stm_value_name="RearTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="6" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="7" />
                                            <Output name="frontTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The front tactile head sensor was touched." id="8" />
                                            <Output name="middleTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The middle tactile head sensor was touched." id="9" />
                                            <Output name="rearTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The rear tactile head sensor was touched." id="10" />
                                            <Timeline enable="0">
                                              <BehaviorLayer name="behavior_layer1">
                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                  <Diagram>
                                                    <Box name="If &gt; 0" id="1" localization="8" tooltip="Transmit only if value is &gt; 0." x="260" y="17">
                                                      <bitmap>media/images/box/box-diagram.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                    </Box>
                                                    <Box name="If &gt; 0" id="2" localization="8" tooltip="Transmit only if value is &gt; 0." x="256" y="119">
                                                      <bitmap>media/images/box/box-diagram.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                    </Box>
                                                    <Box name="If &gt; 0" id="3" localization="8" tooltip="Transmit only if value is &gt; 0." x="261" y="223">
                                                      <bitmap>media/images/box/box-diagram.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                    </Box>
                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                    <Link inputowner="0" indexofinput="8" outputowner="1" indexofoutput="4" />
                                                    <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="5" />
                                                    <Link inputowner="0" indexofinput="9" outputowner="2" indexofoutput="4" />
                                                    <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="6" />
                                                    <Link inputowner="0" indexofinput="10" outputowner="3" indexofoutput="4" />
                                                  </Diagram>
                                                </BehaviorKeyframe>
                                              </BehaviorLayer>
                                            </Timeline>
                                            <Resource name="Head-sequence" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Animated Say (2)" id="5" localization="8" tooltip="Say some text with animations. The text can be localized." x="1075" y="858">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Parameter name="Text" inherits_from_parent="0" content_type="5" value="If you think it was a sports anouncer, touch the front of my head. If you think it is a football player, press the middle of my head, if you think its a voltage divider, press the back of my head" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                                            <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                                              <Choice value="disabled" />
                                              <Choice value="random" />
                                              <Choice value="contextual" />
                                            </Parameter>
                                            <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Animated Say (3)" id="8" localization="8" tooltip="Say some text with animations. The text can be localized." x="1633" y="621">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Congrats! You guessed it right" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                                            <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                                              <Choice value="disabled" />
                                              <Choice value="random" />
                                              <Choice value="contextual" />
                                            </Parameter>
                                            <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Link inputowner="13" indexofinput="2" outputowner="11" indexofoutput="4" />
                                          <Link inputowner="11" indexofinput="2" outputowner="14" indexofoutput="4" />
                                          <Link inputowner="11" indexofinput="3" outputowner="0" indexofoutput="2" />
                                          <Link inputowner="12" indexofinput="2" outputowner="13" indexofoutput="6" />
                                          <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="4" />
                                          <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="4" />
                                          <Link inputowner="6" indexofinput="2" outputowner="13" indexofoutput="4" />
                                          <Link inputowner="5" indexofinput="2" outputowner="13" indexofoutput="4" />
                                          <Link inputowner="6" indexofinput="2" outputowner="13" indexofoutput="5" />
                                          <Link inputowner="5" indexofinput="2" outputowner="13" indexofoutput="5" />
                                          <Link inputowner="0" indexofinput="5" outputowner="8" indexofoutput="4" />
                                          <Link inputowner="0" indexofinput="5" outputowner="12" indexofoutput="4" />
                                          <Link inputowner="8" indexofinput="2" outputowner="6" indexofoutput="9" />
                                          <Link inputowner="14" indexofinput="2" outputowner="6" indexofoutput="8" />
                                          <Link inputowner="14" indexofinput="2" outputowner="6" indexofoutput="10" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                  </Timeline>
                                </Box>
                                <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="4" />
                                <Link inputowner="0" indexofinput="4" outputowner="15" indexofoutput="5" />
                                <Link inputowner="15" indexofinput="4" outputowner="2" indexofoutput="4" />
                                <Link inputowner="15" indexofinput="2" outputowner="0" indexofoutput="2" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                        </Timeline>
                      </Box>
                      <Box name="BasketBall" id="8" localization="8" tooltip="" x="842" y="375">
                        <bitmap>media/images/box/box-diagram.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="0">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram>
                                <Box name="Play Sound" id="1" localization="8" tooltip="Play a sound file. Select the file in parameters. The format of the file can be wav or ogg (on virtual robot) and also mp3 (on a real robot).&#x0A;&#x0A;Note: There can be some delay to play ogg or mp3 (on a robot) files. We advise you to use wav if&#x0A;you want a fast play of the file." x="240" y="107">
                                  <bitmap>media/images/box/interaction/play_music.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Starts the music." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops the music." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                  <Parameter name="File name" inherits_from_parent="0" content_type="4" value="/../Sports Ball Basketball Dribble On Cement Floor 01.wav" default_value="" tooltip="Name of the file you want to play.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="5" />
                                  <Parameter name="Begin position (s)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="6" />
                                  <Parameter name="Volume (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="7" />
                                  <Parameter name="Balance L/R" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="8" />
                                  <Parameter name="Play in loop" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="9" />
                                  <Timeline enable="0">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                          <Box name="Play Sound File" id="2" localization="8" tooltip="Play the sound." x="442" y="70">
                                            <bitmap>media/images/box/interaction/play_music.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.player = self.session().service('ALAudioPlayer')
        self.playerStop = self.session().service('ALAudioPlayer') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.playerStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            if (self.getParameter("Play in loop")) :
               id = self.player.pCall("playFileInLoop",p,self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            else :
               id = self.player.pCall("playFileFromPosition",p,self.getParameter("Begin position (s)"),self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            self.ids.append(id)
            self.player.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Begin position (s)" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="5" />
                                            <Parameter name="Volume (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="6" />
                                            <Parameter name="Balance L/R" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="7" />
                                            <Parameter name="Play in loop" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="8" />
                                          </Box>
                                          <Box name="Get Attached File" id="1" localization="8" tooltip="Use this box to choose an attached file in its parameters. The filename will be sent on&#x0A;the output when the input is stimulated." x="216" y="71">
                                            <bitmap>media/images/box/folder.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        pass

    def onInput_onStart(self):
        self.onStopped(self.behaviorAbsolutePath() + self.getParameter("File name"))]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the filepath on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The filepath of the selected resource file." id="3" />
                                            <Parameter name="File name" inherits_from_parent="1" content_type="4" value="" default_value="" tooltip="Name of the file which is going to be sent on the box output.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="4" />
                                          </Box>
                                          <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                          <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                          <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                  </Timeline>
                                  <Resource name="Audio player" type="Lock" timeout="0" />
                                </Box>
                                <Box name="baskettsss" id="2" localization="8" tooltip="" x="322" y="293">
                                  <bitmap>media/images/box/box-timeLine.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Timeline enable="1" fps="5" start_frame="1" end_frame="-1" size="129">
                                    <ActuatorList model="nao">
                                      <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                                        <Key frame="10" value="-8.96736" />
                                        <Key frame="21" value="-8.00056" />
                                        <Key frame="30" value="-8.00056" />
                                        <Key frame="40" value="-8.00056" />
                                        <Key frame="52" value="-8.00056" />
                                        <Key frame="64" value="-8.00056" />
                                        <Key frame="75" value="-8.00056" />
                                        <Key frame="89" value="-8.00056" />
                                        <Key frame="102" value="-8.00056" />
                                        <Key frame="115" value="-8.00056" />
                                        <Key frame="129" value="-8.00056" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                                        <Key frame="10" value="-1.05711" />
                                        <Key frame="21" value="-1.05711" />
                                        <Key frame="30" value="-1.05711" />
                                        <Key frame="40" value="-1.05711" />
                                        <Key frame="52" value="-1.05711" />
                                        <Key frame="64" value="-1.05711" />
                                        <Key frame="75" value="-1.05711" />
                                        <Key frame="89" value="-1.05711" />
                                        <Key frame="102" value="-1.05711" />
                                        <Key frame="115" value="-1.05711" />
                                        <Key frame="129" value="-1.05711" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                                        <Key frame="10" value="5.18321" />
                                        <Key frame="21" value="5.00743" />
                                        <Key frame="30" value="5.00743" />
                                        <Key frame="40" value="5.00743" />
                                        <Key frame="52" value="5.00743" />
                                        <Key frame="64" value="5.00743" />
                                        <Key frame="75" value="5.00743" />
                                        <Key frame="89" value="4.91954" />
                                        <Key frame="102" value="5.53478" />
                                        <Key frame="115" value="5.44688" />
                                        <Key frame="129" value="5.44688" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                                        <Key frame="10" value="-5.97423" />
                                        <Key frame="21" value="-5.97423" />
                                        <Key frame="30" value="-5.97423" />
                                        <Key frame="40" value="-5.97423" />
                                        <Key frame="52" value="-5.97423" />
                                        <Key frame="64" value="-5.97423" />
                                        <Key frame="75" value="-5.97423" />
                                        <Key frame="89" value="-5.97423" />
                                        <Key frame="102" value="-5.97423" />
                                        <Key frame="115" value="-5.97423" />
                                        <Key frame="129" value="-5.97423" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                                        <Key frame="10" value="-23.4647" />
                                        <Key frame="21" value="-14.3239" />
                                        <Key frame="30" value="-14.3239" />
                                        <Key frame="40" value="-14.3239" />
                                        <Key frame="52" value="-26.3651" />
                                        <Key frame="64" value="-19.949" />
                                        <Key frame="75" value="-20.4764" />
                                        <Key frame="89" value="-62.4007" />
                                        <Key frame="102" value="-55.4573" />
                                        <Key frame="115" value="-36.2969" />
                                        <Key frame="129" value="-19.4217" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                                        <Key frame="10" value="-67.679" />
                                        <Key frame="21" value="-67.5033" />
                                        <Key frame="30" value="-67.5033" />
                                        <Key frame="40" value="-67.5033" />
                                        <Key frame="52" value="-68.1185" />
                                        <Key frame="64" value="-67.0638" />
                                        <Key frame="75" value="-67.7669" />
                                        <Key frame="89" value="-94.5739" />
                                        <Key frame="102" value="-90.7067" />
                                        <Key frame="115" value="-71.3705" />
                                        <Key frame="129" value="-56.6047" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHand" mute="0" unit="1">
                                        <Key frame="10" value="0.2928" />
                                        <Key frame="21" value="0.2928" />
                                        <Key frame="30" value="0.2928" />
                                        <Key frame="40" value="0.2928" />
                                        <Key frame="52" value="0.2928" />
                                        <Key frame="64" value="0.6904" />
                                        <Key frame="75" value="0.6904" />
                                        <Key frame="89" value="0.6904" />
                                        <Key frame="102" value="0.6904" />
                                        <Key frame="115" value="0.6904" />
                                        <Key frame="129" value="0.6904" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                                        <Key frame="10" value="7.38531" />
                                        <Key frame="21" value="7.38531" />
                                        <Key frame="30" value="7.38531" />
                                        <Key frame="40" value="7.38531" />
                                        <Key frame="52" value="7.38531" />
                                        <Key frame="64" value="7.38531" />
                                        <Key frame="75" value="7.38531" />
                                        <Key frame="89" value="7.38531" />
                                        <Key frame="102" value="7.38531" />
                                        <Key frame="115" value="7.38531" />
                                        <Key frame="129" value="7.38531" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                                        <Key frame="10" value="6.77007" />
                                        <Key frame="21" value="6.77007" />
                                        <Key frame="30" value="6.77007" />
                                        <Key frame="40" value="6.77007" />
                                        <Key frame="52" value="6.77007" />
                                        <Key frame="64" value="6.77007" />
                                        <Key frame="75" value="6.77007" />
                                        <Key frame="89" value="6.77007" />
                                        <Key frame="102" value="6.77007" />
                                        <Key frame="115" value="6.77007" />
                                        <Key frame="129" value="6.77007" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                                        <Key frame="10" value="-9.92936" />
                                        <Key frame="21" value="-9.92936" />
                                        <Key frame="30" value="-9.92936" />
                                        <Key frame="40" value="-9.92936" />
                                        <Key frame="52" value="-9.92936" />
                                        <Key frame="64" value="-9.92936" />
                                        <Key frame="75" value="-9.92936" />
                                        <Key frame="89" value="-9.92936" />
                                        <Key frame="102" value="-9.92936" />
                                        <Key frame="115" value="-9.92936" />
                                        <Key frame="129" value="-9.92936" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                                        <Key frame="10" value="-5.53958" />
                                        <Key frame="21" value="-5.53958" />
                                        <Key frame="30" value="-5.53958" />
                                        <Key frame="40" value="-5.53958" />
                                        <Key frame="52" value="-5.53958" />
                                        <Key frame="64" value="-5.53958" />
                                        <Key frame="75" value="-5.53958" />
                                        <Key frame="89" value="-5.53958" />
                                        <Key frame="102" value="-5.53958" />
                                        <Key frame="115" value="-5.53958" />
                                        <Key frame="129" value="-5.53958" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                                        <Key frame="10" value="83.319" />
                                        <Key frame="21" value="81.8248" />
                                        <Key frame="30" value="81.8248" />
                                        <Key frame="40" value="81.8248" />
                                        <Key frame="52" value="13.6208" />
                                        <Key frame="64" value="41.922" />
                                        <Key frame="75" value="20.4764" />
                                        <Key frame="89" value="10.5446" />
                                        <Key frame="102" value="-50.8038" />
                                        <Key frame="115" value="-83.8511" />
                                        <Key frame="129" value="68.2895" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                                        <Key frame="10" value="11.2477" />
                                        <Key frame="21" value="1.93121" />
                                        <Key frame="30" value="1.93121" />
                                        <Key frame="40" value="1.93121" />
                                        <Key frame="52" value="-2.37549" />
                                        <Key frame="64" value="-14.0651" />
                                        <Key frame="75" value="-6.3306" />
                                        <Key frame="89" value="-2.63916" />
                                        <Key frame="102" value="0.788627" />
                                        <Key frame="115" value="13.3571" />
                                        <Key frame="129" value="-0.00240423" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                                        <Key frame="10" value="6.85315" />
                                        <Key frame="21" value="91.7566" />
                                        <Key frame="30" value="91.7566" />
                                        <Key frame="40" value="91.7566" />
                                        <Key frame="52" value="37.3516" />
                                        <Key frame="64" value="51.3264" />
                                        <Key frame="75" value="45.965" />
                                        <Key frame="89" value="15.9939" />
                                        <Key frame="102" value="47.2834" />
                                        <Key frame="115" value="36.8242" />
                                        <Key frame="129" value="46.6681" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                                        <Key frame="10" value="4.92435" />
                                        <Key frame="21" value="4.92435" />
                                        <Key frame="30" value="4.92435" />
                                        <Key frame="40" value="4.92435" />
                                        <Key frame="52" value="4.92435" />
                                        <Key frame="64" value="4.92435" />
                                        <Key frame="75" value="4.92435" />
                                        <Key frame="89" value="4.83644" />
                                        <Key frame="102" value="4.83644" />
                                        <Key frame="115" value="4.83644" />
                                        <Key frame="129" value="4.83644" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                                        <Key frame="10" value="6.06693" />
                                        <Key frame="21" value="6.06693" />
                                        <Key frame="30" value="6.06693" />
                                        <Key frame="40" value="6.06693" />
                                        <Key frame="52" value="6.06693" />
                                        <Key frame="64" value="6.06693" />
                                        <Key frame="75" value="6.06693" />
                                        <Key frame="89" value="6.06693" />
                                        <Key frame="102" value="6.06693" />
                                        <Key frame="115" value="6.06693" />
                                        <Key frame="129" value="6.06693" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                                        <Key frame="10" value="2" />
                                        <Key frame="21" value="8.70368" />
                                        <Key frame="30" value="7.56109" />
                                        <Key frame="40" value="19.6023" />
                                        <Key frame="52" value="7.64898" />
                                        <Key frame="64" value="7.64898" />
                                        <Key frame="75" value="0.881327" />
                                        <Key frame="89" value="70.6674" />
                                        <Key frame="102" value="69.8763" />
                                        <Key frame="115" value="80.1596" />
                                        <Key frame="129" value="46.6729" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                                        <Key frame="10" value="-6.9" />
                                        <Key frame="21" value="81.649" />
                                        <Key frame="30" value="82.44" />
                                        <Key frame="40" value="85.6041" />
                                        <Key frame="52" value="75.4087" />
                                        <Key frame="64" value="75.4087" />
                                        <Key frame="75" value="85.8678" />
                                        <Key frame="89" value="68.3774" />
                                        <Key frame="102" value="65.6527" />
                                        <Key frame="115" value="33.3965" />
                                        <Key frame="129" value="31.3749" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHand" mute="0" unit="1">
                                        <Key frame="10" value="0.94" />
                                        <Key frame="21" value="0.9336" />
                                        <Key frame="30" value="0.9336" />
                                        <Key frame="40" value="0.9336" />
                                        <Key frame="52" value="0.9336" />
                                        <Key frame="64" value="0.9336" />
                                        <Key frame="75" value="0.9336" />
                                        <Key frame="89" value="0.9336" />
                                        <Key frame="102" value="0.9336" />
                                        <Key frame="115" value="0.9336" />
                                        <Key frame="129" value="0.9336" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                                        <Key frame="10" value="7.20472" />
                                        <Key frame="21" value="7.20472" />
                                        <Key frame="30" value="7.20472" />
                                        <Key frame="40" value="7.20472" />
                                        <Key frame="52" value="7.20472" />
                                        <Key frame="64" value="7.20472" />
                                        <Key frame="75" value="7.20472" />
                                        <Key frame="89" value="7.29261" />
                                        <Key frame="102" value="7.29261" />
                                        <Key frame="115" value="7.29261" />
                                        <Key frame="129" value="7.29261" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                                        <Key frame="10" value="-6.58948" />
                                        <Key frame="21" value="-6.58948" />
                                        <Key frame="30" value="-6.58948" />
                                        <Key frame="40" value="-6.58948" />
                                        <Key frame="52" value="-6.58948" />
                                        <Key frame="64" value="-6.58948" />
                                        <Key frame="75" value="-6.58948" />
                                        <Key frame="89" value="-6.58948" />
                                        <Key frame="102" value="-6.58948" />
                                        <Key frame="115" value="-6.58948" />
                                        <Key frame="129" value="-6.58948" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                                        <Key frame="10" value="-9.92936" />
                                        <Key frame="21" value="-9.92936" />
                                        <Key frame="30" value="-9.92936" />
                                        <Key frame="40" value="-9.92936" />
                                        <Key frame="52" value="-9.92936" />
                                        <Key frame="64" value="-9.92936" />
                                        <Key frame="75" value="-9.92936" />
                                        <Key frame="89" value="-9.92936" />
                                        <Key frame="102" value="-9.92936" />
                                        <Key frame="115" value="-9.92936" />
                                        <Key frame="129" value="-9.92936" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                                        <Key frame="10" value="-5.62267" />
                                        <Key frame="21" value="-5.00743" />
                                        <Key frame="30" value="-5.00743" />
                                        <Key frame="40" value="-5.00743" />
                                        <Key frame="52" value="-5.00743" />
                                        <Key frame="64" value="-5.00743" />
                                        <Key frame="75" value="-5.00743" />
                                        <Key frame="89" value="-5.00743" />
                                        <Key frame="102" value="-5.00743" />
                                        <Key frame="115" value="-5.00743" />
                                        <Key frame="129" value="-5.62267" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                                        <Key frame="10" value="78.3" />
                                        <Key frame="21" value="31.6434" />
                                        <Key frame="30" value="11.5162" />
                                        <Key frame="40" value="40.9599" />
                                        <Key frame="52" value="72.8646" />
                                        <Key frame="64" value="72.8646" />
                                        <Key frame="75" value="57.6594" />
                                        <Key frame="89" value="12.1315" />
                                        <Key frame="102" value="-16.3455" />
                                        <Key frame="115" value="24.8758" />
                                        <Key frame="129" value="68.7337" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                                        <Key frame="10" value="-7" />
                                        <Key frame="21" value="13.2692" />
                                        <Key frame="30" value="11.072" />
                                        <Key frame="40" value="16.0818" />
                                        <Key frame="52" value="3.95273" />
                                        <Key frame="64" value="3.95273" />
                                        <Key frame="75" value="0.43705" />
                                        <Key frame="89" value="17.3123" />
                                        <Key frame="102" value="18.4549" />
                                        <Key frame="115" value="8.17153" />
                                        <Key frame="129" value="-6.15482" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                                        <Key frame="10" value="-82.9" />
                                        <Key frame="21" value="-82.6206" />
                                        <Key frame="30" value="-82.6206" />
                                        <Key frame="40" value="-82.7085" />
                                        <Key frame="52" value="-82.7085" />
                                        <Key frame="64" value="-82.7085" />
                                        <Key frame="75" value="-73.1283" />
                                        <Key frame="89" value="-30.5887" />
                                        <Key frame="102" value="-36.4775" />
                                        <Key frame="115" value="-69.1732" />
                                        <Key frame="129" value="-71.9857" />
                                      </ActuatorCurve>
                                    </ActuatorList>
                                  </Timeline>
                                </Box>
                                <Box name="Play Sound (1)" id="3" localization="8" tooltip="Play a sound file. Select the file in parameters. The format of the file can be wav or ogg (on virtual robot) and also mp3 (on a real robot).&#x0A;&#x0A;Note: There can be some delay to play ogg or mp3 (on a robot) files. We advise you to use wav if&#x0A;you want a fast play of the file." x="383" y="110">
                                  <bitmap>media/images/box/interaction/play_music.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Starts the music." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops the music." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                                  <Parameter name="File name" inherits_from_parent="0" content_type="4" value="/../Sports Human Voice Male Young Man Basketball Announcer He Shoots Downtown For Three 02.wav" default_value="" tooltip="Name of the file you want to play.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="5" />
                                  <Parameter name="Begin position (s)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="6" />
                                  <Parameter name="Volume (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="7" />
                                  <Parameter name="Balance L/R" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="8" />
                                  <Parameter name="Play in loop" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="9" />
                                  <Timeline enable="0">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                          <Box name="Play Sound File" id="2" localization="8" tooltip="Play the sound." x="442" y="70">
                                            <bitmap>media/images/box/interaction/play_music.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.player = self.session().service('ALAudioPlayer')
        self.playerStop = self.session().service('ALAudioPlayer') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.playerStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            if (self.getParameter("Play in loop")) :
               id = self.player.pCall("playFileInLoop",p,self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            else :
               id = self.player.pCall("playFileFromPosition",p,self.getParameter("Begin position (s)"),self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            self.ids.append(id)
            self.player.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Begin position (s)" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="5" />
                                            <Parameter name="Volume (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="6" />
                                            <Parameter name="Balance L/R" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="7" />
                                            <Parameter name="Play in loop" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="8" />
                                          </Box>
                                          <Box name="Get Attached File" id="1" localization="8" tooltip="Use this box to choose an attached file in its parameters. The filename will be sent on&#x0A;the output when the input is stimulated." x="216" y="71">
                                            <bitmap>media/images/box/folder.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        pass

    def onInput_onStart(self):
        self.onStopped(self.behaviorAbsolutePath() + self.getParameter("File name"))]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the filepath on the output." id="2" />
                                            <Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The filepath of the selected resource file." id="3" />
                                            <Parameter name="File name" inherits_from_parent="1" content_type="4" value="" default_value="" tooltip="Name of the file which is going to be sent on the box output.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="4" />
                                          </Box>
                                          <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                          <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                          <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                  </Timeline>
                                  <Resource name="Audio player" type="Lock" timeout="0" />
                                </Box>
                                <Box name="Guessing" id="15" localization="8" tooltip="" x="794" y="217">
                                  <bitmap>media/images/box/box-diagram.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Input name="InitialGuess" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                  <Timeline enable="0">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                          <Box name="Counter" id="11" localization="-1" tooltip="Represent a counter.&#x0A;&#x0A;Each time the onStart input is stimulated, the counter value is sent on the&#x0A;currentValue output and incremented (or decremented) by Step value, from&#x0A;its Initial value to its Final value set in the parameters. Once the counter value is&#x0A;higher than its Final value, the onReinitialized output is stimulated and&#x0A;the counter is reinitialized to the Initial value.&#x0A;&#x0A;Note: You can also reinitialize the counter by stimulating the onInit&#x0A;input." x="682" y="493">
                                            <bitmap>media/images/box/loop.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.initializeParameters()
        if( self.getParameter("Final value") - self.getParameter("Initial value") >= 0 ):
            self.stepSign = +1
        else:
            self.stepSign = -1

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onNext(self):
        bParamChanged = ( self.nLast != self.getParameter("Final value") or self.nFirst != self.getParameter("Initial value") )
        bEnd = ( self.stepSign * self.nCounter > self.stepSign * self.nLast )
        if( bEnd or bParamChanged ):
            self.onInput_onInit()
        if( not bEnd or bParamChanged ):
            currentCounter = self.nCounter
            self.nCounter = self.nCounter + self.stepSign * self.getParameter("Step value")
            self.currentValue( currentCounter )

    def initializeParameters(self):
        self.nFirst = self.getParameter("Initial value")
        self.nCounter = self.nFirst
        self.nLast = self.getParameter("Final value")

    def onInput_onInit(self):
        self.initializeParameters()
        self.onReinitialized()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onNext" type="1" type_size="1" nature="1" inner="0" tooltip="The counter next value is sent on the currentValue output when a signal is&#x0A;received on this input, unless it reached its Final value, then the onReinitialized&#x0A;output is stimulated." id="2" />
                                            <Input name="onInit" type="1" type_size="1" nature="1" inner="0" tooltip="When a signal is received on this input, the counter is reinitialized to its Initial&#x0A;value." id="3" />
                                            <Output name="currentValue" type="2" type_size="1" nature="2" inner="0" tooltip="Stimulated for each interaction with the counter current value." id="4" />
                                            <Output name="onReinitialized" type="1" type_size="1" nature="2" inner="0" tooltip="Stimulated when the loop is over or if the counter has been reinitialized." id="5" />
                                            <Parameter name="Initial value" inherits_from_parent="0" content_type="1" value="0" default_value="0" min="0" max="500" tooltip="The initial value of the counter (for the first iteration)." id="6" />
                                            <Parameter name="Step value" inherits_from_parent="0" content_type="1" value="1" default_value="1" min="1" max="500" tooltip="The counter value will be incremented or decremented with this value." id="7" />
                                            <Parameter name="Final value" inherits_from_parent="0" content_type="1" value="5" default_value="5" min="0" max="500" tooltip="It is the maximum (if increasing) or the minimum (if decreasing) value of the&#x0A;counter (thus for the last iteration).&#x0A;&#x0A;After this value, if the onStart input is called, the onReinitialized output will be&#x0A;stimulated and the counter will be reinitialized to its Initial value." id="8" />
                                          </Box>
                                          <Box name="Switch Case" id="13" localization="8" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." plugin="dispatcher_plugin" x="904" y="323">
                                            <bitmap>media/images/box/interaction/choice.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
		  GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
		  GeneratedClass.__init__( self )

	def onInput_onStart(self, p):
		p = self.typeConversion(p)
		if(p == self.typeConversion(0)):
			self.output_1(p)
		elif(p == self.typeConversion(1)):
			self.output_2(p)
		elif(p == self.typeConversion(2)):
			self.output_3(p)
		else:
			self.onDefault()

	def typeConversion(self, p):
		try:
			p = float(p)
			pint = int(p)
			if( p == pint ):
				p = pint
		except:
			p = str(p)
		return p]]>
                                              </content>
                                            </script>
                                            <pluginContent>
                                              <keywords>
                                                <keyword>0</keyword>
                                                <keyword>1</keyword>
                                                <keyword>2</keyword>
                                                <keyword></keyword>
                                              </keywords>
                                            </pluginContent>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" />
                                            <Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" />
                                            <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
                                            <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
                                            <Output name="output_3" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" />
                                          </Box>
                                          <Box name="Animated Say" id="14" localization="8" tooltip="Say some text with animations. The text can be localized." x="555" y="341">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="95" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Parameter name="Text" inherits_from_parent="0" content_type="5" value="not quite" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                                            <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                                              <Choice value="disabled" />
                                              <Choice value="random" />
                                              <Choice value="contextual" />
                                            </Parameter>
                                            <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Animated Say (1)" id="12" localization="8" tooltip="Say some text with animations. The text can be localized." x="1638" y="361">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Turn that frown upside down No Ell" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                                            <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                                              <Choice value="disabled" />
                                              <Choice value="random" />
                                              <Choice value="contextual" />
                                            </Parameter>
                                            <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Tactile Head" id="6" localization="8" tooltip="Detect touch on head tactile sensor." x="1021" y="673">
                                            <bitmap>media/images/box/sensors/tactileHead.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
            self.onStopped() #~ activate output of the box
        pass]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            <Input name="FrontTactilTouched" type="0" type_size="1" nature="4" stm_value_name="FrontTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" />
                                            <Input name="MiddleTactilTouched" type="0" type_size="1" nature="4" stm_value_name="MiddleTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="5" />
                                            <Input name="RearTactilTouched" type="0" type_size="1" nature="4" stm_value_name="RearTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="6" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="7" />
                                            <Output name="frontTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The front tactile head sensor was touched." id="8" />
                                            <Output name="middleTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The middle tactile head sensor was touched." id="9" />
                                            <Output name="rearTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The rear tactile head sensor was touched." id="10" />
                                            <Timeline enable="0">
                                              <BehaviorLayer name="behavior_layer1">
                                                <BehaviorKeyframe name="keyframe1" index="1">
                                                  <Diagram>
                                                    <Box name="If &gt; 0" id="1" localization="8" tooltip="Transmit only if value is &gt; 0." x="260" y="17">
                                                      <bitmap>media/images/box/box-diagram.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                    </Box>
                                                    <Box name="If &gt; 0" id="2" localization="8" tooltip="Transmit only if value is &gt; 0." x="256" y="119">
                                                      <bitmap>media/images/box/box-diagram.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                    </Box>
                                                    <Box name="If &gt; 0" id="3" localization="8" tooltip="Transmit only if value is &gt; 0." x="261" y="223">
                                                      <bitmap>media/images/box/box-diagram.png</bitmap>
                                                      <script language="4">
                                                        <content>
                                                          <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                                                        </content>
                                                      </script>
                                                      <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                      <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                      <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                      <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                                    </Box>
                                                    <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" />
                                                    <Link inputowner="0" indexofinput="8" outputowner="1" indexofoutput="4" />
                                                    <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="5" />
                                                    <Link inputowner="0" indexofinput="9" outputowner="2" indexofoutput="4" />
                                                    <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="6" />
                                                    <Link inputowner="0" indexofinput="10" outputowner="3" indexofoutput="4" />
                                                  </Diagram>
                                                </BehaviorKeyframe>
                                              </BehaviorLayer>
                                            </Timeline>
                                            <Resource name="Head-sequence" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Animated Say (2)" id="5" localization="8" tooltip="Say some text with animations. The text can be localized." x="1075" y="858">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Parameter name="Text" inherits_from_parent="0" content_type="5" value="If you think it was a college student on a monday, touch the front of my head. If you think it is a zombie apocalypse, press the middle of my head, if you think its jake from state farm, press the back of my head" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                                            <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                                              <Choice value="disabled" />
                                              <Choice value="random" />
                                              <Choice value="contextual" />
                                            </Parameter>
                                            <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Box name="Animated Say (3)" id="8" localization="8" tooltip="Say some text with animations. The text can be localized." x="1633" y="621">
                                            <bitmap>media/images/box/interaction/say.png</bitmap>
                                            <script language="4">
                                              <content>
                                                <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                                              </content>
                                            </script>
                                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Congrats! You guessed it right" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                                            <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                                              <Choice value="disabled" />
                                              <Choice value="random" />
                                              <Choice value="contextual" />
                                            </Parameter>
                                            <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                                            <Resource name="Speech" type="Lock" timeout="0" />
                                          </Box>
                                          <Link inputowner="13" indexofinput="2" outputowner="11" indexofoutput="4" />
                                          <Link inputowner="11" indexofinput="2" outputowner="14" indexofoutput="4" />
                                          <Link inputowner="11" indexofinput="3" outputowner="0" indexofoutput="2" />
                                          <Link inputowner="12" indexofinput="2" outputowner="13" indexofoutput="6" />
                                          <Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="4" />
                                          <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="4" />
                                          <Link inputowner="6" indexofinput="2" outputowner="13" indexofoutput="4" />
                                          <Link inputowner="5" indexofinput="2" outputowner="13" indexofoutput="4" />
                                          <Link inputowner="6" indexofinput="2" outputowner="13" indexofoutput="5" />
                                          <Link inputowner="5" indexofinput="2" outputowner="13" indexofoutput="5" />
                                          <Link inputowner="0" indexofinput="5" outputowner="8" indexofoutput="4" />
                                          <Link inputowner="0" indexofinput="5" outputowner="12" indexofoutput="4" />
                                          <Link inputowner="8" indexofinput="2" outputowner="6" indexofoutput="9" />
                                          <Link inputowner="14" indexofinput="2" outputowner="6" indexofoutput="8" />
                                          <Link inputowner="14" indexofinput="2" outputowner="6" indexofoutput="10" />
                                        </Diagram>
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                  </Timeline>
                                </Box>
                                <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="4" />
                                <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="15" indexofinput="4" outputowner="2" indexofoutput="4" />
                                <Link inputowner="15" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="0" indexofinput="4" outputowner="15" indexofoutput="5" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                        </Timeline>
                      </Box>
                      <Box name="Eye LEDs" id="5" localization="8" tooltip="Set the LED color of the eyes. Note that you must open the box to enter the color." x="320" y="365">
                        <bitmap>media/images/box/interaction/LED.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                        <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Both" default_value="Both" custom_choice="0" tooltip="Choose the eye where the LED light is set." id="4">
                          <Choice value="Both" />
                          <Choice value="Left" />
                          <Choice value="Right" />
                        </Parameter>
                        <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="5" />
                        <Timeline enable="0">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram>
                                <Box name="Eyes LEDs" id="15" localization="8" tooltip="Set the color of LEDs of robot&apos;s eyes." x="281" y="41">
                                  <bitmap>media/images/box/interaction/LED.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.fadeOps = []
        self.leds = self.session().service("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_color(self, p):
        if( self.getParameter("Side") == "Left" ):
            sGroup = "LeftFaceLeds"
        elif( self.getParameter("Side") == "Right" ):
            sGroup = "RightFaceLeds"
        else:
            sGroup = "FaceLeds"
        fadeOp = self.leds.fadeRGB(sGroup, 256*256*p[0] + 256*p[1] + p[2], self.getParameter("Duration (s)"), _async=True)
        self.fadeOps.append(fadeOp)
        fadeOp.wait()
        self.fadeOps.remove(fadeOp)
        if( self.fadeOps == [] ):
            self.onDone() # activate output of the box]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="color" type="2" type_size="3" nature="2" inner="0" tooltip="Color of robot&apos;s eyes." id="2" />
                                  <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                  <Parameter name="Side" inherits_from_parent="1" content_type="3" value="Both" default_value="Both" custom_choice="0" tooltip="Choose the eye where the LED light is set." id="4">
                                    <Choice value="Both" />
                                    <Choice value="Left" />
                                    <Choice value="Right" />
                                  </Parameter>
                                  <Parameter name="Duration (s)" inherits_from_parent="1" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="5" />
                                </Box>
                                <Box name="Color Edit" id="16" localization="8" tooltip="Transmit a table of number [R,G,B] correponsding to the selected color." plugin="coloredit_plugin" x="105" y="47">
                                  <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped([0, 85, 255])]]>
                                    </content>
                                  </script>
                                  <pluginContent>
                                    <color>#0055ff</color>
                                  </pluginContent>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="To send the color on the output." id="2" />
                                  <Output name="onStopped" type="2" type_size="3" nature="1" inner="0" tooltip="[R,G,B] with R, G and B between 0 and 255." id="3" />
                                </Box>
                                <Link inputowner="15" indexofinput="2" outputowner="16" indexofoutput="3" />
                                <Link inputowner="16" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="0" indexofinput="3" outputowner="15" indexofoutput="3" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                        </Timeline>
                      </Box>
                      <Link inputowner="1" indexofinput="2" outputowner="3" indexofoutput="4" />
                      <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" />
                      <Link inputowner="6" indexofinput="2" outputowner="2" indexofoutput="6" />
                      <Link inputowner="0" indexofinput="4" outputowner="6" indexofoutput="4" />
                      <Link inputowner="4" indexofinput="2" outputowner="2" indexofoutput="4" />
                      <Link inputowner="0" indexofinput="4" outputowner="4" indexofoutput="4" />
                      <Link inputowner="0" indexofinput="4" outputowner="7" indexofoutput="4" />
                      <Link inputowner="7" indexofinput="2" outputowner="2" indexofoutput="5" />
                      <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                      <Link inputowner="5" indexofinput="2" outputowner="5" indexofoutput="3" />
                      <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                      <Link inputowner="0" indexofinput="4" outputowner="5" indexofoutput="3" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
              </Timeline>
            </Box>
            <Box name="Closing sequence" id="6" localization="8" tooltip="" x="945" y="42">
              <bitmap>media/images/box/box-diagram.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
              <Timeline enable="0">
                <BehaviorLayer name="behavior_layer1">
                  <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                      <Box name="Animated Say" id="2" localization="8" tooltip="Say some text with animations. The text can be localized." x="380" y="78">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.tts = self.session().service('ALAnimatedSpeech')
        self.ttsStop = self.session().service('ALAnimatedSpeech') #Create another service as wait is blocking if audioout is remote
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self):
        self.bIsRunning = True
        try:
            movement = self.getParameter("Speaking movement mode")
            textParam = self.getParameter("Text")
            if movement == "disabled":
                textParam = "^start({0}) {1} ^wait({0})".format(self.getParameter("Animation"), textParam)
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += textParam
            sentence +=  "\RST\ "
            id = self.tts.pCall("say",str(sentence), {"speakingMovementMode":movement})
            self.ids.append(id)
            self.tts.wait(id)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                        <Parameter name="Text" inherits_from_parent="0" content_type="5" value="Thanks for playing! You did great. Go enjoy your time at U V A open house today!" default_value="" tooltip="The text you want to say. Don&apos;t forget to translate it!" id="7" />
                        <Parameter name="Speaking movement mode" inherits_from_parent="0" content_type="3" value="contextual" default_value="contextual" custom_choice="0" tooltip="Change the body language mode during the speech.&#x0A;disabled: The robot will only play the animations given by the user through the animation parameter.&#x0A;random: During time the robot has no animation to play, he will launch random neutral animations.&#x0A;contextual: During time the robot has no animation to play, he will try to launch a new one accordingly to the saying text. Every time the robot can&apos;t find a contextual animation he will launch a random neutral animation." id="8">
                          <Choice value="disabled" />
                          <Choice value="random" />
                          <Choice value="contextual" />
                        </Parameter>
                        <Parameter name="Animation" inherits_from_parent="0" content_type="3" value="Stand/Gestures/Hey_2" default_value="" custom_choice="0" tooltip="The animation to play" id="9" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Kisses" id="73" localization="8" tooltip="ID : #02A 0002&#x0A;&#x0A;===================&#x0A;&#x0A;Tags : &#x0A;- Kisses" x="661" y="82">
                        <bitmap>media/images/box/movement/move.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="138">
                          <ActuatorList model="nao">
                            <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="-1">
                              <Key frame="21" value="-4.3091" />
                              <Key frame="41" value="-2.81494" />
                              <Key frame="63" value="-1.84813" />
                              <Key frame="90" value="-1.84813" />
                              <Key frame="108" value="-2.02391" />
                              <Key frame="138" value="-2.11181" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="-1">
                              <Key frame="21" value="-18.3718" />
                              <Key frame="41" value="-0.79343" />
                              <Key frame="63" value="-21.0085" />
                              <Key frame="90" value="-17" />
                              <Key frame="108" value="-22.9421" />
                              <Key frame="138" value="-14.0651" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="-1">
                              <Key frame="19" value="49.4806" />
                              <Key frame="39" value="21.0037" />
                              <Key frame="61" value="10.7204" />
                              <Key frame="88" value="54.7541" />
                              <Key frame="106" value="80.067" />
                              <Key frame="136" value="84.8131" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="-1">
                              <Key frame="19" value="1.75543" />
                              <Key frame="39" value="1.40386" />
                              <Key frame="61" value="0.876513" />
                              <Key frame="88" value="52.3811" />
                              <Key frame="106" value="33.6601" />
                              <Key frame="136" value="3.86483" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="-1">
                              <Key frame="19" value="-110.746" />
                              <Key frame="39" value="-45.9698" />
                              <Key frame="61" value="-50.2765" />
                              <Key frame="88" value="-101.517" />
                              <Key frame="106" value="-109.691" />
                              <Key frame="136" value="-65.4817" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="-1">
                              <Key frame="19" value="-30.6718" />
                              <Key frame="39" value="-89.5017" />
                              <Key frame="61" value="-89.2077" />
                              <Key frame="88" value="-44.9982" />
                              <Key frame="106" value="-28.6503" />
                              <Key frame="136" value="-21.619" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="-1">
                              <Key frame="39" value="-68.4701" />
                              <Key frame="61" value="-64.427" />
                              <Key frame="88" value="-88" />
                              <Key frame="106" value="-64.8665" />
                              <Key frame="136" value="-8.00055" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHand" mute="0" unit="-1">
                              <Key frame="39" value="0.73166" />
                              <Key frame="61" value="0.702933" />
                              <Key frame="88" value="0.8" />
                              <Key frame="106" value="0.676387" />
                              <Key frame="136" value="0.109844" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="-1">
                              <Key frame="17" value="57.923" />
                              <Key frame="37" value="23.3816" />
                              <Key frame="59" value="1.76024" />
                              <Key frame="86" value="63.3723" />
                              <Key frame="104" value="80.0718" />
                              <Key frame="134" value="88.0699" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="-1">
                              <Key frame="17" value="-9.84628" />
                              <Key frame="37" value="-2.02391" />
                              <Key frame="59" value="-6.24272" />
                              <Key frame="86" value="-48.6944" />
                              <Key frame="104" value="-37.2685" />
                              <Key frame="134" value="-2.46337" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="-1">
                              <Key frame="17" value="119.496" />
                              <Key frame="37" value="50.5353" />
                              <Key frame="59" value="38.8457" />
                              <Key frame="86" value="111.181" />
                              <Key frame="104" value="119.442" />
                              <Key frame="134" value="86.5709" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="-1">
                              <Key frame="17" value="30.2372" />
                              <Key frame="37" value="89.3004" />
                              <Key frame="59" value="89.5017" />
                              <Key frame="86" value="41.0478" />
                              <Key frame="104" value="23.9968" />
                              <Key frame="134" value="25.0515" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="-1">
                              <Key frame="37" value="57.4788" />
                              <Key frame="59" value="56.9514" />
                              <Key frame="86" value="80" />
                              <Key frame="104" value="56.8635" />
                              <Key frame="134" value="0.173379" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHand" mute="0" unit="-1">
                              <Key frame="37" value="0.789478" />
                              <Key frame="59" value="0.758933" />
                              <Key frame="86" value="0.909091" />
                              <Key frame="104" value="0.730569" />
                              <Key frame="134" value="0.22548" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="-1">
                              <Key frame="38" value="-15.5544" />
                              <Key frame="60" value="-16.7849" />
                              <Key frame="87" value="-18.9822" />
                              <Key frame="105" value="-18.9822" />
                              <Key frame="135" value="-17.9275" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="-1">
                              <Key frame="38" value="6.59428" />
                              <Key frame="60" value="1.58446" />
                              <Key frame="87" value="-0.349163" />
                              <Key frame="105" value="-0.173379" />
                              <Key frame="135" value="5.45169" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="-1">
                              <Key frame="38" value="20.5691" />
                              <Key frame="60" value="5.80326" />
                              <Key frame="87" value="-1.84332" />
                              <Key frame="105" value="-1.84332" />
                              <Key frame="135" value="12.2194" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="-1">
                              <Key frame="38" value="-5.29104" />
                              <Key frame="60" value="-5.29104" />
                              <Key frame="87" value="-5.29104" />
                              <Key frame="105" value="-5.29104" />
                              <Key frame="135" value="-5.10012" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="-1">
                              <Key frame="38" value="3.33748" />
                              <Key frame="60" value="9.40201" />
                              <Key frame="87" value="14.4997" />
                              <Key frame="105" value="14.4118" />
                              <Key frame="135" value="6.76526" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="-1">
                              <Key frame="38" value="-5.09532" />
                              <Key frame="60" value="-2.28278" />
                              <Key frame="87" value="-0.876513" />
                              <Key frame="105" value="-0.876513" />
                              <Key frame="135" value="-4.91953" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="-1">
                              <Key frame="38" value="-6.15002" />
                              <Key frame="60" value="-3.1617" />
                              <Key frame="87" value="0.353971" />
                              <Key frame="105" value="0.353971" />
                              <Key frame="135" value="-3.33748" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="-1">
                              <Key frame="38" value="21.2674" />
                              <Key frame="60" value="5.53477" />
                              <Key frame="87" value="-1.93602" />
                              <Key frame="105" value="-2.02391" />
                              <Key frame="135" value="12.4782" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="-1">
                              <Key frame="38" value="-5.71056" />
                              <Key frame="60" value="-5.88634" />
                              <Key frame="87" value="-5.90622" />
                              <Key frame="105" value="-5.88634" />
                              <Key frame="135" value="-4.39218" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="-1">
                              <Key frame="38" value="2.72705" />
                              <Key frame="60" value="9.40682" />
                              <Key frame="87" value="14.4166" />
                              <Key frame="105" value="14.5924" />
                              <Key frame="135" value="6.15482" />
                            </ActuatorCurve>
                            <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="-1">
                              <Key frame="38" value="4.13332" />
                              <Key frame="60" value="3.07861" />
                              <Key frame="87" value="0.617646" />
                              <Key frame="105" value="0.705538" />
                              <Key frame="135" value="2.81494" />
                            </ActuatorCurve>
                          </ActuatorList>
                        </Timeline>
                        <Resource name="Standing" type="Lock" timeout="1" />
                        <Resource name="All motors" type="Lock" timeout="1" />
                      </Box>
                      <Box name="Eye LEDs" id="1" localization="8" tooltip="Set the LED color of the eyes. Note that you must open the box to enter the color." x="482" y="333">
                        <bitmap>media/images/box/interaction/LED.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                        <Parameter name="Side" inherits_from_parent="0" content_type="3" value="Both" default_value="Both" custom_choice="0" tooltip="Choose the eye where the LED light is set." id="4">
                          <Choice value="Both" />
                          <Choice value="Left" />
                          <Choice value="Right" />
                        </Parameter>
                        <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="5" />
                        <Timeline enable="0">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram>
                                <Box name="Eyes LEDs" id="15" localization="8" tooltip="Set the color of LEDs of robot&apos;s eyes." x="281" y="41">
                                  <bitmap>media/images/box/interaction/LED.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.fadeOps = []
        self.leds = self.session().service("ALLeds")

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_color(self, p):
        if( self.getParameter("Side") == "Left" ):
            sGroup = "LeftFaceLeds"
        elif( self.getParameter("Side") == "Right" ):
            sGroup = "RightFaceLeds"
        else:
            sGroup = "FaceLeds"
        fadeOp = self.leds.fadeRGB(sGroup, 256*256*p[0] + 256*p[1] + p[2], self.getParameter("Duration (s)"), _async=True)
        self.fadeOps.append(fadeOp)
        fadeOp.wait()
        self.fadeOps.remove(fadeOp)
        if( self.fadeOps == [] ):
            self.onDone() # activate output of the box]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="color" type="2" type_size="3" nature="2" inner="0" tooltip="Color of robot&apos;s eyes." id="2" />
                                  <Output name="onDone" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                  <Parameter name="Side" inherits_from_parent="1" content_type="3" value="Both" default_value="Both" custom_choice="0" tooltip="Choose the eye where the LED light is set." id="4">
                                    <Choice value="Both" />
                                    <Choice value="Left" />
                                    <Choice value="Right" />
                                  </Parameter>
                                  <Parameter name="Duration (s)" inherits_from_parent="1" content_type="2" value="0.1" default_value="0.1" min="0" max="5" tooltip="Transition&apos;s duration in seconds." id="5" />
                                </Box>
                                <Box name="Color Edit" id="16" localization="8" tooltip="Transmit a table of number [R,G,B] correponsding to the selected color." plugin="coloredit_plugin" x="105" y="47">
                                  <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped([255, 170, 255])]]>
                                    </content>
                                  </script>
                                  <pluginContent>
                                    <color>#ffaaff</color>
                                  </pluginContent>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="To send the color on the output." id="2" />
                                  <Output name="onStopped" type="2" type_size="3" nature="1" inner="0" tooltip="[R,G,B] with R, G and B between 0 and 255." id="3" />
                                </Box>
                                <Link inputowner="15" indexofinput="2" outputowner="16" indexofoutput="3" />
                                <Link inputowner="16" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="0" indexofinput="3" outputowner="15" indexofoutput="3" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                        </Timeline>
                      </Box>
                      <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                      <Link inputowner="73" indexofinput="2" outputowner="2" indexofoutput="4" />
                      <Link inputowner="0" indexofinput="4" outputowner="73" indexofoutput="4" />
                      <Link inputowner="1" indexofinput="2" outputowner="1" indexofoutput="3" />
                      <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                      <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="3" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
              </Timeline>
            </Box>
            <Box name="Switch Case" id="7" localization="8" tooltip="Test input value and stimulate the output matching to this value. If there is no&#x0A;matching output, the default output (onDefault) is stimulated.&#x0A;&#x0A;You can edit a case by left double-clicking on the line. You can add a&#x0A;case by right clicking on a line and selecting &apos;Insert a row&apos;. You can delete&#x0A;a case by right clicking on a line and selecting &apos;Remove a row&apos;." plugin="dispatcher_plugin" x="263" y="53">
              <bitmap>media/images/box/interaction/choice.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
		  GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
		  GeneratedClass.__init__( self )

	def onInput_onStart(self, p):
		p = self.typeConversion(p)
		if(p == self.typeConversion("random")):
			self.output_1(p)
		elif(p == self.typeConversion("animal")):
			self.output_2(p)
		elif(p == self.typeConversion("place")):
			self.output_3(p)
		elif(p == self.typeConversion("sport")):
			self.output_4(p)
		else:
			self.onDefault()

	def typeConversion(self, p):
		try:
			p = float(p)
			pint = int(p)
			if( p == pint ):
				p = pint
		except:
			p = str(p)
		return p]]>
                </content>
              </script>
              <pluginContent>
                <keywords>
                  <keyword>&quot;random&quot;</keyword>
                  <keyword>&quot;animal&quot;</keyword>
                  <keyword>&quot;place&quot;</keyword>
                  <keyword>&quot;sport&quot;</keyword>
                  <keyword></keyword>
                </keywords>
              </pluginContent>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Value to test." id="2" />
              <Output name="onDefault" type="1" type_size="1" nature="2" inner="0" tooltip="If the input value does not match any value set on the box." id="3" />
              <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="4" />
              <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="5" />
              <Output name="output_3" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" />
              <Output name="output_4" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="7" />
            </Box>
            <Link inputowner="0" indexofinput="4" outputowner="6" indexofoutput="4" />
            <Link inputowner="6" indexofinput="2" outputowner="3" indexofoutput="4" />
            <Link inputowner="6" indexofinput="2" outputowner="5" indexofoutput="4" />
            <Link inputowner="6" indexofinput="2" outputowner="4" indexofoutput="4" />
            <Link inputowner="6" indexofinput="2" outputowner="2" indexofoutput="4" />
            <Link inputowner="7" indexofinput="2" outputowner="1" indexofoutput="4" />
            <Link inputowner="3" indexofinput="2" outputowner="7" indexofoutput="4" />
            <Link inputowner="5" indexofinput="2" outputowner="7" indexofoutput="5" />
            <Link inputowner="4" indexofinput="2" outputowner="7" indexofoutput="6" />
            <Link inputowner="2" indexofinput="2" outputowner="7" indexofoutput="7" />
            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
          </Diagram>
        </BehaviorKeyframe>
      </BehaviorLayer>
    </Timeline>
  </Box>
</ChoregrapheProject>
